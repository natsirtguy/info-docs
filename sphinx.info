This is sphinx.info, produced by makeinfo version 6.5 from sphinx.texi.

     Sphinx 1.6.3, Mar 16, 2018

     Georg Brandl

     Copyright © 2007-2018, Georg Brandl and the Sphinx team

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Sphinx: (sphinx.info). The Sphinx documentation builder.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.6.3.


File: sphinx.info,  Node: Top,  Next: Installing Sphinx,  Up: (dir)

Sphinx Documentation
********************

     Sphinx 1.6.3, Mar 16, 2018

     Georg Brandl

     Copyright © 2007-2018, Georg Brandl and the Sphinx team

* Menu:

* Installing Sphinx::
* Getting Started::
* Introduction::
* Man Pages::
* reStructuredText Primer::
* Sphinx Markup Constructs::
* Sphinx Domains::
* Available builders::
* The build configuration file::
* Example of configuration file::
* Internationalization::
* HTML theming support::
* Setuptools integration::
* Templating: Templating<2>.
* LaTeX customization::
* Markdown support::
* Sphinx Extensions::
* Developing extensions for Sphinx::
* Sphinx Web Support::
* Sphinx FAQ::
* Glossary: Glossary<2>.
* Changes in Sphinx::
* Sphinx authors::
* Python Module Index::
* Index::

 — The Detailed Node Listing —

Installing Sphinx

* Overview::
* Linux::
* macOS::
* Windows::
* Installation from PyPI::
* Installation from source::

Linux

* Debian/Ubuntu::
* RHEL, CentOS: RHEL CentOS.
* Other distributions::

macOS

* Homebrew::
* MacPorts::

Getting Started

* Setting up the documentation sources::
* Defining document structure::
* Adding content::
* Running the build::
* Documenting objects::
* Basic configuration::
* Autodoc::
* Intersphinx::
* More topics to be covered::

Introduction

* Conversion from other systems::
* Use with other systems::
* Prerequisites::
* Usage::

Man Pages

* Core Applications::
* Additional Applications::

Core Applications

* sphinx-quickstart::
* sphinx-build::

sphinx-quickstart

* Synopsis::
* Description::
* Options::
* See also::

sphinx-build

* Synopsis: Synopsis<2>.
* Description: Description<2>.
* Options: Options<2>.
* Environment Variables::
* Deprecation Warnings::
* See also: See also<2>.

Additional Applications

* sphinx-apidoc::
* sphinx-autogen::

sphinx-apidoc

* Synopsis: Synopsis<3>.
* Description: Description<3>.
* Options: Options<3>.
* Environment::
* See also: See also<3>.

sphinx-autogen

* Synopsis: Synopsis<4>.
* Description: Description<4>.
* Options: Options<4>.
* Example::
* See also: See also<4>.

reStructuredText Primer

* Paragraphs::
* Inline markup::
* Lists and Quote-like blocks::
* Source Code::
* Tables::
* Hyperlinks::
* Sections::
* Explicit Markup::
* Directives::
* Images::
* Footnotes::
* Citations::
* Substitutions::
* Comments::
* Source encoding::
* Gotchas::

Hyperlinks

* External links::
* Internal links::

Sphinx Markup Constructs

* The TOC tree::
* Paragraph-level markup::
* Table-of-contents markup::
* Glossary::
* Grammar production displays::
* Showing code examples::
* Inline markup: Inline markup<2>.
* Miscellaneous markup::

The TOC tree

* Special names::

Showing code examples

* Line numbers::
* Includes::
* Caption and name::
* Dedent::

Inline markup

* Cross-referencing syntax::
* Other semantic markup::
* Substitutions: Substitutions<2>.

Cross-referencing syntax

* Cross-referencing anything::
* Cross-referencing objects::
* Cross-referencing arbitrary locations::
* Cross-referencing documents::
* Referencing downloadable files::
* Cross-referencing figures by figure number::
* Cross-referencing other items of interest::

Miscellaneous markup

* File-wide metadata::
* Meta-information markup::
* Index-generating markup::
* Including content based on tags::
* Tables: Tables<2>.
* Math::

Sphinx Domains

* What is a Domain?::
* Basic Markup::
* The Python Domain::
* The C Domain::
* The C++ Domain::
* The Standard Domain::
* The JavaScript Domain::
* The reStructuredText domain::
* More domains::

Basic Markup

* Cross-referencing syntax: Cross-referencing syntax<2>.

The Python Domain

* Python Signatures::
* Info field lists::
* Cross-referencing Python objects::

The C Domain

* Cross-referencing C constructs::

The C++ Domain

* Directives: Directives<2>.
* Constrained Templates::
* Inline Expressions and Tpes::
* Namespacing::
* Info field lists: Info field lists<2>.
* Cross-referencing::
* Configuration Variables::

Directives

* Options: Options<5>.

Constrained Templates

* Placeholders::
* Template Introductions::

Cross-referencing

* Declarations without template parameters and template arguments::
* Templated declarations::
* (Full) Template Specialisations: Full Template Specialisations.
* Partial Template Specialisations::

Available builders

* Serialization builder details::

The build configuration file

* General configuration::
* Project information::
* Options for internationalization::
* Options for HTML output::
* Options for HTML help output::
* Options for Apple Help output::
* Options for epub output::
* Options for LaTeX output::
* Options for text output::
* Options for manual page output::
* Options for Texinfo output::
* Options for QtHelp output::
* Options for the linkcheck builder::
* Options for the XML builder::
* Options for the C++ domain::

Internationalization

* Sphinx internationalization details::
* Translating with sphinx-intl::
* Using Transifex service for team translation::
* Contributing to Sphinx reference translation::

Translating with sphinx-intl

* Quick guide::
* Translating::
* Update your po files by new pot files::

HTML theming support

* Using a theme::
* Builtin themes::
* Creating themes::
* Distribute your theme as a python package::
* Third Party Themes::

Distribute your theme as a python package

* Templating::
* Static templates::

Setuptools integration

* Using setuptools integration::
* Options for setuptools integration::

Templating

* Do I need to use Sphinx’s templates to produce HTML?::
* Jinja/Sphinx Templating Primer::
* Working with the builtin templates::

Working with the builtin templates

* Blocks::
* Configuration Variables: Configuration Variables<2>.
* Helper Functions::
* Global Variables::

LaTeX customization

* Basic customization::
* The LaTeX style file options::
* LaTeX macros and environments::

The LaTeX style file options

* The sphinxsetup interface::
* The available styling options::

LaTeX macros and environments

* Macros::
* Environments::
* Miscellany::

Markdown support

* Configuration::

Sphinx Extensions

* Builtin Sphinx extensions::
* Third-party extensions::

Builtin Sphinx extensions

* sphinx.ext.autodoc – Include documentation from docstrings: sphinx ext autodoc – Include documentation from docstrings.
* sphinx.ext.autosectionlabel – Allow reference sections using its title: sphinx ext autosectionlabel – Allow reference sections using its title.
* sphinx.ext.autosummary – Generate autodoc summaries: sphinx ext autosummary – Generate autodoc summaries.
* sphinx.ext.coverage – Collect doc coverage stats: sphinx ext coverage – Collect doc coverage stats.
* sphinx.ext.doctest – Test snippets in the documentation: sphinx ext doctest – Test snippets in the documentation.
* sphinx.ext.extlinks – Markup to shorten external links: sphinx ext extlinks – Markup to shorten external links.
* sphinx.ext.githubpages – Publish HTML docs in GitHub Pages: sphinx ext githubpages – Publish HTML docs in GitHub Pages.
* sphinx.ext.graphviz – Add Graphviz graphs: sphinx ext graphviz – Add Graphviz graphs.
* sphinx.ext.ifconfig – Include content based on configuration: sphinx ext ifconfig – Include content based on configuration.
* sphinx.ext.imgconverter – Convert images to appropriate format for builders: sphinx ext imgconverter – Convert images to appropriate format for builders.
* sphinx.ext.inheritance_diagram – Include inheritance diagrams: sphinx ext inheritance_diagram – Include inheritance diagrams.
* sphinx.ext.intersphinx – Link to other projects’ documentation: sphinx ext intersphinx – Link to other projects’ documentation.
* sphinx.ext.linkcode – Add external links to source code: sphinx ext linkcode – Add external links to source code.
* Math support in Sphinx::
* sphinx.ext.napoleon – Support for NumPy and Google style docstrings: sphinx ext napoleon – Support for NumPy and Google style docstrings.
* sphinx.ext.todo – Support for todo items: sphinx ext todo – Support for todo items.
* sphinx.ext.viewcode – Add links to highlighted source code: sphinx ext viewcode – Add links to highlighted source code.

sphinx.ext.autodoc – Include documentation from docstrings

* Docstring preprocessing::
* Skipping members::

sphinx.ext.autosectionlabel – Allow reference sections using its title

* Configuration: Configuration<2>.

sphinx.ext.autosummary – Generate autodoc summaries

* sphinx-autogen – generate autodoc stub pages::
* Generating stub pages automatically::
* Customizing templates::

sphinx.ext.doctest – Test snippets in the documentation

* Directives: Directives<3>.
* Configuration: Configuration<3>.

sphinx.ext.imgconverter – Convert images to appropriate format for builders

* Configuration: Configuration<4>.

sphinx.ext.intersphinx – Link to other projects’ documentation

* Configuring Intersphinx::
* Showing all links of an Intersphinx mapping file::

Math support in Sphinx

* sphinx.ext.imgmath – Render math as images: sphinx ext imgmath – Render math as images.
* sphinx.ext.mathjax – Render math via JavaScript: sphinx ext mathjax – Render math via JavaScript.
* sphinx.ext.jsmath – Render math via JavaScript: sphinx ext jsmath – Render math via JavaScript.

sphinx.ext.napoleon – Support for NumPy and Google style docstrings

* Napoleon - Marching toward legible docstrings::
* Configuration: Configuration<5>.

Napoleon - Marching toward legible docstrings

* Getting Started: Getting Started<2>.
* Docstrings::
* Docstring Sections::
* Google vs NumPy::
* Type Annotations::

Third-party extensions

* Where to put your own extensions?::

Developing extensions for Sphinx

* Discovery of builders by entry point::
* Extension metadata::
* APIs used for writing extensions::
* Deprecated APIs::

APIs used for writing extensions

* Tutorial; Writing a simple extension: Tutorial Writing a simple extension.
* Application API::
* Build environment API::
* Builder API::
* Environment Collector API::
* Docutils markup API::
* Domain API::
* Parser API::
* Doctree node classes added by Sphinx::
* Logging API::
* i18n API::

Tutorial: Writing a simple extension

* Important objects::
* Build Phases::
* Extension Design::
* The Setup Function::
* The Node Classes::
* The Directive Classes::
* The Event Handlers::

Application API

* Extension setup::
* Emitting events::
* Producing messages / logging::
* Sphinx runtime information::
* Sphinx core events::
* Checking the Sphinx version::
* The Config object::
* The template bridge::
* Exceptions::

Docutils markup API

* Roles::
* Directives: Directives<4>.

Directives

* ViewLists::
* Parsing directive content as ReST::

Doctree node classes added by Sphinx

* Nodes for domain-specific object descriptions::
* New admonition-like constructs::
* Other paragraph-level nodes::
* New inline nodes::
* Special nodes::

Sphinx Web Support

* Web Support Quick Start::
* The WebSupport Class::
* Search Adapters::
* Storage Backends::

Web Support Quick Start

* Building Documentation Data::
* Integrating Sphinx Documents Into Your Webapp::
* Performing Searches::
* Comments & Proposals::
* Comment Moderation::

Integrating Sphinx Documents Into Your Webapp

* Authentication::

The WebSupport Class

* Methods::

Search Adapters

* BaseSearch Methods::

Storage Backends

* StorageBackend Methods::

Sphinx FAQ

* How do I…::
* Using Sphinx with…::
* Epub info::
* Texinfo info::

Texinfo info

* Displaying Links::
* Notes::



File: sphinx.info,  Node: Installing Sphinx,  Next: Getting Started,  Prev: Top,  Up: Top

1 Installing Sphinx
*******************

* Menu:

* Overview::
* Linux::
* macOS::
* Windows::
* Installation from PyPI::
* Installation from source::


File: sphinx.info,  Node: Overview,  Next: Linux,  Up: Installing Sphinx

1.1 Overview
============

Sphinx is written in Python(1) and supports both Python 2.7 and Python
3.3+.  We recommend the latter.

   ---------- Footnotes ----------

   (1) http://docs.python-guide.org/en/latest/


File: sphinx.info,  Node: Linux,  Next: macOS,  Prev: Overview,  Up: Installing Sphinx

1.2 Linux
=========

* Menu:

* Debian/Ubuntu::
* RHEL, CentOS: RHEL CentOS.
* Other distributions::


File: sphinx.info,  Node: Debian/Ubuntu,  Next: RHEL CentOS,  Up: Linux

1.2.1 Debian/Ubuntu
-------------------

Install either ‘python3-sphinx’ (Python 3) or ‘python-sphinx’ (Python 2)
using ‘apt-get’:

     $ apt-get install python3-sphinx

If it not already present, this will install Python for you.


File: sphinx.info,  Node: RHEL CentOS,  Next: Other distributions,  Prev: Debian/Ubuntu,  Up: Linux

1.2.2 RHEL, CentOS
------------------

Install ‘python-sphinx’ using ‘yum’:

     $ yum install python-sphinx

If it not already present, this will install Python for you.


File: sphinx.info,  Node: Other distributions,  Prev: RHEL CentOS,  Up: Linux

1.2.3 Other distributions
-------------------------

Most Linux distributions have Sphinx in their package repositories.
Usually the package is called ‘python3-sphinx’, ‘python-sphinx’ or
‘sphinx’.  Be aware that there are at least two other packages with
‘sphinx’ in their name: a speech recognition toolkit (`CMU Sphinx') and
a full-text search database (`Sphinx search').


File: sphinx.info,  Node: macOS,  Next: Windows,  Prev: Linux,  Up: Installing Sphinx

1.3 macOS
=========

Sphinx can be installed using Homebrew(1) or MacPorts(2).

* Menu:

* Homebrew::
* MacPorts::

   ---------- Footnotes ----------

   (1) https://brew.sh/

   (2) https://www.macports.org/


File: sphinx.info,  Node: Homebrew,  Next: MacPorts,  Up: macOS

1.3.1 Homebrew
--------------

     $ brew install sphinx-doc

For more information, refer to the package overview(1).

   ---------- Footnotes ----------

   (1) http://formulae.brew.sh/formula/sphinx-doc


File: sphinx.info,  Node: MacPorts,  Prev: Homebrew,  Up: macOS

1.3.2 MacPorts
--------------

Install either ‘python36-sphinx’ (Python 3) or ‘python27-sphinx’ (Python
2) using ‘port’:

     $ sudo port install py36-sphinx

To set up the executable paths, use the ‘port select’ command:

     $ sudo port select --set python python36
     $ sudo port select --set sphinx py36-sphinx

For more information, refer to the package overview(1).

   ---------- Footnotes ----------

   (1) https://www.macports.org/ports.php?by=library&substr=py36-sphinx


File: sphinx.info,  Node: Windows,  Next: Installation from PyPI,  Prev: macOS,  Up: Installing Sphinx

1.4 Windows
===========

     Todo: Could we start packaging this?

Most Windows users do not have Python installed by default, so we begin
with the installation of Python itself.  If you are unsure, open the
`Command Prompt' (‘Control-r’ and type ‘cmd’).  Once the command prompt
is open, type ‘python --version’ and press Enter.  If Python is
available, you will see the version of Python printed to the screen.  If
you do not have Python installed, refer to the Hitchhikers Guide to
Python’s(1) Python on Windows installation guides.  You can install
either Python 3(2) or Python 2.7(3).  Python 3 is recommended.

Once Python is installed, you can install Sphinx using ‘pip’.  Refer to
the *note pip installation instructions: 3e. below for more information.

   ---------- Footnotes ----------

   (1) http://docs.python-guide.org/en/latest/

   (2) http://docs.python-guide.org/en/latest/starting/install3/win/

   (3) http://docs.python-guide.org/en/latest/starting/install/win/


File: sphinx.info,  Node: Installation from PyPI,  Next: Installation from source,  Prev: Windows,  Up: Installing Sphinx

1.5 Installation from PyPI
==========================

Sphinx packages are published on the Python Package Index(1).  The
preferred tool for installing packages from `PyPI' is ‘pip’.  This tool
is provided with all modern versions of Python.

On Linux or MacOS, you should open your terminal and run the following
command.

     $ pip install -U sphinx

On Windows, you should open `Command Prompt' (‘Control-r’ and type
‘cmd’) and run the same command.

     C:\> pip install -U sphinx

After installation, type ‘sphinx-build --version’ on the command prompt.
If everything worked fine, you will see the version number for the
Sphinx package you just installed.

Installation from `PyPI' also allows you to install the latest
development release.  You will not generally need (or want) to do this,
but it can be useful if you see a possible bug in the latest stable
release.  To do this, use the ‘--pre’ flag.

     $ pip install -U --pre sphinx

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/Sphinx


File: sphinx.info,  Node: Installation from source,  Prev: Installation from PyPI,  Up: Installing Sphinx

1.6 Installation from source
============================

You can install Sphinx directly from a clone of the Git repository(1).
This can be done either by cloning the repo and installing from the
local clone, on simply installing directly via ‘git’.

     $ git clone https://github.com/sphinx-doc/sphinx
     $ cd sphinx
     $ pip install .

     $ pip install git+https://github.com/sphinx-doc/sphinx

You can also download a snapshot of the Git repo in either tar.gz(2) or
zip(3) format.  Once downloaded and extracted, these can be installed
with ‘pip’ as above.

   ---------- Footnotes ----------

   (1) https://github.com/sphinx-doc/sphinx

   (2) https://github.com/sphinx-doc/sphinx/archive/master.tar.gz

   (3) https://github.com/sphinx-doc/sphinx/archive/master.zip


File: sphinx.info,  Node: Getting Started,  Next: Introduction,  Prev: Installing Sphinx,  Up: Top

2 Getting Started
*****************

Once Sphinx is *note installed: 30, you can proceed with setting up your
first Sphinx project.  To ease the process of getting started, Sphinx
provides a tool, ‘sphinx-quickstart’, which will generate a
documentation source directory and populate it with some defaults.
We’re going to use the ‘sphinx-quickstart’ tool here, though it’s use by
no means necessary.

* Menu:

* Setting up the documentation sources::
* Defining document structure::
* Adding content::
* Running the build::
* Documenting objects::
* Basic configuration::
* Autodoc::
* Intersphinx::
* More topics to be covered::


File: sphinx.info,  Node: Setting up the documentation sources,  Next: Defining document structure,  Up: Getting Started

2.1 Setting up the documentation sources
========================================

The root directory of a Sphinx collection of *note reStructuredText: 45.
document sources is called the *note source directory: 46.  This
directory also contains the Sphinx configuration file ‘conf.py’, where
you can configure all aspects of how Sphinx reads your sources and
builds your documentation.  (1)

Sphinx comes with a script called ‘sphinx-quickstart’ that sets up a
source directory and creates a default ‘conf.py’ with the most useful
configuration values from a few questions it asks you.  To use this,
run:

     $ sphinx-quickstart

Answer each question asked.  Be sure to say yes to the ‘autodoc’
extension, as we will use this later.

There is also an automatic “API documentation” generator called
‘sphinx-apidoc’; see *note sphinx-apidoc: 48. for details.

   ---------- Footnotes ----------

   (1) This is the usual layout.  However, ‘conf.py’ can also live in
another directory, the *note configuration directory: 47.  Refer to the
‘sphinx-build man page <sphinx-build>’ for more information.


File: sphinx.info,  Node: Defining document structure,  Next: Adding content,  Prev: Setting up the documentation sources,  Up: Getting Started

2.2 Defining document structure
===============================

Let’s assume you’ve run ‘sphinx-quickstart’.  It created a source
directory with ‘conf.py’ and a master document, ‘index.rst’ (if you
accepted the defaults).  The main function of the *note master document:
4a. is to serve as a welcome page, and to contain the root of the “table
of contents tree” (or `toctree').  This is one of the main things that
Sphinx adds to reStructuredText, a way to connect multiple files to a
single hierarchy of documents.

reStructuredText directives
...........................

‘toctree’ is a reStructuredText `directive', a very versatile piece of
markup.  Directives can have arguments, options and content.

`Arguments' are given directly after the double colon following the
directive’s name.  Each directive decides whether it can have arguments,
and how many.

`Options' are given after the arguments, in form of a “field list”.  The
‘maxdepth’ is such an option for the ‘toctree’ directive.

`Content' follows the options or arguments after a blank line.  Each
directive decides whether to allow content, and what to do with it.

A common gotcha with directives is that `the first line of the content
must be indented to the same level as the options are'.

The ‘toctree’ directive initially is empty, and looks like so:

     .. toctree::
        :maxdepth: 2

You add documents listing them in the `content' of the directive:

     .. toctree::
        :maxdepth: 2

        usage/installation
        usage/quickstart
        ...

This is exactly how the ‘toctree’ for this documentation looks.  The
documents to include are given as *note document name: 4b.s, which in
short means that you leave off the file name extension and use forward
slashes (‘/’) as directory separators.

 [image src="more.png" alt="more info" ]
Read more about *note the toctree directive: 4c.

You can now create the files you listed in the ‘toctree’ and add
content, and their section titles will be inserted (up to the ‘maxdepth’
level) at the place where the ‘toctree’ directive is placed.  Also,
Sphinx now knows about the order and hierarchy of your documents.  (They
may contain ‘toctree’ directives themselves, which means you can create
deeply nested hierarchies if necessary.)


File: sphinx.info,  Node: Adding content,  Next: Running the build,  Prev: Defining document structure,  Up: Getting Started

2.3 Adding content
==================

In Sphinx source files, you can use most features of standard *note
reStructuredText: 45.  There are also several features added by Sphinx.
For example, you can add cross-file references in a portable way (which
works for all output types) using the *note ref: 4e. role.

For an example, if you are viewing the HTML version you can look at the
source for this document – use the “Show Source” link in the sidebar.

     Todo: Update the below link when we add new guides on these.

 [image src="more.png" alt="more info" ]
See *note reStructuredText Primer: 4f. for a more in-depth introduction
to reStructuredText and *note Sphinx Markup Constructs: 50. for a full
list of markup added by Sphinx.


File: sphinx.info,  Node: Running the build,  Next: Documenting objects,  Prev: Adding content,  Up: Getting Started

2.4 Running the build
=====================

Now that you have added some files and content, let’s make a first build
of the docs.  A build is started with the ‘sphinx-build’ program:

     $ sphinx-build -b html sourcedir builddir

where `sourcedir' is the *note source directory: 46, and `builddir' is
the directory in which you want to place the built documentation.  The
*note -b: 52. option selects a builder; in this example Sphinx will
build HTML files.

 [image src="more.png" alt="more info" ]
Refer to the ‘sphinx-build man page <sphinx-build>’ for all options that
‘sphinx-build’ supports.

However, ‘sphinx-quickstart’ script creates a ‘Makefile’ and a
‘make.bat’ which make life even easier for you.  These can be executed
by running ‘make’ with the name of the builder.  For example.

     $ make html

This will build HTML docs in the build directory you chose.  Execute
‘make’ without an argument to see which targets are available.

     How do I generate PDF documents?: ‘make latexpdf’ runs the *note
     LaTeX builder: 53. and readily invokes the pdfTeX toolchain for
     you.

     Todo: Move this whole section into a guide on rST or directives


File: sphinx.info,  Node: Documenting objects,  Next: Basic configuration,  Prev: Running the build,  Up: Getting Started

2.5 Documenting objects
=======================

One of Sphinx’s main objectives is easy documentation of `objects' (in a
very general sense) in any `domain'.  A domain is a collection of object
types that belong together, complete with markup to create and reference
descriptions of these objects.

The most prominent domain is the Python domain.  For example, to
document Python’s built-in function ‘enumerate()’, you would add this to
one of your source files.

     .. py:function:: enumerate(sequence[, start=0])

        Return an iterator that yields tuples of an index and an item of the
        *sequence*. (And so on.)

This is rendered like this:

 -- Function: enumerate (sequence[, start=0])

     Return an iterator that yields tuples of an index and an item of
     the `sequence'.  (And so on.)

The argument of the directive is the `signature' of the object you
describe, the content is the documentation for it.  Multiple signatures
can be given, each in its own line.

The Python domain also happens to be the default domain, so you don’t
need to prefix the markup with the domain name.

     .. function:: enumerate(sequence[, start=0])

        ...

does the same job if you keep the default setting for the default
domain.

There are several more directives for documenting other types of Python
objects, for example *note py;class: 56. or *note py;method: 57.  There
is also a cross-referencing `role' for each of these object types.  This
markup will create a link to the documentation of ‘enumerate()’.

     The :py:func:`enumerate` function can be used for ...

And here is the proof: A link to *note enumerate(): 55.

Again, the ‘py:’ can be left out if the Python domain is the default
one.  It doesn’t matter which file contains the actual documentation for
‘enumerate()’; Sphinx will find it and create a link to it.

Each domain will have special rules for how the signatures can look
like, and make the formatted output look pretty, or add specific
features like links to parameter types, e.g.  in the C/C++ domains.

 [image src="more.png" alt="more info" ]
See *note Sphinx Domains: 58. for all the available domains and their
directives/roles.


File: sphinx.info,  Node: Basic configuration,  Next: Autodoc,  Prev: Documenting objects,  Up: Getting Started

2.6 Basic configuration
=======================

Earlier we mentioned that the ‘conf.py’ file controls how Sphinx
processes your documents.  In that file, which is executed as a Python
source file, you assign configuration values.  For advanced users: since
it is executed by Sphinx, you can do non-trivial tasks in it, like
extending ‘sys.path’ or importing a module to find out the version you
are documenting.

The config values that you probably want to change are already put into
the ‘conf.py’ by ‘sphinx-quickstart’ and initially commented out (with
standard Python syntax: a ‘#’ comments the rest of the line).  To change
the default value, remove the hash sign and modify the value.  To
customize a config value that is not automatically added by
‘sphinx-quickstart’, just add an additional assignment.

Keep in mind that the file uses Python syntax for strings, numbers,
lists and so on.  The file is saved in UTF-8 by default, as indicated by
the encoding declaration in the first line.  If you use non-ASCII
characters in any string value, you need to use Python Unicode strings
(like ‘project = u'Exposé'’).

 [image src="more.png" alt="more info" ]
See *note The build configuration file: 5a. for documentation of all
available config values.

     Todo: Move this entire doc to a different section


File: sphinx.info,  Node: Autodoc,  Next: Intersphinx,  Prev: Basic configuration,  Up: Getting Started

2.7 Autodoc
===========

When documenting Python code, it is common to put a lot of documentation
in the source files, in documentation strings.  Sphinx supports the
inclusion of docstrings from your modules with an `extension' (an
extension is a Python module that provides additional features for
Sphinx projects) called `autodoc'.

In order to use `autodoc', you need to activate it in ‘conf.py’ by
putting the string ‘'sphinx.ext.autodoc'’ into the list assigned to the
*note extensions: 5c. config value.  Then, you have a few additional
directives at your disposal.

For example, to document the function ‘io.open()’, reading its signature
and docstring from the source file, you’d write this:

     .. autofunction:: io.open

You can also document whole classes or even modules automatically, using
member options for the auto directives, like

     .. automodule:: io
        :members:

`autodoc' needs to import your modules in order to extract the
docstrings.  Therefore, you must add the appropriate path to ‘sys.path’
in your ‘conf.py’.

     Warning: *note autodoc: 18. `imports' the modules to be documented.
     If any modules have side effects on import, these will be executed
     by ‘autodoc’ when ‘sphinx-build’ is run.

     If you document scripts (as opposed to library modules), make sure
     their main routine is protected by a ‘if __name__ == '__main__'’
     condition.

 [image src="more.png" alt="more info" ]
See *note sphinx.ext.autodoc: 18. for the complete description of the
features of autodoc.

     Todo: Move this doc to another section


File: sphinx.info,  Node: Intersphinx,  Next: More topics to be covered,  Prev: Autodoc,  Up: Getting Started

2.8 Intersphinx
===============

Many Sphinx documents including the Python documentation(1) are
published on the internet.  When you want to make links to such
documents from your documentation, you can do it with *note
sphinx.ext.intersphinx: 24.

In order to use intersphinx, you need to activate it in ‘conf.py’ by
putting the string ‘'sphinx.ext.intersphinx'’ into the *note extensions:
5c. list and set up the *note intersphinx_mapping: 5e. config value.

For example, to link to ‘io.open()’ in the Python library manual, you
need to setup your *note intersphinx_mapping: 5e. like:

     intersphinx_mapping = {'python': ('https://docs.python.org/3', None)}

And now, you can write a cross-reference like ‘:py:func:`io.open`’.  Any
cross-reference that has no matching target in the current documentation
set, will be looked up in the documentation sets configured in *note
intersphinx_mapping: 5e. (this needs access to the URL in order to
download the list of valid targets).  Intersphinx also works for some
other *note domains’: 58. roles including ‘:ref:’, however it doesn’t
work for ‘:doc:’ as that is non-domain role.

 [image src="more.png" alt="more info" ]
See *note sphinx.ext.intersphinx: 24. for the complete description of
the features of intersphinx.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3


File: sphinx.info,  Node: More topics to be covered,  Prev: Intersphinx,  Up: Getting Started

2.9 More topics to be covered
=============================

   - *note Other extensions: 60.:

        * *note Math support in Sphinx: 61,

        * *note sphinx.ext.viewcode – Add links to highlighted source
          code: 62,

        * *note sphinx.ext.doctest – Test snippets in the documentation:
          63,

        * …

   - Static files

   - *note Selecting a theme: 64.

   - *note Setuptools integration: 65.

   - *note Templating: 66.

   - Using extensions

   - *note Writing extensions: 67.


File: sphinx.info,  Node: Introduction,  Next: Man Pages,  Prev: Getting Started,  Up: Top

3 Introduction
**************

This is the documentation for the Sphinx documentation builder.  Sphinx
is a tool that translates a set of reStructuredText(1) source files into
various output formats, automatically producing cross-references,
indices, etc.  That is, if you have a directory containing a bunch of
reST-formatted documents (and possibly subdirectories of docs in there
as well), Sphinx can generate a nicely-organized arrangement of HTML
files (in some other directory) for easy browsing and navigation.  But
from the same source, it can also generate a PDF file using LaTeX.

The focus is on hand-written documentation, rather than auto-generated
API docs.  Though there is support for that kind of documentation as
well (which is intended to be freely mixed with hand-written content),
if you need pure API docs have a look at Epydoc(2), which also
understands reST.

For a great “introduction” to writing docs in general – the whys and
hows, see also Write the docs(3), written by Eric Holscher.

* Menu:

* Conversion from other systems::
* Use with other systems::
* Prerequisites::
* Usage::

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/rst.html

   (2) http://epydoc.sourceforge.net/

   (3) https://write-the-docs.readthedocs.io/


File: sphinx.info,  Node: Conversion from other systems,  Next: Use with other systems,  Up: Introduction

3.1 Conversion from other systems
=================================

This section is intended to collect helpful hints for those wanting to
migrate to reStructuredText/Sphinx from other documentation systems.

   * Gerard Flanagan has written a script to convert pure HTML to reST;
     it can be found at the Python Package Index(1).

   * For converting the old Python docs to Sphinx, a converter was
     written which can be found at the Python SVN repository(2).  It
     contains generic code to convert Python-doc-style LaTeX markup to
     Sphinx reST.

   * Marcin Wojdyr has written a script to convert Docbook to reST with
     Sphinx markup; it is at GitHub(3).

   * Christophe de Vienne wrote a tool to convert from Open/LibreOffice
     documents to Sphinx: odt2sphinx(4).

   * To convert different markups, Pandoc(5) is a very helpful tool.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/html2rest

   (2) https://svn.python.org/projects/doctools/converter/

   (3) https://github.com/wojdyr/db2rst

   (4) https://pypi.python.org/pypi/odt2sphinx/

   (5) https://pandoc.org/


File: sphinx.info,  Node: Use with other systems,  Next: Prerequisites,  Prev: Conversion from other systems,  Up: Introduction

3.2 Use with other systems
==========================

See the *note pertinent section in the FAQ list: 6d.


File: sphinx.info,  Node: Prerequisites,  Next: Usage,  Prev: Use with other systems,  Up: Introduction

3.3 Prerequisites
=================

Sphinx needs at least `Python 2.7' or `Python 3.4' to run, as well as
the docutils(1) and Jinja2(2) libraries.  Sphinx should work with
docutils version 0.10 or some (not broken) SVN trunk snapshot.  If you
like to have source code highlighting support, you must also install the
Pygments(3) library.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/

   (2) http://jinja.pocoo.org/

   (3) http://pygments.org/


File: sphinx.info,  Node: Usage,  Prev: Prerequisites,  Up: Introduction

3.4 Usage
=========

See *note Getting Started: 41. for an introduction.  It also contains
links to more advanced sections in this manual for the topics it
discusses.


File: sphinx.info,  Node: Man Pages,  Next: reStructuredText Primer,  Prev: Introduction,  Up: Top

4 Man Pages
***********

These are the applications provided as part of Sphinx.

* Menu:

* Core Applications::
* Additional Applications::


File: sphinx.info,  Node: Core Applications,  Next: Additional Applications,  Up: Man Pages

4.1 Core Applications
=====================

* Menu:

* sphinx-quickstart::
* sphinx-build::


File: sphinx.info,  Node: sphinx-quickstart,  Next: sphinx-build,  Up: Core Applications

4.1.1 sphinx-quickstart
-----------------------

* Menu:

* Synopsis::
* Description::
* Options::
* See also::


File: sphinx.info,  Node: Synopsis,  Next: Description,  Up: sphinx-quickstart

4.1.1.1 Synopsis
................

`sphinx-quickstart'


File: sphinx.info,  Node: Description,  Next: Options,  Prev: Synopsis,  Up: sphinx-quickstart

4.1.1.2 Description
...................

‘sphinx-quickstart’ is an interactive tool that asks some questions
about your project and then generates a complete documentation directory
and sample Makefile to be used with ‘sphinx-build(1)’.


File: sphinx.info,  Node: Options,  Next: See also,  Prev: Description,  Up: sphinx-quickstart

4.1.1.3 Options
...............

 -- Option: -q, --quiet

     Quiet mode that will skip interactive wizard to specify options.
     This option requires ‘-p’, ‘-a’ and ‘-v’ options.

 -- Option: -h, --help, --version

     Display usage summary or Sphinx version.

Structure Options
.................

 -- Option: --sep

     If specified, separate source and build directories.

 -- Option: --dot=DOT

     Inside the root directory, two more directories will be created;
     “_templates” for custom HTML templates and “_static” for custom
     stylesheets and other static files.  You can enter another prefix
     (such as “.”) to replace the underscore.

Project Basic Options
.....................

 -- Option: -p PROJECT, --project=PROJECT

     Project name will be set.  (see *note project: 7e.).

 -- Option: -a AUTHOR, --author=AUTHOR

     Author names.  (see *note copyright: 80.).

 -- Option: -v VERSION

     Version of project.  (see *note version: 82.).

 -- Option: -r RELEASE, --release=RELEASE

     Release of project.  (see *note release: 84.).

 -- Option: -l LANGUAGE, --language=LANGUAGE

     Document language.  (see *note language: 86.).

 -- Option: --suffix=SUFFIX

     Source file suffix.  (see *note source_suffix: 88.).

 -- Option: --master=MASTER

     Master document name.  (see *note master_doc: 8a.).

 -- Option: --epub

     Use epub.

Extension Options
.................

 -- Option: --ext-autodoc

     Enable ‘sphinx.ext.autodoc’ extension.

 -- Option: --ext-doctest

     Enable ‘sphinx.ext.doctest’ extension.

 -- Option: --ext-intersphinx

     Enable ‘sphinx.ext.intersphinx’ extension.

 -- Option: --ext-todo

     Enable ‘sphinx.ext.todo’ extension.

 -- Option: --ext-coverage

     Enable ‘sphinx.ext.coverage’ extension.

 -- Option: --ext-imgmath

     Enable ‘sphinx.ext.imgmath’ extension.

 -- Option: --ext-mathjax

     Enable ‘sphinx.ext.mathjax’ extension.

 -- Option: --ext-ifconfig

     Enable ‘sphinx.ext.ifconfig’ extension.

 -- Option: --ext-viewcode

     Enable ‘sphinx.ext.viewcode’ extension.

 -- Option: --ext-githubpages

     Enable ‘sphinx.ext.githubpages’ extension.

 -- Option: --extensions=EXTENSIONS

     Enable arbitrary extensions.

Makefile and Batchfile Creation Options
.......................................

 -- Option: --use-make-mode (-m), --no-use-make-mode (-M)

     ‘Makefile/make.bat’ uses (or doesn’t use) *note make-mode: 98.
     Default is ‘use’, which generates a more concise
     ‘Makefile/make.bat’.

     Changed in version 1.5: make-mode is default.

 -- Option: --makefile, --no-makefile

     Create (or not create) makefile.

 -- Option: --batchfile, --no-batchfile

     Create (or not create) batchfile

Project templating
..................

New in version 1.5: Project templating options for sphinx-quickstart

 -- Option: -t, --templatedir=TEMPLATEDIR

     Template directory for template files.  You can modify the
     templates of sphinx project files generated by quickstart.
     Following Jinja2 template files are allowed:

        * ‘master_doc.rst_t’

        * ‘conf.py_t’

        * ‘Makefile_t’

        * ‘Makefile.new_t’

        * ‘make.bat_t’

        * ‘make.bat.new_t’

     In detail, please refer the system template files Sphinx provides.
     (‘sphinx/templates/quickstart’)

 -- Option: -d NAME=VALUE

     Define a template variable


File: sphinx.info,  Node: See also,  Prev: Options,  Up: sphinx-quickstart

4.1.1.4 See also
................

‘sphinx-build(1)’


File: sphinx.info,  Node: sphinx-build,  Prev: sphinx-quickstart,  Up: Core Applications

4.1.2 sphinx-build
------------------

* Menu:

* Synopsis: Synopsis<2>.
* Description: Description<2>.
* Options: Options<2>.
* Environment Variables::
* Deprecation Warnings::
* See also: See also<2>.


File: sphinx.info,  Node: Synopsis<2>,  Next: Description<2>,  Up: sphinx-build

4.1.2.1 Synopsis
................

`sphinx-build' [`options'] <`sourcedir'> <`outputdir'> [`filenames' …]


File: sphinx.info,  Node: Description<2>,  Next: Options<2>,  Prev: Synopsis<2>,  Up: sphinx-build

4.1.2.2 Description
...................

‘sphinx-build’ generates documentation from the files in ‘<sourcedir>’
and places it in the ‘<outputdir>’.

‘sphinx-build’ looks for ‘<sourcedir>/conf.py’ for the configuration
settings.  ‘sphinx-quickstart(1)’ may be used to generate template
files, including ‘conf.py’.

‘sphinx-build’ can create documentation in different formats.  A format
is selected by specifying the builder name on the command line; it
defaults to HTML. Builders can also perform other tasks related to
documentation processing.

By default, everything that is outdated is built.  Output only for
selected files can be built by specifying individual filenames.

For a list of available options, refer to *note sphinx-build -b: 52.


File: sphinx.info,  Node: Options<2>,  Next: Environment Variables,  Prev: Description<2>,  Up: sphinx-build

4.1.2.3 Options
...............

 -- Option: -b buildername

     The most important option: it selects a builder.  The most common
     builders are:

     `html'

          Build HTML pages.  This is the default builder.

     `dirhtml'

          Build HTML pages, but with a single directory per document.
          Makes for prettier URLs (no ‘.html’) if served from a
          webserver.

     `singlehtml'

          Build a single HTML with the whole content.

     `htmlhelp', `qthelp', `devhelp', `epub'

          Build HTML files with additional information for building a
          documentation collection in one of these formats.

     `applehelp'

          Build an Apple Help Book.  Requires ‘hiutil’ and ‘codesign’,
          which are not Open Source and presently only available on Mac
          OS X 10.6 and higher.

     `latex'

          Build LaTeX sources that can be compiled to a PDF document
          using ‘pdflatex’.

     `man'

          Build manual pages in groff format for UNIX systems.

     `texinfo'

          Build Texinfo files that can be processed into Info files
          using ‘makeinfo’.

     `text'

          Build plain text files.

     `gettext'

          Build gettext-style message catalogs (‘.pot’ files).

     `doctest'

          Run all doctests in the documentation, if the *note doctest:
          1c. extension is enabled.

     `linkcheck'

          Check the integrity of all external links.

     `xml'

          Build Docutils-native XML files.

     `pseudoxml'

          Build compact pretty-printed “pseudo-XML” files displaying the
          internal structure of the intermediate document trees.

     See *note Available builders: a3. for a list of all builders
     shipped with Sphinx.  Extensions can add their own builders.
 -- Option: -M buildername

     Alternative to *note -b: 52.  Uses the Sphinx ‘make_mode’ module,
     which provides the same build functionality as a default *note
     Makefile or Make.bat: a5.  In addition to all Sphinx *note
     builders: a3, the following build pipelines are available:

     `latexpdf'

          Build LaTeX files and run them through ‘pdflatex’, or as per
          *note latex_engine: a6. setting.  If *note language: 86. is
          set to ‘'ja'’, will use automatically the ‘platex/dvipdfmx’
          latex to PDF pipeline.

     `info'

          Build Texinfo files and run them through ‘makeinfo’.

          Important: Sphinx only recognizes the ‘-M’ option if it is
          placed first.

     New in version 1.2.1.

 -- Option: -a

     If given, always write all output files.  The default is to only
     write output files for new and changed source files.  (This may not
     apply to all builders.)

 -- Option: -E

     Don’t use a saved *note environment: a9. (the structure caching all
     cross-references), but rebuild it completely.  The default is to
     only read and parse source files that are new or have changed since
     the last run.

 -- Option: -t tag

     Define the tag `tag'.  This is relevant for *note only: ab.
     directives that only include their content if this tag is set.

     New in version 0.6.

 -- Option: -d path

     Since Sphinx has to read and parse all source files before it can
     write an output file, the parsed source files are cached as
     “doctree pickles”.  Normally, these files are put in a directory
     called ‘.doctrees’ under the build directory; with this option you
     can select a different cache directory (the doctrees can be shared
     between all builders).

 -- Option: -j N

     Distribute the build over `N' processes in parallel, to make
     building on multiprocessor machines more effective.  Note that not
     all parts and not all builders of Sphinx can be parallelized.  If
     ‘auto’ argument is given, Sphinx uses the number of CPUs as `N'.

     New in version 1.2: This option should be considered
     `experimental'.

     Changed in version 1.7: Support ‘auto’ argument.

 -- Option: -c path

     Don’t look for the ‘conf.py’ in the source directory, but use the
     given configuration directory instead.  Note that various other
     files and paths given by configuration values are expected to be
     relative to the configuration directory, so they will have to be
     present at this location too.

     New in version 0.3.

 -- Option: -C

     Don’t look for a configuration file; only take options via the ‘-D’
     option.

     New in version 0.5.

 -- Option: -D setting=value

     Override a configuration value set in the ‘conf.py’ file.  The
     value must be a number, string, list or dictionary value.

     For lists, you can separate elements with a comma like this: ‘-D
     html_theme_path=path1,path2’.

     For dictionary values, supply the setting name and key like this:
     ‘-D latex_elements.docclass=scrartcl’.

     For boolean values, use ‘0’ or ‘1’ as the value.

     Changed in version 0.6: The value can now be a dictionary value.

     Changed in version 1.3: The value can now also be a list value.

 -- Option: -A name=value

     Make the `name' assigned to `value' in the HTML templates.

     New in version 0.5.

 -- Option: -n

     Run in nit-picky mode.  Currently, this generates warnings for all
     missing references.  See the config value *note nitpick_ignore: b3.
     for a way to exclude some references as “known missing”.

 -- Option: -N

     Do not emit colored output.

 -- Option: -v

     Increase verbosity (loglevel).  This option can be given up to
     three times to get more debug logging output.  It implies *note -T:
     b6.

     New in version 1.2.

 -- Option: -q

     Do not output anything on standard output, only write warnings and
     errors to standard error.

 -- Option: -Q

     Do not output anything on standard output, also suppress warnings.
     Only errors are written to standard error.

 -- Option: -w file

     Write warnings (and errors) to the given file, in addition to
     standard error.

 -- Option: -W

     Turn warnings into errors.  This means that the build stops at the
     first warning and ‘sphinx-build’ exits with exit status 1.

 -- Option: -T

     Display the full traceback when an unhandled exception occurs.
     Otherwise, only a summary is displayed and the traceback
     information is saved to a file for further analysis.

     New in version 1.2.

 -- Option: -P

     (Useful for debugging only.)  Run the Python debugger, ‘pdb’, if an
     unhandled exception occurs while building.

 -- Option: -h, --help, --version

     Display usage summary or Sphinx version.

     New in version 1.2.

You can also give one or more filenames on the command line after the
source and build directories.  Sphinx will then try to build only these
output files (and their dependencies).


File: sphinx.info,  Node: Environment Variables,  Next: Deprecation Warnings,  Prev: Options<2>,  Up: sphinx-build

4.1.2.4 Environment Variables
.............................

The ‘sphinx-build’ refers following environment variables:

 -- Describe: MAKE

     A path to make command.  A command name is also allowed.
     ‘sphinx-build’ uses it to invoke sub-build process on make-mode.

Makefile Options
................

The ‘Makefile’ and ‘make.bat’ files created by ‘sphinx-quickstart’
usually run ‘sphinx-build’ only with the *note -b: 52. and *note -d: ac.
options.  However, they support the following variables to customize
behavior:

 -- Describe: PAPER

     The value for ‘“papersize”‘ key of *note latex_elements: be.

 -- Describe: SPHINXBUILD

     The command to use instead of ‘sphinx-build’.

 -- Describe: BUILDDIR

     The build directory to use instead of the one chosen in
     ‘sphinx-quickstart’.

 -- Describe: SPHINXOPTS

     Additional options for ‘sphinx-build’.


File: sphinx.info,  Node: Deprecation Warnings,  Next: See also<2>,  Prev: Environment Variables,  Up: sphinx-build

4.1.2.5 Deprecation Warnings
............................

If any deprecation warning like ‘RemovedInSphinxXXXWarning’ are
displayed when building a user’s document, some Sphinx extension is
using deprecated features.  In that case, please report it to author of
the extension.

To disable the deprecation warnings, please set ‘PYTHONWARNINGS=’
environment variable to your environment.  For example:

   * ‘PYTHONWARNINGS= make html’ (Linux/Mac)

   * ‘export PYTHONWARNINGS=’ and do ‘make html’ (Linux/Mac)

   * ‘set PYTHONWARNINGS=’ and do ‘make html’ (Windows)

   * modify your Makefile/make.bat and set the environment variable


File: sphinx.info,  Node: See also<2>,  Prev: Deprecation Warnings,  Up: sphinx-build

4.1.2.6 See also
................

‘sphinx-quickstart(1)’


File: sphinx.info,  Node: Additional Applications,  Prev: Core Applications,  Up: Man Pages

4.2 Additional Applications
===========================

* Menu:

* sphinx-apidoc::
* sphinx-autogen::


File: sphinx.info,  Node: sphinx-apidoc,  Next: sphinx-autogen,  Up: Additional Applications

4.2.1 sphinx-apidoc
-------------------

* Menu:

* Synopsis: Synopsis<3>.
* Description: Description<3>.
* Options: Options<3>.
* Environment::
* See also: See also<3>.


File: sphinx.info,  Node: Synopsis<3>,  Next: Description<3>,  Up: sphinx-apidoc

4.2.1.1 Synopsis
................

`sphinx-apidoc' [`OPTIONS'] -o <`OUTPUT_PATH'> <`MODULE_PATH'>
[`EXCLUDE_PATTERN', …]


File: sphinx.info,  Node: Description<3>,  Next: Options<3>,  Prev: Synopsis<3>,  Up: sphinx-apidoc

4.2.1.2 Description
...................

‘sphinx-apidoc’ is a tool for automatic generation of Sphinx sources
that, using the ‘autodoc’ extension, document a whole package in the
style of other automatic API documentation tools.

`MODULE_PATH' is the path to a Python package to document, and
`OUTPUT_PATH' is the directory where the generated sources are placed.
Any `EXCLUDE_PATTERN's given are fnmatch-style(1) file and/or directory
patterns that will be excluded from generation.

     Warning: ‘sphinx-apidoc’ generates source files that use *note
     sphinx.ext.autodoc: 18. to document all found modules.  If any
     modules have side effects on import, these will be executed by
     ‘autodoc’ when ‘sphinx-build’ is run.

     If you document scripts (as opposed to library modules), make sure
     their main routine is protected by a ‘if __name__ == '__main__'’
     condition.

   ---------- Footnotes ----------

   (1) fnmatch


File: sphinx.info,  Node: Options<3>,  Next: Environment,  Prev: Description<3>,  Up: sphinx-apidoc

4.2.1.3 Options
...............

 -- Option: -o <OUTPUT_PATH>

     Directory to place the output files.  If it does not exist, it is
     created.

 -- Option: -f, --force

     Force overwritting of any existing generated files.

 -- Option: -l, --follow-links

     Follow symbolic links.

 -- Option: -n, --dry-run

     Do not create any files.

 -- Option: -s <suffix>

     Suffix for the source files generated.  Defaults to ‘rst’.

 -- Option: -d <MAXDEPTH>

     Maximum depth for the generated table of contents file.

 -- Option: -T, --no-toc

     Do not create a table of contents file.  Ignored when *note –full:
     ce. is provided.

 -- Option: -F, --full

     Generate a full Sphinx project (‘conf.py’, ‘Makefile’ etc.)  using
     the same mechanism as ‘sphinx-quickstart’.

 -- Option: -e, --separate

     Put documentation for each module on its own page.

     New in version 1.2.

 -- Option: -E, --no-headings

     Do not create headings for the modules/packages.  This is useful,
     for example, when docstrings already contain headings.

 -- Option: -P, --private

     Include “_private” modules.

     New in version 1.2.

 -- Option: --implicit-namespaces

     By default sphinx-apidoc processes sys.path searching for modules
     only.  Python 3.3 introduced PEP 420(1) implicit namespaces that
     allow module path structures such as ‘foo/bar/module.py’ or
     ‘foo/bar/baz/__init__.py’ (notice that ‘bar’ and ‘foo’ are
     namespaces, not modules).

     Interpret paths recursively according to PEP-0420.

 -- Option: -M, --module-first

     Put module documentation before submodule documentation.

These options are used when *note –full: ce. is specified:

 -- Option: -a

     Append module_path to sys.path.

 -- Option: -H <project>

     Sets the project name to put in generated files (see *note project:
     7e.).

 -- Option: -A <author>

     Sets the author name(s) to put in generated files (see *note
     copyright: 80.).

 -- Option: -V <version>

     Sets the project version to put in generated files (see *note
     version: 82.).

 -- Option: -R <release>

     Sets the project release to put in generated files (see *note
     release: 84.).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0420


File: sphinx.info,  Node: Environment,  Next: See also<3>,  Prev: Options<3>,  Up: sphinx-apidoc

4.2.1.4 Environment
...................

 -- Environment Variable: SPHINX_APIDOC_OPTIONS

     A comma-separated list of option to append to generated
     ‘automodule’ directives.  Defaults to
     ‘members,undoc-members,show-inheritance’.


File: sphinx.info,  Node: See also<3>,  Prev: Environment,  Up: sphinx-apidoc

4.2.1.5 See also
................

‘sphinx-build(1)’, ‘sphinx-autogen(1)’


File: sphinx.info,  Node: sphinx-autogen,  Prev: sphinx-apidoc,  Up: Additional Applications

4.2.2 sphinx-autogen
--------------------

* Menu:

* Synopsis: Synopsis<4>.
* Description: Description<4>.
* Options: Options<4>.
* Example::
* See also: See also<4>.


File: sphinx.info,  Node: Synopsis<4>,  Next: Description<4>,  Up: sphinx-autogen

4.2.2.1 Synopsis
................

`sphinx-autogen' [`options'] <sourcefile> …


File: sphinx.info,  Node: Description<4>,  Next: Options<4>,  Prev: Synopsis<4>,  Up: sphinx-autogen

4.2.2.2 Description
...................

‘sphinx-autogen’ is a tool for automatic generation of Sphinx sources
that, using the ‘autodoc’ extension, document items included in *note
autosummary: e1. listing(s).

`sourcefile' is the path to one or more reStructuredText documents
containing *note autosummary: e1. entries with the ‘:toctree::’ option
set.  `sourcefile' can be an ‘fnmatch’-style pattern.


File: sphinx.info,  Node: Options<4>,  Next: Example,  Prev: Description<4>,  Up: sphinx-autogen

4.2.2.3 Options
...............

 -- Option: -o <outputdir>

     Directory to place the output file.  If it does not exist, it is
     created.  Defaults to the value passed to the ‘:toctree:’ option.

 -- Option: -s <suffix>, --suffix <suffix>

     Default suffix to use for generated files.  Defaults to ‘rst’.

 -- Option: -t <templates>, --templates <templates>

     Custom template directory.  Defaults to ‘None’.

 -- Option: -i, --imported-members

     Document imported members.


File: sphinx.info,  Node: Example,  Next: See also<4>,  Prev: Options<4>,  Up: sphinx-autogen

4.2.2.4 Example
...............

Given the following directory structure:

     docs
     ├── index.rst
     └── ...
     foobar
     ├── foo
     │   └── __init__.py
     └── bar
         ├── __init__.py
         └── baz
             └── __init__.py

and assuming ‘docs/index.rst’ contained the following:

     Modules
     =======

     .. autosummary::
        :toctree: modules

        foobar.foo
        foobar.bar
        foobar.bar.baz

If you run the following:

     $ sphinx-autodoc doc/index.rst

then the following stub files will be created in ‘docs’:

     docs
     ├── index.rst
     └── modules
         ├── foobar.bar.rst
         ├── foobar.bar.baz.rst
         └── foobar.foo.rst

and each of those files will contain a ‘autodoc’ directive and some
other information.


File: sphinx.info,  Node: See also<4>,  Prev: Example,  Up: sphinx-autogen

4.2.2.5 See also
................

‘sphinx-build(1)’, ‘sphinx-apidoc(1)’


File: sphinx.info,  Node: reStructuredText Primer,  Next: Sphinx Markup Constructs,  Prev: Man Pages,  Up: Top

5 reStructuredText Primer
*************************

This section is a brief introduction to reStructuredText (reST) concepts
and syntax, intended to provide authors with enough information to
author documents productively.  Since reST was designed to be a simple,
unobtrusive markup language, this will not take too long.

See also
........

The authoritative reStructuredText User Documentation(1).  The “ref”
links in this document link to the description of the individual
constructs in the reST reference.

* Menu:

* Paragraphs::
* Inline markup::
* Lists and Quote-like blocks::
* Source Code::
* Tables::
* Hyperlinks::
* Sections::
* Explicit Markup::
* Directives::
* Images::
* Footnotes::
* Citations::
* Substitutions::
* Comments::
* Source encoding::
* Gotchas::

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/rst.html


File: sphinx.info,  Node: Paragraphs,  Next: Inline markup,  Up: reStructuredText Primer

5.1 Paragraphs
==============

The paragraph (ref(1)) is the most basic block in a reST document.
Paragraphs are simply chunks of text separated by one or more blank
lines.  As in Python, indentation is significant in reST, so all lines
of the same paragraph must be left-aligned to the same level of
indentation.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#paragraphs


File: sphinx.info,  Node: Inline markup,  Next: Lists and Quote-like blocks,  Prev: Paragraphs,  Up: reStructuredText Primer

5.2 Inline markup
=================

The standard reST inline markup is quite simple: use

   * one asterisk: ‘*text*’ for emphasis (italics),

   * two asterisks: ‘**text**’ for strong emphasis (boldface), and

   * backquotes: ‘``text``’ for code samples.

If asterisks or backquotes appear in running text and could be confused
with inline markup delimiters, they have to be escaped with a backslash.

Be aware of some restrictions of this markup:

   * it may not be nested,

   * content may not start or end with whitespace: ‘* text*’ is wrong,

   * it must be separated from surrounding text by non-word characters.
     Use a backslash escaped space to work around that: ‘thisis\ *one*\
     word’.

These restrictions may be lifted in future versions of the docutils.

reST also allows for custom “interpreted text roles”, which signify that
the enclosed text should be interpreted in a specific way.  Sphinx uses
this to provide semantic markup and cross-referencing of identifiers, as
described in the appropriate section.  The general syntax is
‘:rolename:`content`’.

Standard reST provides the following roles:

   * emphasis(1) – alternate spelling for ‘*emphasis*’

   * strong(2) – alternate spelling for ‘**strong**’

   * literal(3) – alternate spelling for ‘``literal``’

   * subscript(4) – subscript text

   * superscript(5) – superscript text

   * title-reference(6) – for titles of books, periodicals, and other
     materials

See *note Inline markup: ee. for roles added by Sphinx.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/ref/rst/roles.html#emphasis

   (2) http://docutils.sourceforge.net/docs/ref/rst/roles.html#strong

   (3) http://docutils.sourceforge.net/docs/ref/rst/roles.html#literal

   (4) http://docutils.sourceforge.net/docs/ref/rst/roles.html#subscript

   (5) 
http://docutils.sourceforge.net/docs/ref/rst/roles.html#superscript

   (6) 
http://docutils.sourceforge.net/docs/ref/rst/roles.html#title-reference


File: sphinx.info,  Node: Lists and Quote-like blocks,  Next: Source Code,  Prev: Inline markup,  Up: reStructuredText Primer

5.3 Lists and Quote-like blocks
===============================

List markup (ref(1)) is natural: just place an asterisk at the start of
a paragraph and indent properly.  The same goes for numbered lists; they
can also be autonumbered using a ‘#’ sign:

     * This is a bulleted list.
     * It has two items, the second
       item uses two lines.

     1. This is a numbered list.
     2. It has two items too.

     #. This is a numbered list.
     #. It has two items too.

Nested lists are possible, but be aware that they must be separated from
the parent list items by blank lines:

     * this is
     * a list

       * with a nested list
       * and some subitems

     * and here the parent list continues

Definition lists (ref(2)) are created as follows:

     term (up to a line of text)
        Definition of the term, which must be indented

        and can even consist of multiple paragraphs

     next term
        Description.

Note that the term cannot have more than one line of text.

Quoted paragraphs (ref(3)) are created by just indenting them more than
the surrounding paragraphs.

Line blocks (ref(4)) are a way of preserving line breaks:

     | These lines are
     | broken exactly like in
     | the source file.

There are also several more special blocks available:

   * field lists (ref(5))

   * option lists (ref(6))

   * quoted literal blocks (ref(7))

   * doctest blocks (ref(8))

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#bullet-lists

   (2) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#definition-lists

   (3) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#block-quotes

   (4) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#line-blocks

   (5) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#field-lists

   (6) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#option-lists

   (7) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#quoted-literal-blocks

   (8) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#doctest-blocks


File: sphinx.info,  Node: Source Code,  Next: Tables,  Prev: Lists and Quote-like blocks,  Up: reStructuredText Primer

5.4 Source Code
===============

Literal code blocks (ref(1)) are introduced by ending a paragraph with
the special marker ‘::’.  The literal block must be indented (and, like
all paragraphs, separated from the surrounding ones by blank lines):

     This is a normal text paragraph. The next paragraph is a code sample::

        It is not processed in any way, except
        that the indentation is removed.

        It can span multiple lines.

     This is a normal text paragraph again.

The handling of the ‘::’ marker is smart:

   * If it occurs as a paragraph of its own, that paragraph is
     completely left out of the document.

   * If it is preceded by whitespace, the marker is removed.

   * If it is preceded by non-whitespace, the marker is replaced by a
     single colon.

That way, the second sentence in the above example’s first paragraph
would be rendered as “The next paragraph is a code sample:”.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#literal-blocks


File: sphinx.info,  Node: Tables,  Next: Hyperlinks,  Prev: Source Code,  Up: reStructuredText Primer

5.5 Tables
==========

For `grid tables' (ref(1)), you have to “paint” the cell grid yourself.
They look like this:

     +------------------------+------------+----------+----------+
     | Header row, column 1   | Header 2   | Header 3 | Header 4 |
     | (header rows optional) |            |          |          |
     +========================+============+==========+==========+
     | body row 1, column 1   | column 2   | column 3 | column 4 |
     +------------------------+------------+----------+----------+
     | body row 2             | ...        | ...      |          |
     +------------------------+------------+----------+----------+

`Simple tables' (ref(2)) are easier to write, but limited: they must
contain more than one row, and the first column cells cannot contain
multiple lines.  They look like this:

     =====  =====  =======
     A      B      A and B
     =====  =====  =======
     False  False  False
     True   False  False
     False  True   False
     True   True   True
     =====  =====  =======

Two more syntaxes are supported: `CSV tables' and `List tables'.  They
use an `explicit markup block', see *note Directives: f3. section.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables

   (2) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables


File: sphinx.info,  Node: Hyperlinks,  Next: Sections,  Prev: Tables,  Up: reStructuredText Primer

5.6 Hyperlinks
==============

* Menu:

* External links::
* Internal links::


File: sphinx.info,  Node: External links,  Next: Internal links,  Up: Hyperlinks

5.6.1 External links
--------------------

Use ‘`Link text <https://domain.invalid/>`_’ for inline web links.  If
the link text should be the web address, you don’t need special markup
at all, the parser finds links and mail addresses in ordinary text.

     Important: There must be a space between the link text and the
     opening < for the URL.

You can also separate the link and the target definition (ref(1)), like
this:

     This is a paragraph that contains `a link`_.

     .. _a link: https://domain.invalid/

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#hyperlink-targets


File: sphinx.info,  Node: Internal links,  Prev: External links,  Up: Hyperlinks

5.6.2 Internal links
--------------------

Internal linking is done via a special reST role provided by Sphinx, see
the section on specific markup, *note Cross-referencing arbitrary
locations: f7.


File: sphinx.info,  Node: Sections,  Next: Explicit Markup,  Prev: Hyperlinks,  Up: reStructuredText Primer

5.7 Sections
============

Section headers (ref(1)) are created by underlining (and optionally
overlining) the section title with a punctuation character, at least as
long as the text:

     =================
     This is a heading
     =================

Normally, there are no heading levels assigned to certain characters as
the structure is determined from the succession of headings.  However,
this convention is used in Python’s Style Guide for documenting(2) which
you may follow:

   * ‘#’ with overline, for parts

   * ‘*’ with overline, for chapters

   * ‘=’, for sections

   * ‘-’, for subsections

   * ‘^’, for subsubsections

   * ‘"’, for paragraphs

Of course, you are free to use your own marker characters (see the reST
documentation), and use a deeper nesting level, but keep in mind that
most target formats (HTML, LaTeX) have a limited supported nesting
depth.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#sections

   (2) https://docs.python.org/devguide/documenting.html#style-guide


File: sphinx.info,  Node: Explicit Markup,  Next: Directives,  Prev: Sections,  Up: reStructuredText Primer

5.8 Explicit Markup
===================

“Explicit markup” (ref(1)) is used in reST for most constructs that need
special handling, such as footnotes, specially-highlighted paragraphs,
comments, and generic directives.

An explicit markup block begins with a line starting with ‘..’ followed
by whitespace and is terminated by the next paragraph at the same level
of indentation.  (There needs to be a blank line between explicit markup
and normal paragraphs.  This may all sound a bit complicated, but it is
intuitive enough when you write it.)

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#explicit-markup-blocks


File: sphinx.info,  Node: Directives,  Next: Images,  Prev: Explicit Markup,  Up: reStructuredText Primer

5.9 Directives
==============

A directive (ref(1)) is a generic block of explicit markup.  Besides
roles, it is one of the extension mechanisms of reST, and Sphinx makes
heavy use of it.

Docutils supports the following directives:

   * Admonitions: attention(2), caution(3), danger(4), error(5),
     hint(6), important(7), note(8), tip(9), warning(10) and the generic
     admonition(11).  (Most themes style only “note” and “warning”
     specially.)

   * Images:

        - image(12) (see also *note Images: fb. below)

        - figure(13) (an image with caption and optional legend)

   * Additional body elements:

        - contents(14) (a local, i.e.  for the current file only, table
          of contents)

        - container(15) (a container with a custom class, useful to
          generate an outer ‘<div>’ in HTML)

        - rubric(16) (a heading without relation to the document
          sectioning)

        - topic(17), sidebar(18) (special highlighted body elements)

        - parsed-literal(19) (literal block that supports inline markup)

        - epigraph(20) (a block quote with optional attribution line)

        - highlights(21), pull-quote(22) (block quotes with their own
          class attribute)

        - compound(23) (a compound paragraph)

   * Special tables:

        - table(24) (a table with title)

        - csv-table(25) (a table generated from comma-separated values)

        - list-table(26) (a table generated from a list of lists)

   * Special directives:

        - raw(27) (include raw target-format markup)

        - include(28) (include reStructuredText from another file) – in
          Sphinx, when given an absolute include file path, this
          directive takes it as relative to the source directory

        - class(29) (assign a class attribute to the next element) (30)

   * HTML specifics:

        - meta(31) (generation of HTML ‘<meta>’ tags)

        - title(32) (override document title)

   * Influencing markup:

        - default-role(33) (set a new default role)

        - role(34) (create a new role)

     Since these are only per-file, better use Sphinx’s facilities for
     setting the *note default_role: fc.

Do `not' use the directives sectnum(35), header(36) and footer(37).

Directives added by Sphinx are described in *note Sphinx Markup
Constructs: 50.

Basically, a directive consists of a name, arguments, options and
content.  (Keep this terminology in mind, it is used in the next chapter
describing custom directives.)  Looking at this example,

     .. function:: foo(x)
                   foo(y, z)
        :module: some.module.name

        Return a line of text input from the user.

‘function’ is the directive name.  It is given two arguments here, the
remainder of the first line and the second line, as well as one option
‘module’ (as you can see, options are given in the lines immediately
following the arguments and indicated by the colons).  Options must be
indented to the same level as the directive content.

The directive content follows after a blank line and is indented
relative to the directive start.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#directives

   (2) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#attention

   (3) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#caution

   (4) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#danger

   (5) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#error

   (6) http://docutils.sourceforge.net/docs/ref/rst/directives.html#hint

   (7) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#important

   (8) http://docutils.sourceforge.net/docs/ref/rst/directives.html#note

   (9) http://docutils.sourceforge.net/docs/ref/rst/directives.html#tip

   (10) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#warning

   (11) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#admonitions

   (12) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#image

   (13) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#figure

   (14) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table-of-contents

   (15) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#container

   (16) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#rubric

   (17) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#topic

   (18) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#sidebar

   (19) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#parsed-literal

   (20) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#epigraph

   (21) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#highlights

   (22) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#pull-quote

   (23) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#compound-paragraph

   (24) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table

   (25) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#csv-table

   (26) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#list-table

   (27) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#raw-data-pass-through

   (28) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#include

   (29) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#class

   (30) When the default domain contains a ‘class’ directive, this
directive will be shadowed.  Therefore, Sphinx re-exports it as
‘rst-class’.

   (31) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#meta

   (32) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#metadata-document-title

   (33) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#default-role

   (34) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#role

   (35) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#sectnum

   (36) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#header

   (37) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#footer


File: sphinx.info,  Node: Images,  Next: Footnotes,  Prev: Directives,  Up: reStructuredText Primer

5.10 Images
===========

reST supports an image directive (ref(1)), used like so:

     .. image:: gnu.png
        (options)

When used within Sphinx, the file name given (here ‘gnu.png’) must
either be relative to the source file, or absolute which means that they
are relative to the top source directory.  For example, the file
‘sketch/spam.rst’ could refer to the image ‘images/spam.png’ as
‘../images/spam.png’ or ‘/images/spam.png’.

Sphinx will automatically copy image files over to a subdirectory of the
output directory on building (e.g.  the ‘_static’ directory for HTML
output.)

Interpretation of image size options (‘width’ and ‘height’) is as
follows: if the size has no unit or the unit is pixels, the given size
will only be respected for output channels that support pixels.  Other
units (like ‘pt’ for points) will be used for HTML and LaTeX output (the
latter replaces ‘pt’ by ‘bp’ as this is the TeX unit such that
‘72bp=1in’).

Sphinx extends the standard docutils behavior by allowing an asterisk
for the extension:

     .. image:: gnu.*

Sphinx then searches for all images matching the provided pattern and
determines their type.  Each builder then chooses the best image out of
these candidates.  For instance, if the file name ‘gnu.*’ was given and
two files ‘gnu.pdf’ and ‘gnu.png’ existed in the source tree, the LaTeX
builder would choose the former, while the HTML builder would prefer the
latter.  Supported image types and choosing priority are defined at
*note Available builders: a3.

Note that image file names should not contain spaces.

Changed in version 0.4: Added the support for file names ending in an
asterisk.

Changed in version 0.6: Image paths can now be absolute.

Changed in version 1.5: latex target supports pixels (default is
‘96px=1in’).

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#image


File: sphinx.info,  Node: Footnotes,  Next: Citations,  Prev: Images,  Up: reStructuredText Primer

5.11 Footnotes
==============

For footnotes (ref(1)), use ‘[#name]_’ to mark the footnote location,
and add the footnote body at the bottom of the document after a
“Footnotes” rubric heading, like so:

     Lorem ipsum [#f1]_ dolor sit amet ... [#f2]_

     .. rubric:: Footnotes

     .. [#f1] Text of the first footnote.
     .. [#f2] Text of the second footnote.

You can also explicitly number the footnotes (‘[1]_’) or use
auto-numbered footnotes without names (‘[#]_’).

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#footnotes


File: sphinx.info,  Node: Citations,  Next: Substitutions,  Prev: Footnotes,  Up: reStructuredText Primer

5.12 Citations
==============

Standard reST citations (ref(1)) are supported, with the additional
feature that they are “global”, i.e.  all citations can be referenced
from all files.  Use them like so:

     Lorem ipsum [Ref]_ dolor sit amet.

     .. [Ref] Book or article reference, URL or whatever.

Citation usage is similar to footnote usage, but with a label that is
not numeric or begins with ‘#’.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#citations


File: sphinx.info,  Node: Substitutions,  Next: Comments,  Prev: Citations,  Up: reStructuredText Primer

5.13 Substitutions
==================

reST supports “substitutions” (ref(1)), which are pieces of text and/or
markup referred to in the text by ‘|name|’.  They are defined like
footnotes with explicit markup blocks, like this:

     .. |name| replace:: replacement *text*

or this:

     .. |caution| image:: warning.png
                  :alt: Warning!

See the reST reference for substitutions(2) for details.

If you want to use some substitutions for all documents, put them into
*note rst_prolog: 100. or put them into a separate file and include it
into all documents you want to use them in, using the ‘include’
directive.  (Be sure to give the include file a file name extension
differing from that of other source files, to avoid Sphinx finding it as
a standalone document.)

Sphinx defines some default substitutions, see *note Substitutions: 101.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions

   (2) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions


File: sphinx.info,  Node: Comments,  Next: Source encoding,  Prev: Substitutions,  Up: reStructuredText Primer

5.14 Comments
=============

Every explicit markup block which isn’t a valid markup construct (like
the footnotes above) is regarded as a comment (ref(1)).  For example:

     .. This is a comment.

You can indent text after a comment start to form multiline comments:

     ..
        This whole indented block
        is a comment.

        Still in the comment.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#comments


File: sphinx.info,  Node: Source encoding,  Next: Gotchas,  Prev: Comments,  Up: reStructuredText Primer

5.15 Source encoding
====================

Since the easiest way to include special characters like em dashes or
copyright signs in reST is to directly write them as Unicode characters,
one has to specify an encoding.  Sphinx assumes source files to be
encoded in UTF-8 by default; you can change this with the *note
source_encoding: 104. config value.


File: sphinx.info,  Node: Gotchas,  Prev: Source encoding,  Up: reStructuredText Primer

5.16 Gotchas
============

There are some problems one commonly runs into while authoring reST
documents:

   * `Separation of inline markup:' As said above, inline markup spans
     must be separated from the surrounding text by non-word characters,
     you have to use a backslash-escaped space to get around that.  See
     the reference(1) for the details.

   * `No nested inline markup:' Something like ‘*see :func:`foo`*’ is
     not possible.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions


File: sphinx.info,  Node: Sphinx Markup Constructs,  Next: Sphinx Domains,  Prev: reStructuredText Primer,  Up: Top

6 Sphinx Markup Constructs
**************************

Sphinx adds a lot of new directives and interpreted text roles to
standard reST markup(1).  This section contains the reference material
for these facilities.

* Menu:

* The TOC tree::
* Paragraph-level markup::
* Table-of-contents markup::
* Glossary::
* Grammar production displays::
* Showing code examples::
* Inline markup: Inline markup<2>.
* Miscellaneous markup::

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html


File: sphinx.info,  Node: The TOC tree,  Next: Paragraph-level markup,  Up: Sphinx Markup Constructs

6.1 The TOC tree
================

Since reST does not have facilities to interconnect several documents,
or split documents into multiple output files, Sphinx uses a custom
directive to add relations between the single files the documentation is
made of, as well as tables of contents.  The ‘toctree’ directive is the
central element.

     Note: Simple “inclusion” of one file in another can be done with
     the include(1) directive.

 -- reStructuredText Directive: .. toctree::

     This directive inserts a “TOC tree” at the current location, using
     the individual TOCs (including “sub-TOC trees”) of the documents
     given in the directive body.  Relative document names (not
     beginning with a slash) are relative to the document the directive
     occurs in, absolute names are relative to the source directory.  A
     numeric ‘maxdepth’ option may be given to indicate the depth of the
     tree; by default, all levels are included.  (2)

     Consider this example (taken from the Python docs’ library
     reference index):

          .. toctree::
             :maxdepth: 2

             intro
             strings
             datatypes
             numeric
             (many more documents listed here)

     This accomplishes two things:

        * Tables of contents from all those documents are inserted, with
          a maximum depth of two, that means one nested heading.
          ‘toctree’ directives in those documents are also taken into
          account.

        * Sphinx knows the relative order of the documents ‘intro’,
          ‘strings’ and so forth, and it knows that they are children of
          the shown document, the library index.  From this information
          it generates “next chapter”, “previous chapter” and “parent
          chapter” links.

     `Entries'

     Document titles in the *note toctree: 10a. will be automatically
     read from the title of the referenced document.  If that isn’t what
     you want, you can specify an explicit title and target using a
     similar syntax to reST hyperlinks (and Sphinx’s *note
     cross-referencing syntax: 10b.).  This looks like:

          .. toctree::

             intro
             All about strings <strings>
             datatypes

     The second line above will link to the ‘strings’ document, but will
     use the title “All about strings” instead of the title of the
     ‘strings’ document.

     You can also add external links, by giving an HTTP URL instead of a
     document name.

     `Section numbering'

     If you want to have section numbers even in HTML output, give the
     `toplevel' toctree a ‘numbered’ option.  For example:

          .. toctree::
             :numbered:

             foo
             bar

     Numbering then starts at the heading of ‘foo’.  Sub-toctrees are
     automatically numbered (don’t give the ‘numbered’ flag to those).

     Numbering up to a specific depth is also possible, by giving the
     depth as a numeric argument to ‘numbered’.

     `Additional options'

     You can use ‘caption’ option to provide a toctree caption and you
     can use ‘name’ option to provide implicit target name that can be
     referenced by using *note ref: 4e.:

          .. toctree::
             :caption: Table of Contents
             :name: mastertoc

             foo

     If you want only the titles of documents in the tree to show up,
     not other headings of the same level, you can use the ‘titlesonly’
     option:

          .. toctree::
             :titlesonly:

             foo
             bar

     You can use “globbing” in toctree directives, by giving the ‘glob’
     flag option.  All entries are then matched against the list of
     available documents, and matches are inserted into the list
     alphabetically.  Example:

          .. toctree::
             :glob:

             intro*
             recipe/*
             *

     This includes first all documents whose names start with ‘intro’,
     then all documents in the ‘recipe’ folder, then all remaining
     documents (except the one containing the directive, of course.)
     (3)

     The special entry name ‘self’ stands for the document containing
     the toctree directive.  This is useful if you want to generate a
     “sitemap” from the toctree.

     You can use the ‘reversed’ flag option to reverse the order of the
     entries in the list.  This can be useful when using the ‘glob’ flag
     option to reverse the ordering of the files.  Example:

          .. toctree::
             :glob:
             :reversed:

             recipe/*

     You can also give a “hidden” option to the directive, like this:

          .. toctree::
             :hidden:

             doc_1
             doc_2

     This will still notify Sphinx of the document hierarchy, but not
     insert links into the document at the location of the directive –
     this makes sense if you intend to insert these links yourself, in a
     different style, or in the HTML sidebar.

     In cases where you want to have only one top-level toctree and hide
     all other lower level toctrees you can add the “includehidden”
     option to the top-level toctree entry:

          .. toctree::
             :includehidden:

             doc_1
             doc_2

     All other toctree entries can then be eliminated by the “hidden”
     option.

     In the end, all documents in the *note source directory: 46. (or
     subdirectories) must occur in some ‘toctree’ directive; Sphinx will
     emit a warning if it finds a file that is not included, because
     that means that this file will not be reachable through standard
     navigation.

     Use *note exclude_patterns: 10c. to explicitly exclude documents or
     directories from building completely.  Use *note the “orphan”
     metadata: 10d. to let a document be built, but notify Sphinx that
     it is not reachable via a toctree.

     The “master document” (selected by *note master_doc: 8a.) is the
     “root” of the TOC tree hierarchy.  It can be used as the
     documentation’s main page, or as a “full table of contents” if you
     don’t give a ‘maxdepth’ option.

     Changed in version 0.3: Added “globbing” option.

     Changed in version 0.6: Added “numbered” and “hidden” options as
     well as external links and support for “self” references.

     Changed in version 1.0: Added “titlesonly” option.

     Changed in version 1.1: Added numeric argument to “numbered”.

     Changed in version 1.2: Added “includehidden” option.

     Changed in version 1.3: Added “caption” and “name” option.

* Menu:

* Special names::

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#include

   (2) The LaTeX writer only refers the ‘maxdepth’ option of first
toctree directive in the document.

   (3) A note on available globbing syntax: you can use the standard
shell constructs ‘*’, ‘?’, ‘[...]’ and ‘[!...]’ with the feature that
these all don’t match slashes.  A double star ‘**’ can be used to match
any sequence of characters `including' slashes.


File: sphinx.info,  Node: Special names,  Up: The TOC tree

6.1.1 Special names
-------------------

Sphinx reserves some document names for its own use; you should not try
to create documents with these names – it will cause problems.

The special document names (and pages generated for them) are:

   * ‘genindex’, ‘modindex’, ‘search’

     These are used for the general index, the Python module index, and
     the search page, respectively.

     The general index is populated with entries from modules, all
     index-generating *note object descriptions: 10f, and from *note
     index: 110. directives.

     The Python module index contains one entry per *note py;module:
     111. directive.

     The search page contains a form that uses the generated JSON search
     index and JavaScript to full-text search the generated documents
     for search words; it should work on every major browser that
     supports modern JavaScript.

   * every name beginning with ‘_’

     Though only few such names are currently used by Sphinx, you should
     not create documents or document-containing directories with such
     names.  (Using ‘_’ as a prefix for a custom template directory is
     fine.)

     Warning: Be careful with unusual characters in filenames.  Some
     formats may interpret these characters in unexpected ways:

        * Do not use the colon ‘:’ for HTML based formats.  Links to
          other parts may not work.

        * Do not use the plus ‘+’ for the ePub format.  Some resources
          may not be found.


File: sphinx.info,  Node: Paragraph-level markup,  Next: Table-of-contents markup,  Prev: The TOC tree,  Up: Sphinx Markup Constructs

6.2 Paragraph-level markup
==========================

These directives create short paragraphs and can be used inside
information units as well as normal text:

 -- reStructuredText Directive: .. note::

     An especially important bit of information about an API that a user
     should be aware of when using whatever bit of API the note pertains
     to.  The content of the directive should be written in complete
     sentences and include all appropriate punctuation.

     Example:

          .. note::

             This function is not suitable for sending spam e-mails.

 -- reStructuredText Directive: .. warning::

     An important bit of information about an API that a user should be
     very aware of when using whatever bit of API the warning pertains
     to.  The content of the directive should be written in complete
     sentences and include all appropriate punctuation.  This differs
     from *note note: 114. in that it is recommended over *note note:
     114. for information regarding security.

 -- reStructuredText Directive: .. versionadded:: version

     This directive documents the version of the project which added the
     described feature to the library or C API. When this applies to an
     entire module, it should be placed at the top of the module section
     before any prose.

     The first argument must be given and is the version in question;
     you can add a second argument consisting of a `brief' explanation
     of the change.

     Example:

          .. versionadded:: 2.5
             The *spam* parameter.

     Note that there must be no blank line between the directive head
     and the explanation; this is to make these blocks visually
     continuous in the markup.

 -- reStructuredText Directive: .. versionchanged:: version

     Similar to *note versionadded: 116, but describes when and what
     changed in the named feature in some way (new parameters, changed
     side effects, etc.).

 -- reStructuredText Directive: .. deprecated:: version

     Similar to *note versionchanged: 117, but describes when the
     feature was deprecated.  An explanation can also be given, for
     example to inform the reader what should be used instead.  Example:

          .. deprecated:: 3.1
             Use :func:`spam` instead.

__________________________________________________________________

 -- reStructuredText Directive: .. seealso::

     Many sections include a list of references to module documentation
     or external documents.  These lists are created using the *note
     seealso: 119. directive.

     The *note seealso: 119. directive is typically placed in a section
     just before any subsections.  For the HTML output, it is shown
     boxed off from the main flow of the text.

     The content of the *note seealso: 119. directive should be a reST
     definition list.  Example:

          .. seealso::

             Module :py:mod:`zipfile`
                Documentation of the :py:mod:`zipfile` standard module.

             `GNU tar manual, Basic Tar Format <http://link>`_
                Documentation for tar archive files, including GNU tar extensions.

     There’s also a “short form” allowed that looks like this:

          .. seealso:: modules :py:mod:`zipfile`, :py:mod:`tarfile`

     New in version 0.5: The short form.

 -- reStructuredText Directive: .. rubric:: title

     This directive creates a paragraph heading that is not used to
     create a table of contents node.

          Note: If the `title' of the rubric is “Footnotes” (or the
          selected language’s equivalent), this rubric is ignored by the
          LaTeX writer, since it is assumed to only contain footnote
          definitions and therefore would create an empty heading.

 -- reStructuredText Directive: .. centered::

     This directive creates a centered boldfaced line of text.  Use it
     as follows:

          .. centered:: LICENSE AGREEMENT

     Deprecated since version 1.1: This presentation-only directive is a
     legacy from older versions.  Use a ‘rst-class’ directive instead
     and add an appropriate style.

 -- reStructuredText Directive: .. hlist::

     This directive must contain a bullet list.  It will transform it
     into a more compact list by either distributing more than one item
     horizontally, or reducing spacing between items, depending on the
     builder.

     For builders that support the horizontal distribution, there is a
     ‘columns’ option that specifies the number of columns; it defaults
     to 2.  Example:

          .. hlist::
             :columns: 3

             * A list of
             * short items
             * that should be
             * displayed
             * horizontally

     New in version 0.6.


File: sphinx.info,  Node: Table-of-contents markup,  Next: Glossary,  Prev: Paragraph-level markup,  Up: Sphinx Markup Constructs

6.3 Table-of-contents markup
============================

The *note toctree: 10a. directive, which generates tables of contents of
subdocuments, is described in *note The TOC tree: 4c.

For local tables of contents, use the standard reST contents
directive(1).

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table-of-contents


File: sphinx.info,  Node: Glossary,  Next: Grammar production displays,  Prev: Table-of-contents markup,  Up: Sphinx Markup Constructs

6.4 Glossary
============

 -- reStructuredText Directive: .. glossary::

     This directive must contain a reST definition-list-like markup with
     terms and definitions.  The definitions will then be referencable
     with the *note term: 121. role.  Example:

          .. glossary::

             environment
                A structure where information about all documents under the root is
                saved, and used for cross-referencing.  The environment is pickled
                after the parsing stage, so that successive runs only need to read
                and parse new and changed documents.

             source directory
                The directory which, including its subdirectories, contains all
                source files for one Sphinx project.

     In contrast to regular definition lists, `multiple' terms per entry
     are allowed, and inline markup is allowed in terms.  You can link
     to all of the terms.  For example:

          .. glossary::

             term 1
             term 2
                Definition of both terms.

     (When the glossary is sorted, the first term determines the sort
     order.)

     If you want to specify “grouping key” for general index entries,
     you can put a “key” as “term : key”.  For example:

          .. glossary::

             term 1 : A
             term 2 : B
                Definition of both terms.

     Note that “key” is used for grouping key as is.  The “key” isn’t
     normalized; key “A” and “a” become different groups.  The whole
     characters in “key” is used instead of a first character; it is
     used for “Combining Character Sequence” and “Surrogate Pairs”
     grouping key.

     In i18n situation, you can specify “localized term : key” even if
     original text only have “term” part.  In this case, translated
     “localized term” will be categorized in “key” group.

     New in version 0.6: You can now give the glossary directive a
     ‘:sorted:’ flag that will automatically sort the entries
     alphabetically.

     Changed in version 1.1: Now supports multiple terms and inline
     markup in terms.

     Changed in version 1.4: Index key for glossary term should be
     considered `experimental'.


File: sphinx.info,  Node: Grammar production displays,  Next: Showing code examples,  Prev: Glossary,  Up: Sphinx Markup Constructs

6.5 Grammar production displays
===============================

Special markup is available for displaying the productions of a formal
grammar.  The markup is simple and does not attempt to model all aspects
of BNF (or any derived forms), but provides enough to allow context-free
grammars to be displayed in a way that causes uses of a symbol to be
rendered as hyperlinks to the definition of the symbol.  There is this
directive:

 -- reStructuredText Directive: .. productionlist:: [name]

     This directive is used to enclose a group of productions.  Each
     production is given on a single line and consists of a name,
     separated by a colon from the following definition.  If the
     definition spans multiple lines, each continuation line must begin
     with a colon placed at the same column as in the first line.

     The argument to *note productionlist: 123. serves to distinguish
     different sets of production lists that belong to different
     grammars.

     Blank lines are not allowed within ‘productionlist’ directive
     arguments.

     The definition can contain token names which are marked as
     interpreted text (e.g.  ‘sum ::= `integer` "+" `integer`’) – this
     generates cross-references to the productions of these tokens.
     Outside of the production list, you can reference to token
     productions using *note token: 124.

     Note that no further reST parsing is done in the production, so
     that you don’t have to escape ‘*’ or ‘|’ characters.

The following is an example taken from the Python Reference Manual:

     .. productionlist::
        try_stmt: try1_stmt | try2_stmt
        try1_stmt: "try" ":" `suite`
                 : ("except" [`expression` ["," `target`]] ":" `suite`)+
                 : ["else" ":" `suite`]
                 : ["finally" ":" `suite`]
        try2_stmt: "try" ":" `suite`
                 : "finally" ":" `suite`


File: sphinx.info,  Node: Showing code examples,  Next: Inline markup<2>,  Prev: Grammar production displays,  Up: Sphinx Markup Constructs

6.6 Showing code examples
=========================

Examples of Python source code or interactive sessions are represented
using standard reST literal blocks.  They are started by a ‘::’ at the
end of the preceding paragraph and delimited by indentation.

Representing an interactive session requires including the prompts and
output along with the Python code.  No special markup is required for
interactive sessions.  After the last line of input or output presented,
there should not be an “unused” primary prompt; this is an example of
what `not' to do:

     >>> 1 + 1
     2
     >>>

Syntax highlighting is done with Pygments(1) and handled in a smart way:

   * There is a “highlighting language” for each source file.  Per
     default, this is ‘'python'’ as the majority of files will have to
     highlight Python snippets, but the doc-wide default can be set with
     the *note highlight_language: 128. config value.

   * Within Python highlighting mode, interactive sessions are
     recognized automatically and highlighted appropriately.  Normal
     Python code is only highlighted if it is parseable (so you can use
     Python as the default, but interspersed snippets of shell commands
     or other code blocks will not be highlighted as Python).

   * The highlighting language can be changed using the ‘highlight’
     directive, used as follows:

      -- reStructuredText Directive: .. highlight:: language

          Example:

               .. highlight:: c

          This language is used until the next ‘highlight’ directive is
          encountered.

   * For documents that have to show snippets in different languages,
     there’s also a *note code-block: 12a. directive that is given the
     highlighting language directly:

      -- reStructuredText Directive: .. code-block:: language

          Use it like this:

               .. code-block:: ruby

                  Some Ruby code.

          The directive’s alias name ‘sourcecode’ works as well.

   * The valid values for the highlighting language are:

        * ‘none’ (no highlighting)

        * ‘python’ (the default when *note highlight_language: 128.
          isn’t set)

        * ‘guess’ (let Pygments guess the lexer based on contents, only
          works with certain well-recognizable languages)

        * ‘rest’

        * ‘c’

        * … and any other lexer alias that Pygments supports(2).

   * If highlighting with the selected language fails (i.e.  Pygments
     emits an “Error” token), the block is not highlighted in any way.

* Menu:

* Line numbers::
* Includes::
* Caption and name::
* Dedent::

   ---------- Footnotes ----------

   (1) http://pygments.org

   (2) http://pygments.org/docs/lexers/


File: sphinx.info,  Node: Line numbers,  Next: Includes,  Up: Showing code examples

6.6.1 Line numbers
------------------

Pygments can generate line numbers for code blocks.  For
automatically-highlighted blocks (those started by ‘::’), line numbers
must be switched on in a *note highlight: 129. directive, with the
‘linenothreshold’ option:

     .. highlight:: python
        :linenothreshold: 5

This will produce line numbers for all code blocks longer than five
lines.

For *note code-block: 12a. blocks, a ‘linenos’ flag option can be given
to switch on line numbers for the individual block:

     .. code-block:: ruby
        :linenos:

        Some more Ruby code.

The first line number can be selected with the ‘lineno-start’ option.
If present, ‘linenos’ is automatically activated as well:

     .. code-block:: ruby
        :lineno-start: 10

        Some more Ruby code, with line numbering starting at 10.

Additionally, an ‘emphasize-lines’ option can be given to have Pygments
emphasize particular lines:

     .. code-block:: python
        :emphasize-lines: 3,5

        def some_function():
            interesting = False
            print 'This line is highlighted.'
            print 'This one is not...'
            print '...but this one is.'

Changed in version 1.1: ‘emphasize-lines’ has been added.

Changed in version 1.3: ‘lineno-start’ has been added.

Changed in version 1.6.6: LaTeX supports the ‘emphasize-lines’ option.


File: sphinx.info,  Node: Includes,  Next: Caption and name,  Prev: Line numbers,  Up: Showing code examples

6.6.2 Includes
--------------

 -- reStructuredText Directive: .. literalinclude:: filename

     Longer displays of verbatim text may be included by storing the
     example text in an external file containing only plain text.  The
     file may be included using the ‘literalinclude’ directive.  (1) For
     example, to include the Python source file ‘example.py’, use:

          .. literalinclude:: example.py

     The file name is usually relative to the current file’s path.
     However, if it is absolute (starting with ‘/’), it is relative to
     the top source directory.

     Tabs in the input are expanded if you give a ‘tab-width’ option
     with the desired tab width.

     Like *note code-block: 12a, the directive supports the ‘linenos’
     flag option to switch on line numbers, the ‘lineno-start’ option to
     select the first line number, the ‘emphasize-lines’ option to
     emphasize particular lines, and a ‘language’ option to select a
     language different from the current file’s standard language.
     Example with options:

          .. literalinclude:: example.rb
             :language: ruby
             :emphasize-lines: 12,15-18
             :linenos:

     Include files are assumed to be encoded in the *note
     source_encoding: 104.  If the file has a different encoding, you
     can specify it with the ‘encoding’ option:

          .. literalinclude:: example.py
             :encoding: latin-1

     The directive also supports including only parts of the file.  If
     it is a Python module, you can select a class, function or method
     to include using the ‘pyobject’ option:

          .. literalinclude:: example.py
             :pyobject: Timer.start

     This would only include the code lines belonging to the ‘start()’
     method in the ‘Timer’ class within the file.

     Alternately, you can specify exactly which lines to include by
     giving a ‘lines’ option:

          .. literalinclude:: example.py
             :lines: 1,3,5-10,20-

     This includes the lines 1, 3, 5 to 10 and lines 20 to the last
     line.

     Another way to control which part of the file is included is to use
     the ‘start-after’ and ‘end-before’ options (or only one of them).
     If ‘start-after’ is given as a string option, only lines that
     follow the first line containing that string are included.  If
     ‘end-before’ is given as a string option, only lines that precede
     the first lines containing that string are included.

     With lines selected using ‘start-after’ it is still possible to use
     ‘lines’, the first allowed line having by convention the line
     number ‘1’.

     When lines have been selected in any of the ways described above,
     the line numbers in ‘emphasize-lines’ refer to those selected
     lines, counted consecutively starting at ‘1’.

     When specifying particular parts of a file to display, it can be
     useful to display the original line numbers.  This can be done
     using the ‘lineno-match’ option, which is however allowed only when
     the selection consists of contiguous lines.

     You can prepend and/or append a line to the included code, using
     the ‘prepend’ and ‘append’ option, respectively.  This is useful
     e.g.  for highlighting PHP code that doesn’t include the
     ‘<?php’/‘?>’ markers.

     If you want to show the diff of the code, you can specify the old
     file by giving a ‘diff’ option:

          .. literalinclude:: example.py
             :diff: example.py.orig

     This shows the diff between example.py and example.py.orig with
     unified diff format.

     New in version 0.4.3: The ‘encoding’ option.

     New in version 0.6: The ‘pyobject’, ‘lines’, ‘start-after’ and
     ‘end-before’ options, as well as support for absolute filenames.

     New in version 1.0: The ‘prepend’ and ‘append’ options, as well as
     ‘tab-width’.

     New in version 1.3: The ‘diff’ option.  The ‘lineno-match’ option.

     Changed in version 1.6: With both ‘start-after’ and ‘lines’ in use,
     the first line as per ‘start-after’ is considered to be with line
     number ‘1’ for ‘lines’.

   ---------- Footnotes ----------

   (1) There is a standard ‘.. include’ directive, but it raises errors
if the file is not found.  This one only emits a warning.


File: sphinx.info,  Node: Caption and name,  Next: Dedent,  Prev: Includes,  Up: Showing code examples

6.6.3 Caption and name
----------------------

New in version 1.3.

A ‘caption’ option can be given to show that name before the code block.
A ‘name’ option can be provided implicit target name that can be
referenced by using *note ref: 4e.  For example:

     .. code-block:: python
        :caption: this.py
        :name: this-py

        print 'Explicit is better than implicit.'

*note literalinclude: 12d. also supports the ‘caption’ and ‘name’
option.  ‘caption’ has an additional feature that if you leave the value
empty, the shown filename will be exactly the one given as an argument.


File: sphinx.info,  Node: Dedent,  Prev: Caption and name,  Up: Showing code examples

6.6.4 Dedent
------------

New in version 1.3.

A ‘dedent’ option can be given to strip indentation characters from the
code block.  For example:

     .. literalinclude:: example.rb
        :language: ruby
        :dedent: 4
        :lines: 10-15

*note code-block: 12a. also supports the ‘dedent’ option.


File: sphinx.info,  Node: Inline markup<2>,  Next: Miscellaneous markup,  Prev: Showing code examples,  Up: Sphinx Markup Constructs

6.7 Inline markup
=================

Sphinx uses interpreted text roles to insert semantic markup into
documents.  They are written as ‘:rolename:`content`’.

     Note: The default role (‘`content`’) has no special meaning by
     default.  You are free to use it for anything you like, e.g.
     variable names; use the *note default_role: fc. config value to set
     it to a known role – the *note any: 132. role to find anything or
     the *note py;obj: 133. role to find Python objects are very useful
     for this.

See *note Sphinx Domains: 58. for roles added by domains.

* Menu:

* Cross-referencing syntax::
* Other semantic markup::
* Substitutions: Substitutions<2>.


File: sphinx.info,  Node: Cross-referencing syntax,  Next: Other semantic markup,  Up: Inline markup<2>

6.7.1 Cross-referencing syntax
------------------------------

Cross-references are generated by many semantic interpreted text roles.
Basically, you only need to write ‘:role:`target`’, and a link will be
created to the item named `target' of the type indicated by `role'.  The
link’s text will be the same as `target'.

There are some additional facilities, however, that make
cross-referencing roles more versatile:

   * You may supply an explicit title and reference target, like in reST
     direct hyperlinks: ‘:role:`title <target>`’ will refer to `target',
     but the link text will be `title'.

   * If you prefix the content with ‘!’, no reference/hyperlink will be
     created.

   * If you prefix the content with ‘~’, the link text will only be the
     last component of the target.  For example,
     ‘:py:meth:`~Queue.Queue.get`’ will refer to ‘Queue.Queue.get’ but
     only display ‘get’ as the link text.  This does not work with all
     cross-reference roles, but is domain specific.

     In HTML output, the link’s ‘title’ attribute (that is e.g.  shown
     as a tool-tip on mouse-hover) will always be the full target name.

* Menu:

* Cross-referencing anything::
* Cross-referencing objects::
* Cross-referencing arbitrary locations::
* Cross-referencing documents::
* Referencing downloadable files::
* Cross-referencing figures by figure number::
* Cross-referencing other items of interest::


File: sphinx.info,  Node: Cross-referencing anything,  Next: Cross-referencing objects,  Up: Cross-referencing syntax

6.7.1.1 Cross-referencing anything
..................................

 -- reStructuredText Role: :any:

     New in version 1.3.

     This convenience role tries to do its best to find a valid target
     for its reference text.

        * First, it tries standard cross-reference targets that would be
          referenced by *note doc: 137, *note ref: 4e. or *note option:
          138.

          Custom objects added to the standard domain by extensions (see
          ‘Sphinx.add_object_type()’) are also searched.

        * Then, it looks for objects (targets) in all loaded domains.
          It is up to the domains how specific a match must be.  For
          example, in the Python domain a reference of ‘:any:`Builder`’
          would match the ‘sphinx.builders.Builder’ class.

     If none or multiple targets are found, a warning will be emitted.
     In the case of multiple targets, you can change “any” to a specific
     role.

     This role is a good candidate for setting *note default_role: fc.
     If you do, you can write cross-references without a lot of markup
     overhead.  For example, in this Python function documentation

          .. function:: install()

             This function installs a `handler` for every signal known by the
             `signal` module.  See the section `about-signals` for more information.

     there could be references to a glossary term (usually
     ‘:term:`handler`’), a Python module (usually ‘:py:mod:`signal`’ or
     ‘:mod:`signal`’) and a section (usually ‘:ref:`about-signals`’).

     The *note any: 132. role also works together with the *note
     intersphinx: 24. extension: when no local cross-reference is found,
     all object types of intersphinx inventories are also searched.


File: sphinx.info,  Node: Cross-referencing objects,  Next: Cross-referencing arbitrary locations,  Prev: Cross-referencing anything,  Up: Cross-referencing syntax

6.7.1.2 Cross-referencing objects
.................................

These roles are described with their respective domains:

   * *note Python: 13a.

   * *note C: 13b.

   * *note C++: 13c.

   * *note JavaScript: 13d.

   * *note ReST: 13e.


File: sphinx.info,  Node: Cross-referencing arbitrary locations,  Next: Cross-referencing documents,  Prev: Cross-referencing objects,  Up: Cross-referencing syntax

6.7.1.3 Cross-referencing arbitrary locations
.............................................

 -- reStructuredText Role: :ref:

     To support cross-referencing to arbitrary locations in any
     document, the standard reST labels are used.  For this to work
     label names must be unique throughout the entire documentation.
     There are two ways in which you can refer to labels:

        * If you place a label directly before a section title, you can
          reference to it with ‘:ref:`label-name`’.  Example:

               .. _my-reference-label:

               Section to cross-reference
               --------------------------

               This is the text of the section.

               It refers to the section itself, see :ref:`my-reference-label`.

          The ‘:ref:’ role would then generate a link to the section,
          with the link title being “Section to cross-reference”.  This
          works just as well when section and reference are in different
          source files.

          Automatic labels also work with figures: given

               .. _my-figure:

               .. figure:: whatever

                  Figure caption

          a reference ‘:ref:`my-figure`’ would insert a reference to the
          figure with link text “Figure caption”.

          The same works for tables that are given an explicit caption
          using the table(1) directive.

        * Labels that aren’t placed before a section title can still be
          referenced, but you must give the link an explicit title,
          using this syntax: ‘:ref:`Link title <label-name>`’.

          Note: Reference labels must start with an underscore.  When
          referencing a label, the underscore must be omitted (see
          examples above).

     Using *note ref: 4e. is advised over standard reStructuredText
     links to sections (like ‘`Section title`_’) because it works across
     files, when section headings are changed, and for all builders that
     support cross-references.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table


File: sphinx.info,  Node: Cross-referencing documents,  Next: Referencing downloadable files,  Prev: Cross-referencing arbitrary locations,  Up: Cross-referencing syntax

6.7.1.4 Cross-referencing documents
...................................

New in version 0.6.

There is also a way to directly link to documents:

 -- reStructuredText Role: :doc:

     Link to the specified document; the document name can be specified
     in absolute or relative fashion.  For example, if the reference
     ‘:doc:`parrot`’ occurs in the document ‘sketches/index’, then the
     link refers to ‘sketches/parrot’.  If the reference is
     ‘:doc:`/people`’ or ‘:doc:`../people`’, the link refers to
     ‘people’.

     If no explicit link text is given (like usual: ‘:doc:`Monty Python
     members </people>`’), the link caption will be the title of the
     given document.


File: sphinx.info,  Node: Referencing downloadable files,  Next: Cross-referencing figures by figure number,  Prev: Cross-referencing documents,  Up: Cross-referencing syntax

6.7.1.5 Referencing downloadable files
......................................

New in version 0.6.

 -- reStructuredText Role: :download:

     This role lets you link to files within your source tree that are
     not reST documents that can be viewed, but files that can be
     downloaded.

     When you use this role, the referenced file is automatically marked
     for inclusion in the output when building (obviously, for HTML
     output only).  All downloadable files are put into the ‘_downloads’
     subdirectory of the output directory; duplicate filenames are
     handled.

     An example:

          See :download:`this example script <../example.py>`.

     The given filename is usually relative to the directory the current
     source file is contained in, but if it absolute (starting with
     ‘/’), it is taken as relative to the top source directory.

     The ‘example.py’ file will be copied to the output directory, and a
     suitable link generated to it.

     Not to show unavailable download links, you should wrap whole
     paragraphs that have this role:

          .. only:: builder_html

             See :download:`this example script <../example.py>`.


File: sphinx.info,  Node: Cross-referencing figures by figure number,  Next: Cross-referencing other items of interest,  Prev: Referencing downloadable files,  Up: Cross-referencing syntax

6.7.1.6 Cross-referencing figures by figure number
..................................................

New in version 1.3.

Changed in version 1.5: ‘numref’ role can also refer sections.  And
‘numref’ allows ‘{name}’ for the link text.

 -- reStructuredText Role: :numref:

     Link to the specified figures, tables, code-blocks and sections;
     the standard reST labels are used.  When you use this role, it will
     insert a reference to the figure with link text by its figure
     number like “Fig.  1.1”.

     If an explicit link text is given (as usual: ‘:numref:`Image of
     Sphinx (Fig. %s) <my-figure>`’), the link caption will serve as
     title of the reference.  As placeholders, ‘%s’ and ‘{number}’ get
     replaced by the figure number and ‘{name}’ by the figure caption.
     If no explicit link text is given, the *note numfig_format: 145.
     setting is used as fall-back default.

     If *note numfig: 146. is ‘False’, figures are not numbered, so this
     role inserts not a reference but the label or the link text.


File: sphinx.info,  Node: Cross-referencing other items of interest,  Prev: Cross-referencing figures by figure number,  Up: Cross-referencing syntax

6.7.1.7 Cross-referencing other items of interest
.................................................

The following roles do possibly create a cross-reference, but do not
refer to objects:

 -- reStructuredText Role: :envvar:

     An environment variable.  Index entries are generated.  Also
     generates a link to the matching *note envvar: 149. directive, if
     it exists.

 -- reStructuredText Role: :token:

     The name of a grammar token (used to create links between *note
     productionlist: 123. directives).

 -- reStructuredText Role: :keyword:

     The name of a keyword in Python.  This creates a link to a
     reference label with that name, if it exists.

 -- reStructuredText Role: :option:

     A command-line option to an executable program.  This generates a
     link to a *note option: 14b. directive, if it exists.

The following role creates a cross-reference to a term in a *note
glossary: 11f.:

 -- reStructuredText Role: :term:

     Reference to a term in a glossary.  A glossary is created using the
     ‘glossary’ directive containing a definition list with terms and
     definitions.  It does not have to be in the same file as the ‘term’
     markup, for example the Python docs have one global glossary in the
     ‘glossary.rst’ file.

     If you use a term that’s not explained in a glossary, you’ll get a
     warning during build.


File: sphinx.info,  Node: Other semantic markup,  Next: Substitutions<2>,  Prev: Cross-referencing syntax,  Up: Inline markup<2>

6.7.2 Other semantic markup
---------------------------

The following roles don’t do anything special except formatting the text
in a different style:

 -- reStructuredText Role: :abbr:

     An abbreviation.  If the role content contains a parenthesized
     explanation, it will be treated specially: it will be shown in a
     tool-tip in HTML, and output only once in LaTeX.

     Example: ‘:abbr:`LIFO (last-in, first-out)`’.

     New in version 0.6.

 -- reStructuredText Role: :command:

     The name of an OS-level command, such as ‘rm’.

 -- reStructuredText Role: :dfn:

     Mark the defining instance of a term in the text.  (No index
     entries are generated.)

 -- reStructuredText Role: :file:

     The name of a file or directory.  Within the contents, you can use
     curly braces to indicate a “variable” part, for example:

          ... is installed in :file:`/usr/lib/python2.{x}/site-packages` ...

     In the built documentation, the ‘x’ will be displayed differently
     to indicate that it is to be replaced by the Python minor version.

 -- reStructuredText Role: :guilabel:

     Labels presented as part of an interactive user interface should be
     marked using ‘guilabel’.  This includes labels from text-based
     interfaces such as those created using ‘curses’ or other text-based
     libraries.  Any label used in the interface should be marked with
     this role, including button labels, window titles, field names,
     menu and menu selection names, and even values in selection lists.

     Changed in version 1.0: An accelerator key for the GUI label can be
     included using an ampersand; this will be stripped and displayed
     underlined in the output (example: ‘:guilabel:`&Cancel`’).  To
     include a literal ampersand, double it.

 -- reStructuredText Role: :kbd:

     Mark a sequence of keystrokes.  What form the key sequence takes
     may depend on platform- or application-specific conventions.  When
     there are no relevant conventions, the names of modifier keys
     should be spelled out, to improve accessibility for new users and
     non-native speakers.  For example, an `xemacs' key sequence may be
     marked like ‘:kbd:`C-x C-f`’, but without reference to a specific
     application or platform, the same sequence should be marked as
     ‘:kbd:`Control-x Control-f`’.

 -- reStructuredText Role: :mailheader:

     The name of an RFC 822-style mail header.  This markup does not
     imply that the header is being used in an email message, but can be
     used to refer to any header of the same “style.” This is also used
     for headers defined by the various MIME specifications.  The header
     name should be entered in the same way it would normally be found
     in practice, with the camel-casing conventions being preferred
     where there is more than one common usage.  For example:
     ‘:mailheader:`Content-Type`’.

 -- reStructuredText Role: :makevar:

     The name of a ‘make’ variable.

 -- reStructuredText Role: :manpage:

     A reference to a Unix manual page including the section, e.g.
     ‘:manpage:`ls(1)`’.  Creates a hyperlink to an external site
     rendering the manpage if *note manpages_url: 156. is defined.

 -- reStructuredText Role: :menuselection:

     Menu selections should be marked using the ‘menuselection’ role.
     This is used to mark a complete sequence of menu selections,
     including selecting submenus and choosing a specific operation, or
     any subsequence of such a sequence.  The names of individual
     selections should be separated by ‘-->’.

     For example, to mark the selection “Start > Programs”, use this
     markup:

          :menuselection:`Start --> Programs`

     When including a selection that includes some trailing indicator,
     such as the ellipsis some operating systems use to indicate that
     the command opens a dialog, the indicator should be omitted from
     the selection name.

     ‘menuselection’ also supports ampersand accelerators just like
     *note guilabel: 151.

 -- reStructuredText Role: :mimetype:

     The name of a MIME type, or a component of a MIME type (the major
     or minor portion, taken alone).

 -- reStructuredText Role: :newsgroup:

     The name of a Usenet newsgroup.

 -- reStructuredText Role: :program:

     The name of an executable program.  This may differ from the file
     name for the executable for some platforms.  In particular, the
     ‘.exe’ (or other) extension should be omitted for Windows programs.

 -- reStructuredText Role: :regexp:

     A regular expression.  Quotes should not be included.

 -- reStructuredText Role: :samp:

     A piece of literal text, such as code.  Within the contents, you
     can use curly braces to indicate a “variable” part, as in *note
     file: 150.  For example, in ‘:samp:`print 1+{variable}`’, the part
     ‘variable’ would be emphasized.

     If you don’t need the “variable part” indication, use the standard
     ‘``code``’ instead.

There is also an *note index: 15d. role to generate index entries.

The following roles generate external links:

 -- reStructuredText Role: :pep:

     A reference to a Python Enhancement Proposal.  This generates
     appropriate index entries.  The text “PEP `number'” is generated;
     in the HTML output, this text is a hyperlink to an online copy of
     the specified PEP. You can link to a specific section by saying
     ‘:pep:`number#anchor`’.

 -- reStructuredText Role: :rfc:

     A reference to an Internet Request for Comments.  This generates
     appropriate index entries.  The text “RFC `number'” is generated;
     in the HTML output, this text is a hyperlink to an online copy of
     the specified RFC. You can link to a specific section by saying
     ‘:rfc:`number#anchor`’.

Note that there are no special roles for including hyperlinks as you can
use the standard reST markup for that purpose.


File: sphinx.info,  Node: Substitutions<2>,  Prev: Other semantic markup,  Up: Inline markup<2>

6.7.3 Substitutions
-------------------

The documentation system provides three substitutions that are defined
by default.  They are set in the build configuration file.

 -- Describe: |release|

     Replaced by the project release the documentation refers to.  This
     is meant to be the full version string including alpha/beta/release
     candidate tags, e.g.  ‘2.5.2b3’.  Set by *note release: 84.

 -- Describe: |version|

     Replaced by the project version the documentation refers to.  This
     is meant to consist only of the major and minor version parts, e.g.
     ‘2.5’, even for version 2.5.1.  Set by *note version: 82.

 -- Describe: |today|

     Replaced by either today’s date (the date on which the document is
     read), or the date set in the build configuration file.  Normally
     has the format ‘April 14, 2007’.  Set by *note today_fmt: 161. and
     *note today: 162.


File: sphinx.info,  Node: Miscellaneous markup,  Prev: Inline markup<2>,  Up: Sphinx Markup Constructs

6.8 Miscellaneous markup
========================

* Menu:

* File-wide metadata::
* Meta-information markup::
* Index-generating markup::
* Including content based on tags::
* Tables: Tables<2>.
* Math::


File: sphinx.info,  Node: File-wide metadata,  Next: Meta-information markup,  Up: Miscellaneous markup

6.8.1 File-wide metadata
------------------------

reST has the concept of “field lists”; these are a sequence of fields
marked up like this:

     :fieldname: Field content

A field list near the top of a file is parsed by docutils as the
“docinfo” which is normally used to record the author, date of
publication and other metadata.  `In Sphinx', a field list preceding any
other markup is moved from the docinfo to the Sphinx environment as
document metadata and is not displayed in the output; a field list
appearing after the document title will be part of the docinfo as normal
and will be displayed in the output.

At the moment, these metadata fields are recognized:

‘tocdepth’

     The maximum depth for a table of contents of this file.

     New in version 0.4.

‘nocomments’

     If set, the web application won’t display a comment form for a page
     generated from this source file.

‘orphan’

     If set, warnings about this file not being included in any toctree
     will be suppressed.

     New in version 1.0.


File: sphinx.info,  Node: Meta-information markup,  Next: Index-generating markup,  Prev: File-wide metadata,  Up: Miscellaneous markup

6.8.2 Meta-information markup
-----------------------------

 -- reStructuredText Directive: .. sectionauthor:: name <email>

     Identifies the author of the current section.  The argument should
     include the author’s name such that it can be used for presentation
     and email address.  The domain name portion of the address should
     be lower case.  Example:

          .. sectionauthor:: Guido van Rossum <guido@python.org>

     By default, this markup isn’t reflected in the output in any way
     (it helps keep track of contributions), but you can set the
     configuration value *note show_authors: 168. to ‘True’ to make them
     produce a paragraph in the output.

 -- reStructuredText Directive: .. codeauthor:: name <email>

     The *note codeauthor: 169. directive, which can appear multiple
     times, names the authors of the described code, just like *note
     sectionauthor: 167. names the author(s) of a piece of
     documentation.  It too only produces output if the *note
     show_authors: 168. configuration value is ‘True’.


File: sphinx.info,  Node: Index-generating markup,  Next: Including content based on tags,  Prev: Meta-information markup,  Up: Miscellaneous markup

6.8.3 Index-generating markup
-----------------------------

Sphinx automatically creates index entries from all object descriptions
(like functions, classes or attributes) like discussed in *note Sphinx
Domains: 58.

However, there is also explicit markup available, to make the index more
comprehensive and enable index entries in documents where information is
not mainly contained in information units, such as the language
reference.

 -- reStructuredText Directive: .. index:: <entries>

     This directive contains one or more index entries.  Each entry
     consists of a type and a value, separated by a colon.

     For example:

          .. index::
             single: execution; context
             module: __main__
             module: sys
             triple: module; search; path

          The execution context
          ---------------------

          ...

     This directive contains five entries, which will be converted to
     entries in the generated index which link to the exact location of
     the index statement (or, in case of offline media, the
     corresponding page number).

     Since index directives generate cross-reference targets at their
     location in the source, it makes sense to put them `before' the
     thing they refer to – e.g.  a heading, as in the example above.

     The possible entry types are:

     single

          Creates a single index entry.  Can be made a subentry by
          separating the subentry text with a semicolon (this notation
          is also used below to describe what entries are created).

     pair

          ‘pair: loop; statement’ is a shortcut that creates two index
          entries, namely ‘loop; statement’ and ‘statement; loop’.

     triple

          Likewise, ‘triple: module; search; path’ is a shortcut that
          creates three index entries, which are ‘module; search path’,
          ‘search; path, module’ and ‘path; module search’.

     see

          ‘see: entry; other’ creates an index entry that refers from
          ‘entry’ to ‘other’.

     seealso

          Like ‘see’, but inserts “see also” instead of “see”.

     module, keyword, operator, object, exception, statement, builtin

          These all create two index entries.  For example, ‘module:
          hashlib’ creates the entries ‘module; hashlib’ and ‘hashlib;
          module’.  (These are Python-specific and therefore
          deprecated.)

     You can mark up “main” index entries by prefixing them with an
     exclamation mark.  The references to “main” entries are emphasized
     in the generated index.  For example, if two pages contain

          .. index:: Python

     and one page contains

          .. index:: ! Python

     then the backlink to the latter page is emphasized among the three
     backlinks.

     For index directives containing only “single” entries, there is a
     shorthand notation:

          .. index:: BNF, grammar, syntax, notation

     This creates four index entries.

     Changed in version 1.1: Added ‘see’ and ‘seealso’ types, as well as
     marking main entries.

 -- reStructuredText Role: :index:

     While the *note index: 110. directive is a block-level markup and
     links to the beginning of the next paragraph, there is also a
     corresponding role that sets the link target directly where it is
     used.

     The content of the role can be a simple phrase, which is then kept
     in the text and used as an index entry.  It can also be a
     combination of text and index entry, styled like with explicit
     targets of cross-references.  In that case, the “target” part can
     be a full entry as described for the directive above.  For example:

          This is a normal reST :index:`paragraph` that contains several
          :index:`index entries <pair: index; entry>`.

     New in version 1.1.


File: sphinx.info,  Node: Including content based on tags,  Next: Tables<2>,  Prev: Index-generating markup,  Up: Miscellaneous markup

6.8.4 Including content based on tags
-------------------------------------

 -- reStructuredText Directive: .. only:: <expression>

     Include the content of the directive only if the `expression' is
     true.  The expression should consist of tags, like this:

          .. only:: html and draft

     Undefined tags are false, defined tags (via the ‘-t’ command-line
     option or within ‘conf.py’, see *note here: 16c.) are true.
     Boolean expressions, also using parentheses (like ‘html and (latex
     or draft)’) are supported.

     The `format' and the `name' of the current builder (‘html’, ‘latex’
     or ‘text’) are always set as a tag (1).  To make the distinction
     between format and name explicit, they are also added with the
     prefix ‘format_’ and ‘builder_’, e.g.  the epub builder defines the
     tags ‘html’, ‘epub’, ‘format_html’ and ‘builder_epub’.

     These standard tags are set `after' the configuration file is read,
     so they are not available there.

     All tags must follow the standard Python identifier syntax as set
     out in the Identifiers and keywords(2) documentation.  That is, a
     tag expression may only consist of tags that conform to the syntax
     of Python variables.  In ASCII, this consists of the uppercase and
     lowercase letters ‘A’ through ‘Z’, the underscore ‘_’ and, except
     for the first character, the digits ‘0’ through ‘9’.

     New in version 0.6.

     Changed in version 1.2: Added the name of the builder and the
     prefixes.

          Warning: This directive is designed to control only content of
          document.  It could not control sections, labels and so on.

   ---------- Footnotes ----------

   (1) For most builders name and format are the same.  At the moment
only builders derived from the html builder distinguish between the
builder format and the builder name.

Note that the current builder tag is not available in ‘conf.py’, it is
only available after the builder is initialized.

   (2) 
https://docs.python.org/2/reference/lexical_analysis.html#identifiers


File: sphinx.info,  Node: Tables<2>,  Next: Math,  Prev: Including content based on tags,  Up: Miscellaneous markup

6.8.5 Tables
------------

Use *note reStructuredText tables: f1, i.e.  either

   - grid table syntax (ref(1)),

   - simple table syntax (ref(2)),

   - csv-table(3) syntax,

   - or list-table(4) syntax.

The table(5) directive serves as optional wrapper of the `grid' and
`simple' syntaxes.

They work fine in HTML output, however there are some gotchas when using
tables in LaTeX: the column width is hard to determine correctly
automatically.  For this reason, the following directive exists:

 -- reStructuredText Directive: .. tabularcolumns:: column spec

     This directive gives a “column spec” for the next table occurring
     in the source file.  The spec is the second argument to the LaTeX
     ‘tabulary’ package’s environment (which Sphinx uses to translate
     tables).  It can have values like

          |l|l|l|

     which means three left-adjusted, nonbreaking columns.  For columns
     with longer text that should automatically be broken, use either
     the standard ‘p{width}’ construct, or tabulary’s automatic
     specifiers:

     ‘L’       flush left column with automatic width
               
               
     ‘R’       flush right column with automatic width
               
               
     ‘C’       centered column with automatic width
               
               
     ‘J’       justified column with automatic width
               

     The automatic widths of the ‘LRCJ’ columns are attributed by
     ‘tabulary’ in proportion to the observed shares in a first pass
     where the table cells are rendered at their natural “horizontal”
     widths.

     By default, Sphinx uses a table layout with ‘J’ for every column.

     New in version 0.3.

     Changed in version 1.6: Merged cells may now contain multiple
     paragraphs and are much better handled, thanks to custom Sphinx
     LaTeX macros.  This novel situation motivated the switch to ‘J’
     specifier and not ‘L’ by default.

          Hint: Sphinx actually uses ‘T’ specifier having done
          ‘\newcolumntype{T}{J}’.  To revert to previous default, insert
          ‘\newcolumntype{T}{L}’ in the LaTeX preamble (see *note
          latex_elements: be.).

          A frequent issue with tabulary is that columns with little
          contents are “squeezed”.  The minimal column width is a
          tabulary parameter called ‘\tymin’.  You may set it globally
          in the LaTeX preamble via ‘\setlength{\tymin}{40pt}’ for
          example.

          Else, use the *note tabularcolumns: 16e. directive with an
          explicit ‘p{40pt}’ (for example) for that column.  You may use
          also ‘l’ specifier but this makes the task of setting column
          widths more difficult if some merged cell intersects that
          column.

          Warning: Tables with more than 30 rows are rendered using
          ‘longtable’, not ‘tabulary’, in order to allow pagebreaks.
          The ‘L’, ‘R’, … specifiers do not work for these tables.

          Tables that contain list-like elements such as object
          descriptions, blockquotes or any kind of lists cannot be set
          out of the box with ‘tabulary’.  They are therefore set with
          the standard LaTeX ‘tabular’ (or ‘longtable’) environment if
          you don’t give a ‘tabularcolumns’ directive.  If you do, the
          table will be set with ‘tabulary’ but you must use the
          ‘p{width}’ construct (or Sphinx’s ‘\X’ and ‘\Y’ specifiers
          described below) for the columns containing these elements.

          Literal blocks do not work with ‘tabulary’ at all, so tables
          containing a literal block are always set with ‘tabular’.  The
          verbatim environment used for literal blocks only works in
          ‘p{width}’ (and ‘\X’ or ‘\Y’) columns, hence Sphinx generates
          such column specs for tables containing literal blocks.

     Since Sphinx 1.5, the ‘\X{a}{b}’ specifier is used (there `is' a
     backslash in the specifier letter).  It is like ‘p{width}’ with the
     width set to a fraction ‘a/b’ of the current line width.  You can
     use it in the *note tabularcolumns: 16e. (it is not a problem if
     some LaTeX macro is also called ‘\X’.)

     It is `not' needed for ‘b’ to be the total number of columns, nor
     for the sum of the fractions of the ‘\X’ specifiers to add up to
     one.  For example ‘|\X{2}{5}|\X{1}{5}|\X{1}{5}|’ is legitimate and
     the table will occupy 80% of the line width, the first of its three
     columns having the same width as the sum of the next two.

     This is used by the ‘:widths:’ option of the table(6) directive.

     Since Sphinx 1.6, there is also the ‘\Y{f}’ specifier which admits
     a decimal argument, such has ‘\Y{0.15}’: this would have the same
     effect as ‘\X{3}{20}’.

     Changed in version 1.6: Merged cells from complex grid tables
     (either multi-row, multi-column, or both) now allow blockquotes,
     lists, literal blocks, … as do regular cells.

     Sphinx’s merged cells interact well with ‘p{width}’, ‘\X{a}{b}’,
     ‘Y{f}’ and tabulary’s columns.

          Note: *note tabularcolumns: 16e. conflicts with ‘:widths:’
          option of table directives.  If both are specified, ‘:widths:’
          option will be ignored.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables

   (2) 
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables

   (3) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#csv-table

   (4) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#list-table

   (5) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table

   (6) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table


File: sphinx.info,  Node: Math,  Prev: Tables<2>,  Up: Miscellaneous markup

6.8.6 Math
----------

See *note Math support in Sphinx: 170.

More markup is added by *note Sphinx Domains: 58.


File: sphinx.info,  Node: Sphinx Domains,  Next: Available builders,  Prev: Sphinx Markup Constructs,  Up: Top

7 Sphinx Domains
****************

New in version 1.0.

* Menu:

* What is a Domain?::
* Basic Markup::
* The Python Domain::
* The C Domain::
* The C++ Domain::
* The Standard Domain::
* The JavaScript Domain::
* The reStructuredText domain::
* More domains::


File: sphinx.info,  Node: What is a Domain?,  Next: Basic Markup,  Up: Sphinx Domains

7.1 What is a Domain?
=====================

Originally, Sphinx was conceived for a single project, the documentation
of the Python language.  Shortly afterwards, it was made available for
everyone as a documentation tool, but the documentation of Python
modules remained deeply built in – the most fundamental directives, like
‘function’, were designed for Python objects.  Since Sphinx has become
somewhat popular, interest developed in using it for many different
purposes: C/C++ projects, JavaScript, or even reStructuredText markup
(like in this documentation).

While this was always possible, it is now much easier to easily support
documentation of projects using different programming languages or even
ones not supported by the main Sphinx distribution, by providing a
`domain' for every such purpose.

A domain is a collection of markup (reStructuredText *note directive:
175.s and *note role: 176.s) to describe and link to *note object: 177.s
belonging together, e.g.  elements of a programming language.  Directive
and role names in a domain have names like ‘domain:name’, e.g.
‘py:function’.  Domains can also provide custom indices (like the Python
Module Index).

Having domains means that there are no naming problems when one set of
documentation wants to refer to e.g.  C++ and Python classes.  It also
means that extensions that support the documentation of whole new
languages are much easier to write.

This section describes what the domains that are included with Sphinx
provide.  The domain API is documented as well, in the section *note
Domain API: 178.


File: sphinx.info,  Node: Basic Markup,  Next: The Python Domain,  Prev: What is a Domain?,  Up: Sphinx Domains

7.2 Basic Markup
================

Most domains provide a number of `object description directives', used
to describe specific objects provided by modules.  Each directive
requires one or more signatures to provide basic information about what
is being described, and the content should be the description.  The
basic version makes entries in the general index; if no index entry is
desired, you can give the directive option flag ‘:noindex:’.  An example
using a Python domain directive:

     .. py:function:: spam(eggs)
                      ham(eggs)

        Spam or ham the foo.

This describes the two Python functions ‘spam’ and ‘ham’.  (Note that
when signatures become too long, you can break them if you add a
backslash to lines that are continued in the next line.  Example:

     .. py:function:: filterwarnings(action, message='', category=Warning, \
                                     module='', lineno=0, append=False)
        :noindex:

(This example also shows how to use the ‘:noindex:’ flag.)

The domains also provide roles that link back to these object
descriptions.  For example, to link to one of the functions described in
the example above, you could say

     The function :py:func:`spam` does a similar thing.

As you can see, both directive and role names contain the domain name
and the directive name.

Default Domain
..............

For documentation describing objects from solely one domain, authors
will not have to state again its name at each directive, role, etc…
after having specified a default.  This can be done either via the
config value *note primary_domain: 17a. or via this directive:

 -- reStructuredText Directive: .. default-domain:: name

     Select a new default domain.  While the *note primary_domain: 17a.
     selects a global default, this only has an effect within the same
     file.

If no other default is selected, the Python domain (named ‘py’) is the
default one, mostly for compatibility with documentation written for
older versions of Sphinx.

Directives and roles that belong to the default domain can be mentioned
without giving the domain name, i.e.

     .. function:: pyfunc()

        Describes a Python function.

     Reference to :func:`pyfunc`.

* Menu:

* Cross-referencing syntax: Cross-referencing syntax<2>.


File: sphinx.info,  Node: Cross-referencing syntax<2>,  Up: Basic Markup

7.2.1 Cross-referencing syntax
------------------------------

For cross-reference roles provided by domains, the same facilities exist
as for general cross-references.  See *note Cross-referencing syntax:
10b.

In short:

   * You may supply an explicit title and reference target:
     ‘:role:`title <target>`’ will refer to `target', but the link text
     will be `title'.

   * If you prefix the content with ‘!’, no reference/hyperlink will be
     created.

   * If you prefix the content with ‘~’, the link text will only be the
     last component of the target.  For example,
     ‘:py:meth:`~Queue.Queue.get`’ will refer to ‘Queue.Queue.get’ but
     only display ‘get’ as the link text.


File: sphinx.info,  Node: The Python Domain,  Next: The C Domain,  Prev: Basic Markup,  Up: Sphinx Domains

7.3 The Python Domain
=====================

The Python domain (name `py') provides the following directives for
module declarations:

 -- reStructuredText Directive: .. py:module:: name

     This directive marks the beginning of the description of a module
     (or package submodule, in which case the name should be fully
     qualified, including the package name).  It does not create content
     (like e.g.  *note py;class: 56. does).

     This directive will also cause an entry in the global module index.

     The ‘platform’ option, if present, is a comma-separated list of the
     platforms on which the module is available (if it is available on
     all platforms, the option should be omitted).  The keys are short
     identifiers; examples that are in use include “IRIX”, “Mac”,
     “Windows”, and “Unix”.  It is important to use a key which has
     already been used when applicable.

     The ‘synopsis’ option should consist of one sentence describing the
     module’s purpose – it is currently only used in the Global Module
     Index.

     The ‘deprecated’ option can be given (with no value) to mark a
     module as deprecated; it will be designated as such in various
     locations then.

 -- reStructuredText Directive: .. py:currentmodule:: name

     This directive tells Sphinx that the classes, functions etc.
     documented from here are in the given module (like *note py;module:
     111.), but it will not create index entries, an entry in the Global
     Module Index, or a link target for *note py;mod: 17f.  This is
     helpful in situations where documentation for things in a module is
     spread over multiple files or sections – one location has the *note
     py;module: 111. directive, the others only *note py;currentmodule:
     17e.

The following directives are provided for module and class contents:

 -- reStructuredText Directive: .. py:function:: name(parameters)

     Describes a module-level function.  The signature should include
     the parameters as given in the Python function definition, see
     *note Python Signatures: 181.  For example:

          .. py:function:: Timer.repeat(repeat=3, number=1000000)

     For methods you should use *note py;method: 57.

     The description normally includes information about the parameters
     required and how they are used (especially whether mutable objects
     passed as parameters are modified), side effects, and possible
     exceptions.

     This information can (in any ‘py’ directive) optionally be given in
     a structured form, see *note Info field lists: 182.

 -- reStructuredText Directive: .. py:data:: name

     Describes global data in a module, including both variables and
     values used as “defined constants.” Class and object attributes are
     not documented using this environment.

 -- reStructuredText Directive: .. py:exception:: name

     Describes an exception class.  The signature can, but need not
     include parentheses with constructor arguments.

 -- reStructuredText Directive: .. py:class:: name

 -- reStructuredText Directive: .. py:class:: name(parameters)

     Describes a class.  The signature can optionally include
     parentheses with parameters which will be shown as the constructor
     arguments.  See also *note Python Signatures: 181.

     Methods and attributes belonging to the class should be placed in
     this directive’s body.  If they are placed outside, the supplied
     name should contain the class name so that cross-references still
     work.  Example:

          .. py:class:: Foo

             .. py:method:: quux()

          -- or --

          .. py:class:: Bar

          .. py:method:: Bar.quux()

     The first way is the preferred one.

 -- reStructuredText Directive: .. py:attribute:: name

     Describes an object data attribute.  The description should include
     information about the type of the data to be expected and whether
     it may be changed directly.

 -- reStructuredText Directive: .. py:method:: name(parameters)

     Describes an object method.  The parameters should not include the
     ‘self’ parameter.  The description should include similar
     information to that described for ‘function’.  See also *note
     Python Signatures: 181. and *note Info field lists: 182.

 -- reStructuredText Directive: .. py:staticmethod:: name(parameters)

     Like *note py;method: 57, but indicates that the method is a static
     method.

     New in version 0.4.

 -- reStructuredText Directive: .. py:classmethod:: name(parameters)

     Like *note py;method: 57, but indicates that the method is a class
     method.

     New in version 0.6.

 -- reStructuredText Directive: .. py:decorator:: name

 -- reStructuredText Directive: .. py:decorator:: name(parameters)

     Describes a decorator function.  The signature should represent the
     usage as a decorator.  For example, given the functions

          def removename(func):
              func.__name__ = ''
              return func

          def setnewname(name):
              def decorator(func):
                  func.__name__ = name
                  return func
              return decorator

     the descriptions should look like this:

          .. py:decorator:: removename

             Remove name of the decorated function.

          .. py:decorator:: setnewname(name)

             Set name of the decorated function to *name*.

     (as opposed to ‘.. py:decorator:: removename(func)’.)

     There is no ‘py:deco’ role to link to a decorator that is marked up
     with this directive; rather, use the *note py;func: 189. role.

 -- reStructuredText Directive: .. py:decoratormethod:: name

 -- reStructuredText Directive: .. py:decoratormethod:: name(signature)

     Same as *note py;decorator: 188, but for decorators that are
     methods.

     Refer to a decorator method using the *note py;meth: 18b. role.

* Menu:

* Python Signatures::
* Info field lists::
* Cross-referencing Python objects::


File: sphinx.info,  Node: Python Signatures,  Next: Info field lists,  Up: The Python Domain

7.3.1 Python Signatures
-----------------------

Signatures of functions, methods and class constructors can be given
like they would be written in Python.

Default values for optional arguments can be given (but if they contain
commas, they will confuse the signature parser).  Python 3-style
argument annotations can also be given as well as return type
annotations:

     .. py:function:: compile(source : string, filename, symbol='file') -> ast object

For functions with optional parameters that don’t have default values
(typically functions implemented in C extension modules without keyword
argument support), you can use brackets to specify the optional parts:

      -- Function: compile (source[, filename[, symbol]])

It is customary to put the opening bracket before the comma.


File: sphinx.info,  Node: Info field lists,  Next: Cross-referencing Python objects,  Prev: Python Signatures,  Up: The Python Domain

7.3.2 Info field lists
----------------------

New in version 0.4.

Inside Python object description directives, reST field lists with these
fields are recognized and formatted nicely:

   * ‘param’, ‘parameter’, ‘arg’, ‘argument’, ‘key’, ‘keyword’:
     Description of a parameter.

   * ‘type’: Type of a parameter.  Creates a link if possible.

   * ‘raises’, ‘raise’, ‘except’, ‘exception’: That (and when) a
     specific exception is raised.

   * ‘var’, ‘ivar’, ‘cvar’: Description of a variable.

   * ‘vartype’: Type of a variable.  Creates a link if possible.

   * ‘returns’, ‘return’: Description of the return value.

   * ‘rtype’: Return type.  Creates a link if possible.

     Note: In current release, all ‘var’, ‘ivar’ and ‘cvar’ are
     represented as “Variable”.  There is no difference at all.

The field names must consist of one of these keywords and an argument
(except for ‘returns’ and ‘rtype’, which do not need an argument).  This
is best explained by an example:

     .. py:function:: send_message(sender, recipient, message_body, [priority=1])

        Send a message to a recipient

        :param str sender: The person sending the message
        :param str recipient: The recipient of the message
        :param str message_body: The body of the message
        :param priority: The priority of the message, can be a number 1-5
        :type priority: integer or None
        :return: the message id
        :rtype: int
        :raises ValueError: if the message_body exceeds 160 characters
        :raises TypeError: if the message_body is not a basestring

This will render like this:

      -- Function: send_message (sender, recipient, message_body[,
               priority=1])

          Send a message to a recipient


          Parameters:

             * ‘sender’ (‘str’) – The person sending the message

             * ‘recipient’ (‘str’) – The recipient of the message

             * ‘message_body’ (‘str’) – The body of the message

             * ‘priority’ (‘integer’‘ or ’‘None’) – The priority of the
               message, can be a number 1-5


          Returns: the message id


          Return type: int


          Raises:

             * ‘ValueError’ – if the message_body exceeds 160 characters

             * ‘TypeError’ – if the message_body is not a basestring

It is also possible to combine parameter type and description, if the
type is a single word, like this:

     :param int priority: The priority of the message, can be a number 1-5

New in version 1.5.

Container types such as lists and dictionaries can be linked
automatically using the following syntax:

     :type priorities: list(int)
     :type priorities: list[int]
     :type mapping: dict(str, int)
     :type mapping: dict[str, int]
     :type point: tuple(float, float)
     :type point: tuple[float, float]

Multiple types in a type field will be linked automatically if separated
by the word “or”:

     :type an_arg: int or None
     :vartype a_var: str or int
     :rtype: float or str


File: sphinx.info,  Node: Cross-referencing Python objects,  Prev: Info field lists,  Up: The Python Domain

7.3.3 Cross-referencing Python objects
--------------------------------------

The following roles refer to objects in modules and are possibly
hyperlinked if a matching identifier is found:

 -- reStructuredText Role: :py:mod:

     Reference a module; a dotted name may be used.  This should also be
     used for package names.

 -- reStructuredText Role: :py:func:

     Reference a Python function; dotted names may be used.  The role
     text needs not include trailing parentheses to enhance readability;
     they will be added automatically by Sphinx if the *note
     add_function_parentheses: 190. config value is ‘True’ (the
     default).

 -- reStructuredText Role: :py:data:

     Reference a module-level variable.

 -- reStructuredText Role: :py:const:

     Reference a “defined” constant.  This may be a Python variable that
     is not intended to be changed.

 -- reStructuredText Role: :py:class:

     Reference a class; a dotted name may be used.

 -- reStructuredText Role: :py:meth:

     Reference a method of an object.  The role text can include the
     type name and the method name; if it occurs within the description
     of a type, the type name can be omitted.  A dotted name may be
     used.

 -- reStructuredText Role: :py:attr:

     Reference a data attribute of an object.

 -- reStructuredText Role: :py:exc:

     Reference an exception.  A dotted name may be used.

 -- reStructuredText Role: :py:obj:

     Reference an object of unspecified type.  Useful e.g.  as the *note
     default_role: fc.

     New in version 0.4.

The name enclosed in this markup can include a module name and/or a
class name.  For example, ‘:py:func:`filter`’ could refer to a function
named ‘filter’ in the current module, or the built-in function of that
name.  In contrast, ‘:py:func:`foo.filter`’ clearly refers to the
‘filter’ function in the ‘foo’ module.

Normally, names in these roles are searched first without any further
qualification, then with the current module name prepended, then with
the current module and class name (if any) prepended.  If you prefix the
name with a dot, this order is reversed.  For example, in the
documentation of Python’s ‘codecs’ module, ‘:py:func:`open`’ always
refers to the built-in function, while ‘:py:func:`.open`’ refers to
‘codecs.open()’.

A similar heuristic is used to determine whether the name is an
attribute of the currently documented class.

Also, if the name is prefixed with a dot, and no exact match is found,
the target is taken as a suffix and all object names with that suffix
are searched.  For example, ‘:py:meth:`.TarFile.close`’ references the
‘tarfile.TarFile.close()’ function, even if the current module is not
‘tarfile’.  Since this can get ambiguous, if there is more than one
possible match, you will get a warning from Sphinx.

Note that you can combine the ‘~’ and ‘.’ prefixes:
‘:py:meth:`~.TarFile.close`’ will reference the
‘tarfile.TarFile.close()’ method, but the visible link caption will only
be ‘close()’.


File: sphinx.info,  Node: The C Domain,  Next: The C++ Domain,  Prev: The Python Domain,  Up: Sphinx Domains

7.4 The C Domain
================

The C domain (name `c') is suited for documentation of C API.

 -- reStructuredText Directive: .. c:function:: function prototype

     Describes a C function.  The signature should be given as in C,
     e.g.:

          .. c:function:: PyObject* PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)

     This is also used to describe function-like preprocessor macros.
     The names of the arguments should be given so they may be used in
     the description.

     Note that you don’t have to backslash-escape asterisks in the
     signature, as it is not parsed by the reST inliner.

 -- reStructuredText Directive: .. c:member:: declaration

     Describes a C struct member.  Example signature:

          .. c:member:: PyObject* PyTypeObject.tp_bases

     The text of the description should include the range of values
     allowed, how the value should be interpreted, and whether the value
     can be changed.  References to structure members in text should use
     the ‘member’ role.

 -- reStructuredText Directive: .. c:macro:: name

     Describes a “simple” C macro.  Simple macros are macros which are
     used for code expansion, but which do not take arguments so cannot
     be described as functions.  This is a simple C-language ‘#define’.
     Examples of its use in the Python documentation include
     ‘PyObject_HEAD’ and ‘Py_BEGIN_ALLOW_THREADS’.

 -- reStructuredText Directive: .. c:type:: name

     Describes a C type (whether defined by a typedef or struct).  The
     signature should just be the type name.

 -- reStructuredText Directive: .. c:var:: declaration

     Describes a global C variable.  The signature should include the
     type, such as:

          .. c:var:: PyObject* PyClass_Type

* Menu:

* Cross-referencing C constructs::


File: sphinx.info,  Node: Cross-referencing C constructs,  Up: The C Domain

7.4.1 Cross-referencing C constructs
------------------------------------

The following roles create cross-references to C-language constructs if
they are defined in the documentation:

 -- reStructuredText Role: :c:func:

     Reference a C-language function.  Should include trailing
     parentheses.

 -- reStructuredText Role: :c:member:

     Reference a C-language member of a struct.

 -- reStructuredText Role: :c:macro:

     Reference a “simple” C macro, as defined above.

 -- reStructuredText Role: :c:type:

     Reference a C-language type.

 -- reStructuredText Role: :c:data:

     Reference a C-language variable.


File: sphinx.info,  Node: The C++ Domain,  Next: The Standard Domain,  Prev: The C Domain,  Up: Sphinx Domains

7.5 The C++ Domain
==================

The C++ domain (name `cpp') supports documenting C++ projects.

* Menu:

* Directives: Directives<2>.
* Constrained Templates::
* Inline Expressions and Tpes::
* Namespacing::
* Info field lists: Info field lists<2>.
* Cross-referencing::
* Configuration Variables::


File: sphinx.info,  Node: Directives<2>,  Next: Constrained Templates,  Up: The C++ Domain

7.5.1 Directives
----------------

The following directives are available.  All declarations can start with
a visibility statement (‘public’, ‘private’ or ‘protected’).

 -- reStructuredText Directive: .. cpp:class:: class specifier

     Describe a class/struct, possibly with specification of
     inheritance, e.g.,:

          .. cpp:class:: MyClass : public MyBase, MyOtherBase

     The class can be directly declared inside a nested scope, e.g.,:

          .. cpp:class:: OuterScope::MyClass : public MyBase, MyOtherBase

     A class template can be declared:

          .. cpp:class:: template<typename T, std::size_t N> std::array

     or with a line break:

          .. cpp:class:: template<typename T, std::size_t N> \
                         std::array

     Full and partial template specialisations can be declared:

          .. cpp:class:: template<> \
                          std::array<bool, 256>

          .. cpp:class:: template<typename T> \
                          std::array<T, 42>

 -- reStructuredText Directive: .. cpp:function:: (member) function
          prototype

     Describe a function or member function, e.g.,:

          .. cpp:function:: bool myMethod(int arg1, std::string arg2)

             A function with parameters and types.

          .. cpp:function:: bool myMethod(int, double)

             A function with unnamed parameters.

          .. cpp:function:: const T &MyClass::operator[](std::size_t i) const

             An overload for the indexing operator.

          .. cpp:function:: operator bool() const

             A casting operator.

          .. cpp:function:: constexpr void foo(std::string &bar[2]) noexcept

             A constexpr function.

          .. cpp:function:: MyClass::MyClass(const MyClass&) = default

             A copy constructor with default implementation.

     Function templates can also be described:

          .. cpp:function:: template<typename U> \
                            void print(U &&u)

     and function template specialisations:

          .. cpp:function:: template<> \
                            void print(int i)

 -- reStructuredText Directive: .. cpp:member:: (member) variable
          declaration
 -- reStructuredText Directive: .. cpp:var:: (member) variable
          declaration

     Describe a variable or member variable, e.g.,:

          .. cpp:member:: std::string MyClass::myMember

          .. cpp:var:: std::string MyClass::myOtherMember[N][M]

          .. cpp:member:: int a = 42

     Variable templates can also be described:

          .. cpp:member:: template<class T> \
                          constexpr T pi = T(3.1415926535897932385)

 -- reStructuredText Directive: .. cpp:type:: typedef declaration

 -- reStructuredText Directive: .. cpp:type:: name

 -- reStructuredText Directive: .. cpp:type:: type alias declaration

     Describe a type as in a typedef declaration, a type alias
     declaration, or simply the name of a type with unspecified type,
     e.g.,:

          .. cpp:type:: std::vector<int> MyList

             A typedef-like declaration of a type.

          .. cpp:type:: MyContainer::const_iterator

             Declaration of a type alias with unspecified type.

          .. cpp:type:: MyType = std::unordered_map<int, std::string>

             Declaration of a type alias.

     A type alias can also be templated:

          .. cpp:type:: template<typename T> \
                        MyContainer = std::vector<T>

     The example are rendered as follows.

      -- C++ Type: typedef std::vector<int> MyList

          A typedef-like declaration of a type.

      -- C++ Type: MyContainer::const_iterator

          Declaration of a type alias with unspecified type.

      -- C++ Type: using MyType = std::unordered_map<int, std::string>

          Declaration of a type alias.

      -- C++ Type: template<typename T>using MyContainer =
               std::vector<*note T: 1b0.>

 -- reStructuredText Directive: .. cpp:enum:: unscoped enum declaration
 -- reStructuredText Directive: .. cpp:enum-struct:: scoped enum
          declaration
 -- reStructuredText Directive: .. cpp:enum-class:: scoped enum
          declaration

     Describe a (scoped) enum, possibly with the underlying type
     specified.  Any enumerators declared inside an unscoped enum will
     be declared both in the enum scope and in the parent scope.
     Examples:

          .. cpp:enum:: MyEnum

             An unscoped enum.

          .. cpp:enum:: MySpecificEnum : long

             An unscoped enum with specified underlying type.

          .. cpp:enum-class:: MyScopedEnum

             A scoped enum.

          .. cpp:enum-struct:: protected MyScopedVisibilityEnum : std::underlying_type<MySpecificEnum>::type

             A scoped enum with non-default visibility, and with a specified underlying type.

 -- reStructuredText Directive: .. cpp:enumerator:: name

 -- reStructuredText Directive: .. cpp:enumerator:: name = constant

     Describe an enumerator, optionally with its value defined, e.g.,:

          .. cpp:enumerator:: MyEnum::myEnumerator

          .. cpp:enumerator:: MyEnum::myOtherEnumerator = 42

 -- reStructuredText Directive: .. cpp:concept:: template-parameter-list
          name

          Warning: The support for concepts is experimental.  It is
          based on the current draft standard and the Concepts Technical
          Specification.  The features may change as they evolve.

     Describe a concept.  It must have exactly 1 template parameter
     list.  The name may be a nested name.  Example:

          .. cpp:concept:: template<typename It> std::Iterator

             Proxy to an element of a notional sequence that can be compared,
             indirected, or incremented.

             **Notation**

             .. cpp:var:: It r

                An lvalue.

             **Valid Expressions**

             - :cpp:expr:`*r`, when :cpp:expr:`r` is dereferenceable.
             - :cpp:expr:`++r`, with return type :cpp:expr:`It&`, when :cpp:expr:`r` is incrementable.

     This will render as follows:

      -- C++ Concept: template<typename It>bool std::Iterator

          Proxy to an element of a notional sequence that can be
          compared, indirected, or incremented.

          `Notation'

           -- Var: *note It: 1b6. r

               An lvalue.

          `Valid Expressions'

             - >>:cpp:expr:‘*r‘<<, when >>:cpp:expr:‘r‘<< is
               dereferenceable.

             - >>:cpp:expr:‘++r‘<<, with return type
               >>:cpp:expr:‘It&‘<<, when >>:cpp:expr:‘r‘<< is
               incrementable.

* Menu:

* Options: Options<5>.


File: sphinx.info,  Node: Options<5>,  Up: Directives<2>

7.5.1.1 Options
...............

Some directives support options:

   - ‘:noindex:’, see *note Basic Markup: 10f.

   - ‘:tparam-line-spec:’, for templated declarations.  If specified,
     each template parameter will be rendered on a separate line.


File: sphinx.info,  Node: Constrained Templates,  Next: Inline Expressions and Tpes,  Prev: Directives<2>,  Up: The C++ Domain

7.5.2 Constrained Templates
---------------------------

     Warning: The support for concepts is experimental.  It is based on
     the current draft standard and the Concepts Technical
     Specification.  The features may change as they evolve.

     Note: Sphinx does not currently support ‘requires’ clauses.

* Menu:

* Placeholders::
* Template Introductions::


File: sphinx.info,  Node: Placeholders,  Next: Template Introductions,  Up: Constrained Templates

7.5.2.1 Placeholders
....................

Declarations may use the name of a concept to introduce constrained
template parameters, or the keyword ‘auto’ to introduce unconstrained
template parameters:

     .. cpp:function:: void f(auto &&arg)

        A function template with a single unconstrained template parameter.

     .. cpp:function:: void f(std::Iterator it)

        A function template with a single template parameter, constrained by the
        Iterator concept.


File: sphinx.info,  Node: Template Introductions,  Prev: Placeholders,  Up: Constrained Templates

7.5.2.2 Template Introductions
..............................

Simple constrained function or class templates can be declared with a
‘template introduction’ instead of a template parameter list:

     .. cpp:function:: std::Iterator{It} void advance(It &it)

         A function template with a template parameter constrained to be an Iterator.

     .. cpp:class:: std::LessThanComparable{T} MySortedContainer

         A class template with a template parameter constrained to be LessThanComparable.

They are rendered as follows.

 -- C++ Function: std::*note Iterator: 1b6.{It}void advance (It &it)

     A function template with a template parameter constrained to be an
     Iterator.

 -- C++ Class: std::LessThanComparable{T}MySortedContainer

     A class template with a template parameter constrained to be
     LessThanComparable.

Note however that no checking is performed with respect to parameter
compatibility.  E.g., ‘Iterator{A, B, C}’ will be accepted as an
introduction even though it would not be valid C++.


File: sphinx.info,  Node: Inline Expressions and Tpes,  Next: Namespacing,  Prev: Constrained Templates,  Up: The C++ Domain

7.5.3 Inline Expressions and Tpes
---------------------------------

 -- reStructuredText Role: :cpp:expr:

          A role for inserting a C++ expression or type as inline text.
          For example:

               .. cpp:var:: int a = 42

               .. cpp:function:: int f(int i)

               An expression: :cpp:expr:`a * f(a)`.
               A type: :cpp:expr:`const MySortedContainer<int>&`.

          will be rendered as follows:

      -- Var: int a = 42

      -- C++ Function: int f (int i)

     An expression: >>:cpp:expr:‘a * f(a)‘<<.  A type:
     >>:cpp:expr:‘const MySortedContainer<int>&‘<<.


File: sphinx.info,  Node: Namespacing,  Next: Info field lists<2>,  Prev: Inline Expressions and Tpes,  Up: The C++ Domain

7.5.4 Namespacing
-----------------

Declarations in the C++ domain are as default placed in global scope.
The current scope can be changed using three namespace directives.  They
manage a stack declarations where ‘cpp:namespace’ resets the stack and
changes a given scope.  The ‘cpp:namespace-push’ directive changes the
scope to a given inner scope of the current one.  The
‘cpp:namespace-pop’ directive undos the most recent ‘cpp:namespace-push’
directive.

 -- reStructuredText Directive: .. cpp:namespace:: scope specification

     Changes the current scope for the subsequent objects to the given
     scope, and resets the namespace directive stack.  Note that the
     namespace does not need to correspond to C++ namespaces, but can
     end in names of classes, e.g.,:

          .. cpp:namespace:: Namespace1::Namespace2::SomeClass::AnInnerClass

     All subsequent objects will be defined as if their name were
     declared with the scope prepended.  The subsequent cross-references
     will be searched for starting in the current scope.

     Using ‘NULL’, ‘0’, or ‘nullptr’ as the scope will change to global
     scope.

     A namespace declaration can also be templated, e.g.,:

          .. cpp:class:: template<typename T> \
                         std::vector

          .. cpp:namespace:: template<typename T> std::vector

          .. cpp:function:: std::size_t size() const

     declares ‘size’ as a member function of the class template
     ‘std::vector’.  Equivalently this could have been declared using:

          .. cpp:class:: template<typename T> \
                         std::vector

             .. cpp:function:: std::size_t size() const

     or::

          .. cpp:class:: template<typename T> \
                         std::vector

 -- reStructuredText Directive: .. cpp:namespace-push:: scope
          specification

     Change the scope relatively to the current scope.  For example,
     after:

          .. cpp:namespace:: A::B

          .. cpp:namespace-push:: C::D

     the current scope will be ‘A::B::C::D’.

 -- reStructuredText Directive: .. cpp:namespace-pop::

     Undo the previous ‘cpp:namespace-push’ directive (`not' just pop a
     scope).  For example, after:

          .. cpp:namespace:: A::B

          .. cpp:namespace-push:: C::D

          .. cpp:namespace-pop::

     the current scope will be ‘A::B’ (`not' ‘A::B::C’).

     If no previous ‘cpp:namespace-push’ directive has been used, but
     only a ‘cpp:namespace’ directive, then the current scope will be
     reset to global scope.  That is, ‘.. cpp:namespace:: A::B’ is
     equivalent to:

          .. cpp:namespace:: nullptr

          .. cpp:namespace-push:: A::B


File: sphinx.info,  Node: Info field lists<2>,  Next: Cross-referencing,  Prev: Namespacing,  Up: The C++ Domain

7.5.5 Info field lists
----------------------

The C++ directives support the following info fields (see also *note
Info field lists: 182.):

   * ‘param’, ‘parameter’, ‘arg’, ‘argument’: Description of a
     parameter.

   * ‘tparam’: Description of a template parameter.

   * ‘returns’, ‘return’: Description of a return value.

   * ‘throws’, ‘throw’, ‘exception’: Description of a possibly thrown
     exception.


File: sphinx.info,  Node: Cross-referencing,  Next: Configuration Variables,  Prev: Info field lists<2>,  Up: The C++ Domain

7.5.6 Cross-referencing
-----------------------

These roles link to the given declaration types:

 -- reStructuredText Role: :cpp:any:
 -- reStructuredText Role: :cpp:class:
 -- reStructuredText Role: :cpp:func:
 -- reStructuredText Role: :cpp:member:
 -- reStructuredText Role: :cpp:var:
 -- reStructuredText Role: :cpp:type:
 -- reStructuredText Role: :cpp:concept:
 -- reStructuredText Role: :cpp:enum:
 -- reStructuredText Role: :cpp:enumerator:

     Reference a C++ declaration by name (see below for details).  The
     name must be properly qualified relative to the position of the
     link.

     Note on References with Templates Parameters/Arguments: Sphinx’s
     syntax to give references a custom title can interfere with linking
     to class templates, if nothing follows the closing angle bracket,
     i.e.  if the link looks like this: ‘:cpp:class:`MyClass<int>`’.
     This is interpreted as a link to ‘int’ with a title of ‘MyClass’.
     In this case, please escape the opening angle bracket with a
     backslash, like this: ‘:cpp:class:`MyClass\<int>`’.

     Note on References to Overloaded Functions: It is currently
     impossible to link to a specific version of an overloaded method.
     Currently the C++ domain is the first domain that has basic support
     for overloaded methods and until there is more data for comparison
     we don’t want to select a bad syntax to reference a specific
     overload.  Currently Sphinx will link to the first overloaded
     version of the method / function.

* Menu:

* Declarations without template parameters and template arguments::
* Templated declarations::
* (Full) Template Specialisations: Full Template Specialisations.
* Partial Template Specialisations::


File: sphinx.info,  Node: Declarations without template parameters and template arguments,  Next: Templated declarations,  Up: Cross-referencing

7.5.6.1 Declarations without template parameters and template arguments
.......................................................................

For linking to non-templated declarations the name must be a nested
name, e.g., ‘f’ or ‘MyClass::f’.


File: sphinx.info,  Node: Templated declarations,  Next: Full Template Specialisations,  Prev: Declarations without template parameters and template arguments,  Up: Cross-referencing

7.5.6.2 Templated declarations
..............................

Assume the following declarations.

 -- C++ Class: Wrapper

      -- C++ Class: template<typename TOuter>Outer

           -- C++ Class: template<typename TInner>Inner

In general the reference must include the template paraemter
declarations, e.g., ‘template\<typename TOuter> Wrapper::Outer’ (*note
template<typename TOuter> Wrapper;;Outer: 1d8.).  Currently the lookup
only succeed if the template parameter identifiers are equal strings.
That is, ‘template\<typename UOuter> Wrapper::Outer’ will not work.

The inner class template can not be directly referenced, unless the
current namespace is changed or the following shorthand is used.  If a
template parameter list is omitted, then the lookup will assume either a
template or a non-template, but not a partial template specialisation.
This means the following references work.

   - ‘Wrapper::Outer’ (*note Wrapper;;Outer: 1d8.)

   - ‘Wrapper::Outer::Inner’ (*note Wrapper;;Outer;;Inner: 1d9.)

   - ‘template\<typename TInner> Wrapper::Outer::Inner’ (*note
     template<typename TInner> Wrapper;;Outer;;Inner: 1d9.)


File: sphinx.info,  Node: Full Template Specialisations,  Next: Partial Template Specialisations,  Prev: Templated declarations,  Up: Cross-referencing

7.5.6.3 (Full) Template Specialisations
.......................................

Assume the following declarations.

 -- C++ Class: template<typename TOuter>Outer

      -- C++ Class: template<typename TInner>Inner

 -- C++ Class: template<>Outer<int>

      -- C++ Class: template<typename TInner>Inner

      -- C++ Class: template<>Inner<bool>

In general the reference must include a template parameter list for each
template argument list.  The full specialisation above can therefore be
referenced with ‘template\<> Outer\<int>’ (*note template<> Outer<int>:
1dd.) and ‘template\<> template\<> Outer\<int>::Inner\<bool>’ (*note
template<> template<> Outer<int>;;Inner<bool>: 1df.).  As a shorthand
the empty template parameter list can be omitted, e.g., ‘Outer\<int>’
(*note Outer<int>: 1dd.) and ‘Outer\<int>::Inner\<bool>’ (*note
Outer<int>;;Inner<bool>: 1df.).


File: sphinx.info,  Node: Partial Template Specialisations,  Prev: Full Template Specialisations,  Up: Cross-referencing

7.5.6.4 Partial Template Specialisations
........................................

Assume the following declaration.

 -- C++ Class: template<typename T>Outer<*note T: 1e1. *>

References to partial specialisations must always include the template
parameter lists, e.g., ‘template\<typename T> Outer\<T*>’ (*note
template<typename T> Outer<T*>: 1e1.).  Currently the lookup only
succeed if the template parameter identifiers are equal strings.


File: sphinx.info,  Node: Configuration Variables,  Prev: Cross-referencing,  Up: The C++ Domain

7.5.7 Configuration Variables
-----------------------------

See *note Options for the C++ domain: 1e3.


File: sphinx.info,  Node: The Standard Domain,  Next: The JavaScript Domain,  Prev: The C++ Domain,  Up: Sphinx Domains

7.6 The Standard Domain
=======================

The so-called “standard” domain collects all markup that doesn’t warrant
a domain of its own.  Its directives and roles are not prefixed with a
domain name.

The standard domain is also where custom object descriptions, added
using the *note add_object_type(): 1e5. API, are placed.

There is a set of directives allowing documenting command-line programs:

 -- reStructuredText Directive: .. option:: name args, name args, ...

     Describes a command line argument or switch.  Option argument names
     should be enclosed in angle brackets.  Examples:

          .. option:: dest_dir

             Destination directory.

          .. option:: -m <module>, --module <module>

             Run a module as a script.

     The directive will create cross-reference targets for the given
     options, referencable by *note option: 138. (in the example case,
     you’d use something like ‘:option:`dest_dir`’, ‘:option:`-m`’, or
     ‘:option:`--module`’).

     ‘cmdoption’ directive is a deprecated alias for the ‘option’
     directive.

 -- reStructuredText Directive: .. envvar:: name

     Describes an environment variable that the documented code or
     program uses or defines.  Referencable by *note envvar: 148.

 -- reStructuredText Directive: .. program:: name

     Like *note py;currentmodule: 17e, this directive produces no
     output.  Instead, it serves to notify Sphinx that all following
     *note option: 14b. directives document options for the program
     called `name'.

     If you use *note program: 1e6, you have to qualify the references
     in your *note option: 138. roles by the program name, so if you
     have the following situation

          .. program:: rm

          .. option:: -r

             Work recursively.

          .. program:: svn

          .. option:: -r revision

             Specify the revision to work upon.

     then ‘:option:`rm -r`’ would refer to the first option, while
     ‘:option:`svn -r`’ would refer to the second one.

     The program name may contain spaces (in case you want to document
     subcommands like ‘svn add’ and ‘svn commit’ separately).

     New in version 0.5.

There is also a very generic object description directive, which is not
tied to any domain:

 -- reStructuredText Directive: .. describe:: text
 -- reStructuredText Directive: .. object:: text

     This directive produces the same formatting as the specific ones
     provided by domains, but does not create index entries or
     cross-referencing targets.  Example:

          .. describe:: PAPER

             You can set this variable to select a paper size.


File: sphinx.info,  Node: The JavaScript Domain,  Next: The reStructuredText domain,  Prev: The Standard Domain,  Up: Sphinx Domains

7.7 The JavaScript Domain
=========================

The JavaScript domain (name `js') provides the following directives:

 -- reStructuredText Directive: .. js:module:: name

     This directive sets the module name for object declarations that
     follow after.  The module name is used in the global module index
     and in cross references.  This directive does not create an object
     heading like *note py;class: 56. would, for example.

     By default, this directive will create a linkable entity and will
     cause an entry in the global module index, unless the ‘noindex’
     option is specified.  If this option is specified, the directive
     will only update the current module name.

     To clear the current module, set the module name to ‘null’ or
     ‘None’

     New in version 1.6.

 -- reStructuredText Directive: .. js:function:: name(signature)

     Describes a JavaScript function or method.  If you want to describe
     arguments as optional use square brackets as *note documented: 181.
     for Python signatures.

     You can use fields to give more details about arguments and their
     expected types, errors which may be thrown by the function, and the
     value being returned:

          .. js:function:: $.getJSON(href, callback[, errback])

             :param string href: An URI to the location of the resource.
             :param callback: Gets called with the object.
             :param errback:
                 Gets called in case the request fails. And a lot of other
                 text so we need multiple lines.
             :throws SomeError: For whatever reason in that case.
             :returns: Something.

     This is rendered as:

           -- JavaScript Function: $.getJSON (href, callback[, errback])


               Arguments:

                  * ‘href’ (‘string’) – An URI to the location of the
                    resource.

                  * ‘callback’ – Gets called with the object.

                  * ‘errback’ – Gets called in case the request fails.
                    And a lot of other text so we need multiple lines.


               Throws: ‘SomeError’ – For whatever reason in that case.


               Returns: Something.

 -- reStructuredText Directive: .. js:method:: name(signature)

     This directive is an alias for *note js;function: 1eb, however it
     describes a function that is implemented as a method on a class
     object.

     New in version 1.6.

 -- reStructuredText Directive: .. js:class:: name

     Describes a constructor that creates an object.  This is basically
     like a function but will show up with a ‘class’ prefix:

          .. js:class:: MyAnimal(name[, age])

             :param string name: The name of the animal
             :param number age: an optional age for the animal

     This is rendered as:

           -- JavaScript Class: MyAnimal (name[, age])


               Arguments:

                  * ‘name’ (‘string’) – The name of the animal

                  * ‘age’ (‘number’) – an optional age for the animal

 -- reStructuredText Directive: .. js:data:: name

     Describes a global variable or constant.

 -- reStructuredText Directive: .. js:attribute:: object.name

     Describes the attribute `name' of `object'.
These roles are provided to refer to the described objects:

 -- reStructuredText Role: :js:mod:
 -- reStructuredText Role: :js:func:
 -- reStructuredText Role: :js:meth:
 -- reStructuredText Role: :js:class:
 -- reStructuredText Role: :js:data:
 -- reStructuredText Role: :js:attr:


File: sphinx.info,  Node: The reStructuredText domain,  Next: More domains,  Prev: The JavaScript Domain,  Up: Sphinx Domains

7.8 The reStructuredText domain
===============================

The reStructuredText domain (name `rst') provides the following
directives:

 -- reStructuredText Directive: .. rst:directive:: name

     Describes a reST directive.  The `name' can be a single directive
     name or actual directive syntax (‘..’ prefix and ‘::’ suffix) with
     arguments that will be rendered differently.  For example:

          .. rst:directive:: foo

             Foo description.

          .. rst:directive:: .. bar:: baz

             Bar description.

     will be rendered as:

           -- reStructuredText Directive: .. foo::

               Foo description.

           -- reStructuredText Directive: .. bar:: baz

               Bar description.

 -- reStructuredText Directive: .. rst:role:: name

     Describes a reST role.  For example:

          .. rst:role:: foo

             Foo description.

     will be rendered as:

           -- reStructuredText Role: :foo:

               Foo description.
These roles are provided to refer to the described objects:

 -- reStructuredText Role: :rst:dir:
 -- reStructuredText Role: :rst:role:


File: sphinx.info,  Node: More domains,  Prev: The reStructuredText domain,  Up: Sphinx Domains

7.9 More domains
================

The sphinx-contrib(1) repository contains more domains available as
extensions; currently Ada(2), CoffeeScript(3), Erlang(4), HTTP(5),
Lasso(6), MATLAB(7), PHP(8), and Ruby(9) domains.  Also available are
domains for Chapel(10), Common Lisp(11), dqn(12), Go(13), Jinja(14),
Operation(15), and Scala(16).

   ---------- Footnotes ----------

   (1) https://bitbucket.org/birkenfeld/sphinx-contrib/

   (2) https://pypi.python.org/pypi/sphinxcontrib-adadomain

   (3) https://pypi.python.org/pypi/sphinxcontrib-coffee

   (4) https://pypi.python.org/pypi/sphinxcontrib-erlangdomain

   (5) https://pypi.python.org/pypi/sphinxcontrib-httpdomain

   (6) https://pypi.python.org/pypi/sphinxcontrib-lassodomain

   (7) https://pypi.python.org/pypi/sphinxcontrib-matlabdomain

   (8) https://pypi.python.org/pypi/sphinxcontrib-phpdomain

   (9) 
https://bitbucket.org/birkenfeld/sphinx-contrib/src/default/rubydomain

   (10) https://pypi.python.org/pypi/sphinxcontrib-chapeldomain

   (11) https://pypi.python.org/pypi/sphinxcontrib-cldomain

   (12) https://pypi.python.org/pypi/sphinxcontrib-dqndomain

   (13) https://pypi.python.org/pypi/sphinxcontrib-golangdomain

   (14) https://pypi.python.org/pypi/sphinxcontrib-jinjadomain

   (15) https://pypi.python.org/pypi/sphinxcontrib-operationdomain

   (16) https://pypi.python.org/pypi/sphinxcontrib-scaladomain


File: sphinx.info,  Node: Available builders,  Next: The build configuration file,  Prev: Sphinx Domains,  Up: Top

8 Available builders
********************

These are the built-in Sphinx builders.  More builders can be added by
*note extensions: 204.

The builder’s “name” must be given to the `-b' command-line option of
‘sphinx-build’ to select a builder.

 -- Class: sphinx.builders.html.StandaloneHTMLBuilder

     This is the standard HTML builder.  Its output is a directory with
     HTML files, complete with style sheets and optionally the reST
     sources.  There are quite a few configuration values that customize
     the output of this builder, see the chapter *note Options for HTML
     output: 206. for details.

      -- Attribute: name = 'html'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/svg+xml',
               'image/png', 'image/gif', 'image/jpeg']

 -- Class: sphinx.builders.html.DirectoryHTMLBuilder

     This is a subclass of the standard HTML builder.  Its output is a
     directory with HTML files, where each file is called ‘index.html’
     and placed in a subdirectory named like its page name.  For
     example, the document ‘markup/rest.rst’ will not result in an
     output file ‘markup/rest.html’, but ‘markup/rest/index.html’.  When
     generating links between pages, the ‘index.html’ is omitted, so
     that the URL would look like ‘markup/rest/’.

      -- Attribute: name = 'dirhtml'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/svg+xml',
               'image/png', 'image/gif', 'image/jpeg']

     New in version 0.6.

 -- Class: sphinx.builders.html.SingleFileHTMLBuilder

     This is an HTML builder that combines the whole project in one
     output file.  (Obviously this only works with smaller projects.)
     The file is named like the master document.  No indices will be
     generated.

      -- Attribute: name = 'singlehtml'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/svg+xml',
               'image/png', 'image/gif', 'image/jpeg']

     New in version 1.0.

 -- Class: sphinx.builders.htmlhelp.HTMLHelpBuilder

     This builder produces the same output as the standalone HTML
     builder, but also generates HTML Help support files that allow the
     Microsoft HTML Help Workshop to compile them into a CHM file.

      -- Attribute: name = 'htmlhelp'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/png', 'image/gif',
               'image/jpeg']

 -- Class: sphinx.builders.qthelp.QtHelpBuilder

     This builder produces the same output as the standalone HTML
     builder, but also generates Qt help(1) collection support files
     that allow the Qt collection generator to compile them.

      -- Attribute: name = 'qthelp'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/svg+xml',
               'image/png', 'image/gif', 'image/jpeg']

 -- Class: sphinx.builders.applehelp.AppleHelpBuilder

     This builder produces an Apple Help Book based on the same output
     as the standalone HTML builder.

     If the source directory contains any ‘.lproj’ folders, the one
     corresponding to the selected language will have its contents
     merged with the generated output.  These folders will be ignored by
     all other documentation types.

     In order to generate a valid help book, this builder requires the
     command line tool ‘hiutil’, which is only available on Mac OS X
     10.6 and above.  You can disable the indexing step by setting *note
     applehelp_disable_external_tools: 21b. to ‘True’, in which case the
     output will not be valid until ‘hiutil’ has been run on all of the
     ‘.lproj’ folders within the bundle.

      -- Attribute: name = 'applehelp'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/png', 'image/gif',
               'image/jpeg', 'image/tiff', 'image/jp2', 'image/svg+xml']

     New in version 1.3.

 -- Class: sphinx.builders.devhelp.DevhelpBuilder

     This builder produces the same output as the standalone HTML
     builder, but also generates GNOME Devhelp(2) support file that
     allows the GNOME Devhelp reader to view them.

      -- Attribute: name = 'devhelp'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/png', 'image/gif',
               'image/jpeg']

 -- Class: sphinx.builders.epub3.Epub3Builder

     This builder produces the same output as the standalone HTML
     builder, but also generates an `epub' file for ebook readers.  See
     *note Epub info: 224. for details about it.  For definition of the
     epub format, have a look at ‘http://idpf.org/epub’ or
     ‘https://en.wikipedia.org/wiki/EPUB’.  The builder creates `EPUB 3'
     files.

      -- Attribute: name = 'epub'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/svg+xml',
               'image/png', 'image/gif', 'image/jpeg']

     New in version 1.4.

     Changed in version 1.5: Since Sphinx-1.5, the epub3 builder is used
     for the default builder of epub.

 -- Class: sphinx.builders.latex.LaTeXBuilder

     This builder produces a bunch of LaTeX files in the output
     directory.  You have to specify which documents are to be included
     in which LaTeX files via the *note latex_documents: 228.
     configuration value.  There are a few configuration values that
     customize the output of this builder, see the chapter *note Options
     for LaTeX output: 229. for details.

          Note: The produced LaTeX file uses several LaTeX packages that
          may not be present in a “minimal” TeX distribution
          installation.  For example, on Ubuntu, the following packages
          need to be installed for successful PDF builds:

             * texlive-latex-recommended

             * texlive-fonts-recommended

             * texlive-latex-extra

             * latexmk (for ‘make latexpdf’)

          Sphinx will use ‘xcolor.sty’ if present: recent Ubuntu
          distributions have ‘xcolor.sty’ included in latex-recommended,
          earlier ones have it in latex-xcolor.  Unicode engines will
          need texlive-luatex or texlive-xetex.

          The testing of Sphinx LaTeX is done on Ubuntu trusty with the
          above mentioned packages, which are from a TeXLive 2013
          snapshot dated February 2014.

          Changed in version 1.6: Formerly, testing had been done for
          some years on Ubuntu precise (based on TeXLive 2009).

          Changed in version 1.6: Use of ‘latexmk’ for ‘make latexpdf’
          on GNU/Linux and Mac OS X

          Since 1.6, ‘make latexpdf’ (or ‘make -C "<builddir>/latex"’
          after a ‘sphinx-build’ run) uses ‘latexmk’ (not on Windows).
          One can pass to ‘latexmk’ options via the ‘LATEXMKOPTS’
          Makefile variable.  For example:

               make latexpdf LATEXMKOPTS="-silent"

          reduces console output to a minimum.  Also, if ‘latexmk’
          version is 4.52b or higher (Jan 17) and ‘xelatex’ is the *note
          latex_engine: a6, then ‘LATEXMKOPTS="-xelatex"’ will speed up
          PDF builds.

          To pass options directly to the ‘(pdf|xe|lua)latex’
          executable, use variable ‘LATEXOPTS’ (for example
          ‘LATEXOPTS="--interaction=nonstopmode"’).

      -- Attribute: name = 'latex'

      -- Attribute: format = 'latex'

      -- Attribute: supported_image_types = ['application/pdf',
               'image/png', 'image/jpeg']

Note that a direct PDF builder is being provided by rinohtype(3).  The
builder’s name is ‘rinoh’.  Refer to the rinohtype manual(4) for
details.

 -- Class: sphinx.builders.text.TextBuilder

     This builder produces a text file for each reST file – this is
     almost the same as the reST source, but with much of the markup
     stripped for better readability.

      -- Attribute: name = 'text'

      -- Attribute: format = 'text'

      -- Attribute: supported_image_types = []

     New in version 0.4.

 -- Class: sphinx.builders.manpage.ManualPageBuilder

     This builder produces manual pages in the groff format.  You have
     to specify which documents are to be included in which manual pages
     via the *note man_pages: 232. configuration value.

      -- Attribute: name = 'man'

      -- Attribute: format = 'man'

      -- Attribute: supported_image_types = []

     New in version 1.0.

 -- Class: sphinx.builders.texinfo.TexinfoBuilder

     This builder produces Texinfo files that can be processed into Info
     files by the ‘makeinfo’ program.  You have to specify which
     documents are to be included in which Texinfo files via the *note
     texinfo_documents: 237. configuration value.

     The Info format is the basis of the on-line help system used by GNU
     Emacs and the terminal-based program ‘info’.  See *note Texinfo
     info: 238. for more details.  The Texinfo format is the official
     documentation system used by the GNU project.  More information on
     Texinfo can be found at ‘https://www.gnu.org/software/texinfo/’.

      -- Attribute: name = 'texinfo'

      -- Attribute: format = 'texinfo'

      -- Attribute: supported_image_types = ['image/png', 'image/jpeg',
               'image/gif']

     New in version 1.1.

 -- Class: sphinx.builders.html.SerializingHTMLBuilder

     This builder uses a module that implements the Python serialization
     API (‘pickle’, ‘simplejson’, ‘phpserialize’, and others) to dump
     the generated HTML documentation.  The pickle builder is a subclass
     of it.

     A concrete subclass of this builder serializing to the PHP
     serialization(5) format could look like this:

          import phpserialize

          class PHPSerializedBuilder(SerializingHTMLBuilder):
              name = 'phpserialized'
              implementation = phpserialize
              out_suffix = '.file.phpdump'
              globalcontext_filename = 'globalcontext.phpdump'
              searchindex_filename = 'searchindex.phpdump'

      -- Attribute: implementation

          A module that implements ‘dump()’, ‘load()’, ‘dumps()’ and
          ‘loads()’ functions that conform to the functions with the
          same names from the pickle module.  Known modules implementing
          this interface are ‘simplejson’, ‘phpserialize’, ‘plistlib’,
          and others.

      -- Attribute: out_suffix

          The suffix for all regular files.

      -- Attribute: globalcontext_filename

          The filename for the file that contains the “global context”.
          This is a dict with some general configuration values such as
          the name of the project.

      -- Attribute: searchindex_filename

          The filename for the search index Sphinx generates.

     See *note Serialization builder details: 241. for details about the
     output format.

     New in version 0.5.

 -- Class: sphinx.builders.html.PickleHTMLBuilder

     This builder produces a directory with pickle files containing
     mostly HTML fragments and TOC information, for use of a web
     application (or custom postprocessing tool) that doesn’t use the
     standard HTML templates.

     See *note Serialization builder details: 241. for details about the
     output format.

      -- Attribute: name = 'pickle'

          The old name ‘web’ still works as well.

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/svg+xml',
               'image/png', 'image/gif', 'image/jpeg']

     The file suffix is ‘.fpickle’.  The global context is called
     ‘globalcontext.pickle’, the search index ‘searchindex.pickle’.

 -- Class: sphinx.builders.html.JSONHTMLBuilder

     This builder produces a directory with JSON files containing mostly
     HTML fragments and TOC information, for use of a web application
     (or custom postprocessing tool) that doesn’t use the standard HTML
     templates.

     See *note Serialization builder details: 241. for details about the
     output format.

      -- Attribute: name = 'json'

      -- Attribute: format = 'html'

      -- Attribute: supported_image_types = ['image/svg+xml',
               'image/png', 'image/gif', 'image/jpeg']

     The file suffix is ‘.fjson’.  The global context is called
     ‘globalcontext.json’, the search index ‘searchindex.json’.

     New in version 0.5.

 -- Class: sphinx.builders.gettext.MessageCatalogBuilder

     This builder produces gettext-style message catalogs.  Each
     top-level file or subdirectory grows a single ‘.pot’ catalog
     template.

     See the documentation on *note Internationalization: 24b. for
     further reference.

      -- Attribute: name = 'gettext'

      -- Attribute: format = ''

      -- Attribute: supported_image_types = []

     New in version 1.1.

 -- Class: sphinx.builders.changes.ChangesBuilder

     This builder produces an HTML overview of all *note versionadded:
     116, *note versionchanged: 117. and *note deprecated: 118.
     directives for the current *note version: 82.  This is useful to
     generate a ChangeLog file, for example.

      -- Attribute: name = 'changes'

      -- Attribute: format = ''

      -- Attribute: supported_image_types = []

 -- Class: sphinx.builders.dummy.DummyBuilder

     This builder produces no output.  The input is only parsed and
     checked for consistency.  This is useful for linting purposes.

      -- Attribute: name = 'dummy'

      -- Attribute: supported_image_types = []

     New in version 1.4.

 -- Class: sphinx.builders.linkcheck.CheckExternalLinksBuilder

     This builder scans all documents for external links, tries to open
     them with ‘requests’, and writes an overview which ones are broken
     and redirected to standard output and to ‘output.txt’ in the output
     directory.

      -- Attribute: name = 'linkcheck'

      -- Attribute: format = ''

      -- Attribute: supported_image_types = []

     Changed in version 1.5: Since Sphinx-1.5, the linkcheck builder
     comes to use requests module.

 -- Class: sphinx.builders.xml.XMLBuilder

     This builder produces Docutils-native XML files.  The output can be
     transformed with standard XML tools such as XSLT processors into
     arbitrary final forms.

      -- Attribute: name = 'xml'

      -- Attribute: format = 'xml'

      -- Attribute: supported_image_types = []

     New in version 1.2.

 -- Class: sphinx.builders.xml.PseudoXMLBuilder

     This builder is used for debugging the Sphinx/Docutils “Reader to
     Transform to Writer” pipeline.  It produces compact pretty-printed
     “pseudo-XML”, files where nesting is indicated by indentation (no
     end-tags).  External attributes for all elements are output, and
     internal attributes for any leftover “pending” elements are also
     given.

      -- Attribute: name = 'pseudoxml'

      -- Attribute: format = 'pseudoxml'

      -- Attribute: supported_image_types = []

     New in version 1.2.

Built-in Sphinx extensions that offer more builders are:

   * *note doctest: 1c.

   * *note coverage: 1b.

* Menu:

* Serialization builder details::

   ---------- Footnotes ----------

   (1) https://doc.qt.io/qt-4.8/qthelp-framework.html

   (2) https://wiki.gnome.org/Apps/Devhelp

   (3) https://github.com/brechtm/rinohtype

   (4) http://www.mos6581.org/rinohtype/quickstart.html#sphinx-builder

   (5) https://pypi.python.org/pypi/phpserialize


File: sphinx.info,  Node: Serialization builder details,  Up: Available builders

8.1 Serialization builder details
=================================

All serialization builders outputs one file per source file and a few
special files.  They also copy the reST source files in the directory
‘_sources’ under the output directory.

The *note PickleHTMLBuilder: 242. is a builtin subclass that implements
the pickle serialization interface.

The files per source file have the extensions of *note out_suffix: 23e,
and are arranged in directories just as the source files are.  They
unserialize to a dictionary (or dictionary like structure) with these
keys:

‘body’

     The HTML “body” (that is, the HTML rendering of the source file),
     as rendered by the HTML translator.

‘title’

     The title of the document, as HTML (may contain markup).

‘toc’

     The table of contents for the file, rendered as an HTML ‘<ul>’.

‘display_toc’

     A boolean that is ‘True’ if the ‘toc’ contains more than one entry.

‘current_page_name’

     The document name of the current file.

‘parents’, ‘prev’ and ‘next’

     Information about related chapters in the TOC tree.  Each relation
     is a dictionary with the keys ‘link’ (HREF for the relation) and
     ‘title’ (title of the related document, as HTML). ‘parents’ is a
     list of relations, while ‘prev’ and ‘next’ are a single relation.

‘sourcename’

     The name of the source file under ‘_sources’.

The special files are located in the root output directory.  They are:

*note SerializingHTMLBuilder.globalcontext_filename: 23f.

     A pickled dict with these keys:

     ‘project’, ‘copyright’, ‘release’, ‘version’

          The same values as given in the configuration file.

     ‘style’

          *note html_style: 263.

     ‘last_updated’

          Date of last build.

     ‘builder’

          Name of the used builder, in the case of pickles this is
          always ‘'pickle'’.

     ‘titles’

          A dictionary of all documents’ titles, as HTML strings.

*note SerializingHTMLBuilder.searchindex_filename: 240.

     An index that can be used for searching the documentation.  It is a
     pickled list with these entries:

        * A list of indexed docnames.

        * A list of document titles, as HTML strings, in the same order
          as the first list.

        * A dict mapping word roots (processed by an English-language
          stemmer) to a list of integers, which are indices into the
          first list.

‘environment.pickle’

     The build environment.  This is always a pickle file, independent
     of the builder and a copy of the environment that was used when the
     builder was started.

          Todo: Document common members.

     Unlike the other pickle files this pickle file requires that the
     ‘sphinx’ package is available on unpickling.


File: sphinx.info,  Node: The build configuration file,  Next: Example of configuration file,  Prev: Available builders,  Up: Top

9 The build configuration file
******************************

The *note configuration directory: 47. must contain a file named
‘conf.py’.  This file (containing Python code) is called the “build
configuration file” and contains (almost) all configuration needed to
customize Sphinx input and output behavior.

     An optional file docutils.conf(1) can be added to the configuration
     directory to adjust Docutils(2) configuration if not otherwise
     overriden or set by Sphinx.

The configuration file is executed as Python code at build time (using
‘execfile()’, and with the current directory set to its containing
directory), and therefore can execute arbitrarily complex code.  Sphinx
then reads simple names from the file’s namespace as its configuration.

Important points to note:

   * If not otherwise documented, values must be strings, and their
     default is the empty string.

   * The term “fully-qualified name” refers to a string that names an
     importable Python object inside a module; for example, the FQN
     ‘"sphinx.builders.Builder"’ means the ‘Builder’ class in the
     ‘sphinx.builders’ module.

   * Remember that document names use ‘/’ as the path separator and
     don’t contain the file name extension.

   * Since ‘conf.py’ is read as a Python file, the usual rules apply for
     encodings and Unicode support: declare the encoding using an
     encoding cookie (a comment like ‘# -*- coding: utf-8 -*-’) and use
     Unicode string literals when you include non-ASCII characters in
     configuration values.

   * The contents of the config namespace are pickled (so that Sphinx
     can find out when configuration changes), so it may not contain
     unpickleable values – delete them from the namespace with ‘del’ if
     appropriate.  Modules are removed automatically, so you don’t need
     to ‘del’ your imports after use.
   * There is a special object named ‘tags’ available in the config
     file.  It can be used to query and change the tags (see *note
     Including content based on tags: 16a.).  Use ‘tags.has('tag')’ to
     query, ‘tags.add('tag')’ and ‘tags.remove('tag')’ to change.  Only
     tags set via the ‘-t’ command-line option or via ‘tags.add('tag')’
     can be queried using ‘tags.has('tag')’.  Note that the current
     builder tag is not available in ‘conf.py’, as it is created `after'
     the builder is initialized.

See also
........

Additional configurations, such as adding stylesheets, javascripts,
builders, etc.  can be made through the *note Application API: 266.

* Menu:

* General configuration::
* Project information::
* Options for internationalization::
* Options for HTML output::
* Options for HTML help output::
* Options for Apple Help output::
* Options for epub output::
* Options for LaTeX output::
* Options for text output::
* Options for manual page output::
* Options for Texinfo output::
* Options for QtHelp output::
* Options for the linkcheck builder::
* Options for the XML builder::
* Options for the C++ domain::

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/user/config.html

   (2) http://docutils.sourceforge.net/


File: sphinx.info,  Node: General configuration,  Next: Project information,  Up: The build configuration file

9.1 General configuration
=========================

 -- Configuration Value: extensions

     A list of strings that are module names of *note Sphinx Extensions:
     204.  These can be extensions coming with Sphinx (named
     ‘sphinx.ext.*’) or custom ones.

     Note that you can extend ‘sys.path’ within the conf file if your
     extensions live in another directory – but make sure you use
     absolute paths.  If your extension path is relative to the *note
     configuration directory: 47, use ‘os.path.abspath()’ like so:

          import sys, os

          sys.path.append(os.path.abspath('sphinxext'))

          extensions = ['extname']

     That way, you can load an extension called ‘extname’ from the
     subdirectory ‘sphinxext’.

     The configuration file itself can be an extension; for that, you
     only need to provide a ‘setup()’ function in it.

 -- Configuration Value: source_suffix

     The file extensions of source files.  Sphinx considers the files
     with this suffix as sources.  This value can be a dictionary
     mapping file extensions to file types.  For example:

          source_suffix = {
              '.rst': 'restructuredtext',
              '.txt': 'restructuredtext',
              '.md': 'markdown',
          }

     By default, Sphinx only supports ‘'restrcturedtext'’ file type.
     You can add a new file type using source parser extensions.  Please
     read a document of the extension to know what file type the
     extension supports.

     This also allows a list of file extensions.  In that case, Sphinx
     conciders that all they are ‘'restructuredtext'’.  Default is
     ‘{'.rst': 'restructuredtext'}’.

          Note: file extensions have to start with dot (like ‘.rst’).

     Changed in version 1.3: Can now be a list of extensions.

     Changed in version 1.8: Support file type mapping

 -- Configuration Value: source_encoding

     The encoding of all reST source files.  The recommended encoding,
     and the default value, is ‘'utf-8-sig'’.

     New in version 0.5: Previously, Sphinx accepted only UTF-8 encoded
     sources.

 -- Configuration Value: source_parsers

     If given, a dictionary of parser classes for different source
     suffices.  The keys are the suffix, the values can be either a
     class or a string giving a fully-qualified name of a parser class.
     The parser class can be either ‘docutils.parsers.Parser’ or *note
     sphinx.parsers.Parser: 269.  Files with a suffix that is not in the
     dictionary will be parsed with the default reStructuredText parser.

     For example:

          source_parsers = {'.md': 'recommonmark.parser.CommonMarkParser'}

          Note: Read more about how to use Markdown with Sphinx at *note
          Markdown support: 26a.

     New in version 1.3.

     Deprecated since version 1.8: Now Sphinx provides an API
     ‘Sphinx.add_source_parser()’ to register a source parser.  Please
     use it instead.

 -- Configuration Value: master_doc

     The document name of the “master” document, that is, the document
     that contains the root *note toctree: 10a. directive.  Default is
     ‘'contents'’.

 -- Configuration Value: exclude_patterns

     A list of glob-style patterns that should be excluded when looking
     for source files.  (1) They are matched against the source file
     names relative to the source directory, using slashes as directory
     separators on all platforms.

     Example patterns:

        - ‘'library/xml.rst'’ – ignores the ‘library/xml.rst’ file
          (replaces entry in ‘unused_docs’)

        - ‘'library/xml'’ – ignores the ‘library/xml’ directory

        - ‘'library/xml*'’ – ignores all files and directories starting
          with ‘library/xml’

        - ‘'**/.svn'’ – ignores all ‘.svn’ directories

     *note exclude_patterns: 10c. is also consulted when looking for
     static files in *note html_static_path: 26b. and *note
     html_extra_path: 26c.

     New in version 1.0.

 -- Configuration Value: templates_path

     A list of paths that contain extra templates (or templates that
     overwrite builtin/theme-specific templates).  Relative paths are
     taken as relative to the configuration directory.

     Changed in version 1.3: As these files are not meant to be built,
     they are automatically added to *note exclude_patterns: 10c.

 -- Configuration Value: template_bridge

     A string with the fully-qualified name of a callable (or simply a
     class) that returns an instance of *note TemplateBridge: 26f.  This
     instance is then used to render HTML documents, and possibly the
     output of other builders (currently the changes builder).  (Note
     that the template bridge must be made theme-aware if HTML themes
     are to be used.)

 -- Configuration Value: rst_epilog

     A string of reStructuredText that will be included at the end of
     every source file that is read.  This is the right place to add
     substitutions that should be available in every file.  An example:

          rst_epilog = """
          .. |psf| replace:: Python Software Foundation
          """

     New in version 0.6.

 -- Configuration Value: rst_prolog

     A string of reStructuredText that will be included at the beginning
     of every source file that is read.

     New in version 1.0.

 -- Configuration Value: primary_domain

     The name of the default *note domain: 58.  Can also be ‘None’ to
     disable a default domain.  The default is ‘'py'’.  Those objects in
     other domains (whether the domain name is given explicitly, or
     selected by a *note default-domain: 17b. directive) will have the
     domain name explicitly prepended when named (e.g., when the default
     domain is C, Python functions will be named “Python function”, not
     just “function”).

     New in version 1.0.

 -- Configuration Value: default_role

     The name of a reST role (builtin or Sphinx extension) to use as the
     default role, that is, for text marked up ‘`like this`’.  This can
     be set to ‘'py:obj'’ to make ‘`filter`’ a cross-reference to the
     Python function “filter”.  The default is ‘None’, which doesn’t
     reassign the default role.

     The default role can always be set within individual documents
     using the standard reST ‘default-role’ directive.

     New in version 0.4.

 -- Configuration Value: keep_warnings

     If true, keep warnings as “system message” paragraphs in the built
     documents.  Regardless of this setting, warnings are always written
     to the standard error stream when ‘sphinx-build’ is run.

     The default is ‘False’, the pre-0.5 behavior was to always keep
     them.

     New in version 0.5.

 -- Configuration Value: suppress_warnings

     A list of warning types to suppress arbitrary warning messages.

     Sphinx supports following warning types:

        * app.add_node

        * app.add_directive

        * app.add_role

        * app.add_generic_role

        * app.add_source_parser

        * download.not_readable

        * image.not_readable

        * ref.term

        * ref.ref

        * ref.numref

        * ref.keyword

        * ref.option

        * ref.citation

        * ref.footnote

        * ref.doc

        * ref.python

        * misc.highlighting_failure

        * toc.secnum

        * epub.unknown_project_files

     You can choose from these types.

     Now, this option should be considered `experimental'.

     New in version 1.4.

     Changed in version 1.5: Added ‘misc.highlighting_failure’

     Changed in version 1.5.1: Added ‘epub.unknown_project_files’

     Changed in version 1.6: Added ‘ref.footnote’

 -- Configuration Value: needs_sphinx

     If set to a ‘major.minor’ version string like ‘'1.1'’, Sphinx will
     compare it with its version and refuse to build if it is too old.
     Default is no requirement.

     New in version 1.0.

     Changed in version 1.4: also accepts micro version string

 -- Configuration Value: needs_extensions

     This value can be a dictionary specifying version requirements for
     extensions in *note extensions: 5c, e.g.  ‘needs_extensions =
     {'sphinxcontrib.something': '1.5'}’.  The version strings should be
     in the form ‘major.minor’.  Requirements do not have to be
     specified for all extensions, only for those you want to check.

     This requires that the extension specifies its version to Sphinx
     (see *note Developing extensions for Sphinx: 67. for how to do
     that).

     New in version 1.3.

 -- Configuration Value: manpages_url

     A URL to cross-reference *note manpage: 155. directives.  If this
     is defined to ‘https://manpages.debian.org/{path}’, the
     ‘:manpage:`man(1)`’ role will like to
     <‘https://manpages.debian.org/man(1)’>.  The patterns available
     are:

             * ‘page’ - the manual page (‘man’)

             * ‘section’ - the manual section (‘1’)

             * ‘path’ - the original manual page and section specified
               (‘man(1)’)

     This also supports manpages specified as ‘man.1’.

          Note: This currently affects only HTML writers but could be
          expanded in the future.

     New in version 1.7.

 -- Configuration Value: nitpicky

     If true, Sphinx will warn about `all' references where the target
     cannot be found.  Default is ‘False’.  You can activate this mode
     temporarily using the *note -n: b2. command-line switch.

     New in version 1.0.

 -- Configuration Value: nitpick_ignore

     A list of ‘(type, target)’ tuples (by default empty) that should be
     ignored when generating warnings in “nitpicky mode”.  Note that
     ‘type’ should include the domain name if present.  Example entries
     would be ‘('py:func', 'int')’ or ‘('envvar', 'LD_LIBRARY_PATH')’.

     New in version 1.1.

 -- Configuration Value: numfig

     If true, figures, tables and code-blocks are automatically numbered
     if they have a caption.  The *note numref: 144. role is enabled.
     Obeyed so far only by HTML and LaTeX builders.  Default is ‘False’.

          Note: The LaTeX builder always assigns numbers whether this
          option is enabled or not.

     New in version 1.3.

 -- Configuration Value: numfig_format

     A dictionary mapping ‘'figure'’, ‘'table'’, ‘'code-block'’ and
     ‘'section'’ to strings that are used for format of figure numbers.
     As a special character, ‘%s’ will be replaced to figure number.

     Default is to use ‘'Fig. %s'’ for ‘'figure'’, ‘'Table %s'’ for
     ‘'table'’, ‘'Listing %s'’ for ‘'code-block'’ and ‘'Section'’ for
     ‘'section'’.

     New in version 1.3.

 -- Configuration Value: numfig_secnum_depth

        - if set to ‘0’, figures, tables and code-blocks are
          continuously numbered starting at ‘1’.

        - if ‘1’ (default) numbers will be ‘x.1’, ‘x.2’, … with ‘x’ the
          section number (top level sectioning; no ‘x.’ if no section).
          This naturally applies only if section numbering has been
          activated via the ‘:numbered:’ option of the *note toctree:
          10a. directive.

        - ‘2’ means that numbers will be ‘x.y.1’, ‘x.y.2’, … if located
          in a sub-section (but still ‘x.1’, ‘x.2’, … if located
          directly under a section and ‘1’, ‘2’, … if not in any top
          level section.)

        - etc…

     New in version 1.3.

     Changed in version 1.7: The LaTeX builder obeys this setting (if
     *note numfig: 146. is set to ‘True’).

 -- Configuration Value: smartquotes

     If true, the Docutils Smart Quotes transform(2), originally based
     on SmartyPants(3) (limited to English) and currently applying to
     many languages, will be used to convert quotes and dashes to
     typographically correct entities.  Default: ‘True’.

     New in version 1.6.6: It replaces deprecated *note
     html_use_smartypants: 278.  It applies by default to all builders
     except ‘man’ and ‘text’ (see *note smartquotes_excludes: 279.)

     A docutils.conf(4) file located in the configuration directory (or
     a global ‘~/.docutils’ file) is obeyed unconditionally if it
     `deactivates' smart quotes via the corresponding Docutils
     option(5).  But if it `activates' them, then *note smartquotes:
     277. does prevail.

 -- Configuration Value: smartquotes_action

     This string, for use with Docutils ‘0.14’ or later, customizes the
     Smart Quotes transform.  See the file ‘smartquotes.py’ at the
     Docutils repository(6) for details.  The default ‘'qDe'’ educates
     normal `q'uote characters ‘"’, ‘'’, em- and en-`D'ashes ‘---’,
     ‘--’, and `e'llipses ‘...’.

     New in version 1.6.6.

 -- Configuration Value: smartquotes_excludes

     This is a ‘dict’ whose default is:

          {'languages': ['ja'], 'builders': ['man', 'text']}

     Each entry gives a sufficient condition to ignore the *note
     smartquotes: 277. setting and deactivate the Smart Quotes
     transform.  Accepted keys are as above ‘'builders'’ or
     ‘'languages'’.  The values are lists.

          Note: Currently, in case of invocation of ‘make’ with multiple
          targets, the first target name is the only one which is tested
          against the ‘'builders'’ entry and it decides for all.  Also,
          a ‘make text’ following ‘make html’ needs to be issued in the
          form ‘make text O="-E"’ to force re-parsing of source files,
          as the cached ones are already transformed.  On the other hand
          the issue does not arise with direct usage of ‘sphinx-build’
          as it caches (in its default usage) the parsed source files in
          per builder locations.

     New in version 1.6.6.

 -- Configuration Value: tls_verify

     If true, Sphinx verifies server certifications.  Default is ‘True’.

     New in version 1.5.

 -- Configuration Value: tls_cacerts

     A path to a certification file of CA or a path to directory which
     contains the certificates.  This also allows a dictionary mapping
     hostname to the path to certificate file.  The certificates are
     used to verify server certifications.

     New in version 1.5.

   ---------- Footnotes ----------

   (1) A note on available globbing syntax: you can use the standard
shell constructs ‘*’, ‘?’, ‘[...]’ and ‘[!...]’ with the feature that
these all don’t match slashes.  A double star ‘**’ can be used to match
any sequence of characters `including' slashes.

   (2) http://docutils.sourceforge.net/docs/user/smartquotes.html

   (3) https://daringfireball.net/projects/smartypants/

   (4) http://docutils.sourceforge.net/docs/user/config.html

   (5) 
http://docutils.sourceforge.net/docs/user/config.html#smart-quotes

   (6) https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils/


File: sphinx.info,  Node: Project information,  Next: Options for internationalization,  Prev: General configuration,  Up: The build configuration file

9.2 Project information
=======================

 -- Configuration Value: project

     The documented project’s name.

 -- Configuration Value: author

     The author name(s) of the document.  The default value is
     ‘'unknown'’.

 -- Configuration Value: copyright

     A copyright statement in the style ‘'2008, Author Name'’.

 -- Configuration Value: version

     The major project version, used as the replacement for ‘|version|’.
     For example, for the Python documentation, this may be something
     like ‘2.6’.

 -- Configuration Value: release

     The full project version, used as the replacement for ‘|release|’
     and e.g.  in the HTML templates.  For example, for the Python
     documentation, this may be something like ‘2.6.0rc1’.

     If you don’t need the separation provided between *note version:
     82. and *note release: 84, just set them both to the same value.

 -- Configuration Value: today
 -- Configuration Value: today_fmt

     These values determine how to format the current date, used as the
     replacement for ‘|today|’.

        * If you set *note today: 162. to a non-empty value, it is used.

        * Otherwise, the current time is formatted using
          ‘time.strftime()’ and the format given in *note today_fmt:
          161.

     The default is no *note today: 162. and a *note today_fmt: 161. of
     ‘'%B %d, %Y'’ (or, if translation is enabled with *note language:
     86, an equivalent format for the selected locale).

 -- Configuration Value: highlight_language

     The default language to highlight source code in.  The default is
     ‘'python3'’.  The value should be a valid Pygments lexer name, see
     *note Showing code examples: 127. for more details.

     New in version 0.5.

     Changed in version 1.4: The default is now ‘'default'’.  It is
     similar to ‘'python3'’; it is mostly a superset of ‘'python'’.  but
     it fallbacks to ‘'none'’ without warning if failed.  ‘'python3'’
     and other languages will emit warning if failed.  If you prefer
     Python 2 only highlighting, you can set it back to ‘'python'’.

 -- Configuration Value: highlight_options

     A dictionary of options that modify how the lexer specified by
     *note highlight_language: 128. generates highlighted source code.
     These are lexer-specific; for the options understood by each, see
     the Pygments documentation(1).

     New in version 1.3.

 -- Configuration Value: pygments_style

     The style name to use for Pygments highlighting of source code.  If
     not set, either the theme’s default style or ‘'sphinx'’ is selected
     for HTML output.

     Changed in version 0.3: If the value is a fully-qualified name of a
     custom Pygments style class, this is then used as custom style.

 -- Configuration Value: add_function_parentheses

     A boolean that decides whether parentheses are appended to function
     and method role text (e.g.  the content of ‘:func:`input`’) to
     signify that the name is callable.  Default is ‘True’.

 -- Configuration Value: add_module_names

     A boolean that decides whether module names are prepended to all
     *note object: 177. names (for object types where a “module” of some
     kind is defined), e.g.  for *note py;function: 180. directives.
     Default is ‘True’.

 -- Configuration Value: show_authors

     A boolean that decides whether *note codeauthor: 169. and *note
     sectionauthor: 167. directives produce any output in the built
     files.

 -- Configuration Value: modindex_common_prefix

     A list of prefixes that are ignored for sorting the Python module
     index (e.g., if this is set to ‘['foo.']’, then ‘foo.bar’ is shown
     under ‘B’, not ‘F’).  This can be handy if you document a project
     that consists of a single package.  Works only for the HTML builder
     currently.  Default is ‘[]’.

     New in version 0.6.

 -- Configuration Value: trim_footnote_reference_space

     Trim spaces before footnote references that are necessary for the
     reST parser to recognize the footnote, but do not look too nice in
     the output.

     New in version 0.6.

 -- Configuration Value: trim_doctest_flags

     If true, doctest flags (comments looking like ‘# doctest: FLAG,
     ...’) at the ends of lines and ‘<BLANKLINE>’ markers are removed
     for all code blocks showing interactive Python sessions (i.e.
     doctests).  Default is ‘True’.  See the extension *note doctest:
     1c. for more possibilities of including doctests.

     New in version 1.0.

     Changed in version 1.1: Now also removes ‘<BLANKLINE>’.

   ---------- Footnotes ----------

   (1) http://pygments.org/docs/lexers/


File: sphinx.info,  Node: Options for internationalization,  Next: Options for HTML output,  Prev: Project information,  Up: The build configuration file

9.3 Options for internationalization
====================================

These options influence Sphinx’s `Native Language Support'.  See the
documentation on *note Internationalization: 24b. for details.

 -- Configuration Value: language

     The code for the language the docs are written in.  Any text
     automatically generated by Sphinx will be in that language.  Also,
     Sphinx will try to substitute individual paragraphs from your
     documents with the translation sets obtained from *note
     locale_dirs: 28c.  Sphinx will search language-specific figures
     named by ‘figure_language_filename’ and substitute them for
     original figures.  In the LaTeX builder, a suitable language will
     be selected as an option for the `Babel' package.  Default is
     ‘None’, which means that no translation will be done.

     New in version 0.5.

     Changed in version 1.4: Support figure substitution

     Currently supported languages by Sphinx are:

        * ‘bn’ – Bengali

        * ‘ca’ – Catalan

        * ‘cs’ – Czech

        * ‘da’ – Danish

        * ‘de’ – German

        * ‘en’ – English

        * ‘es’ – Spanish

        * ‘et’ – Estonian

        * ‘eu’ – Basque

        * ‘fa’ – Iranian

        * ‘fi’ – Finnish

        * ‘fr’ – French

        * ‘he’ – Hebrew

        * ‘hr’ – Croatian

        * ‘hu’ – Hungarian

        * ‘id’ – Indonesian

        * ‘it’ – Italian

        * ‘ja’ – Japanese

        * ‘ko’ – Korean

        * ‘lt’ – Lithuanian

        * ‘lv’ – Latvian

        * ‘mk’ – Macedonian

        * ‘nb_NO’ – Norwegian Bokmal

        * ‘ne’ – Nepali

        * ‘nl’ – Dutch

        * ‘pl’ – Polish

        * ‘pt_BR’ – Brazilian Portuguese

        * ‘pt_PT’ – European Portuguese

        * ‘ru’ – Russian

        * ‘si’ – Sinhala

        * ‘sk’ – Slovak

        * ‘sl’ – Slovenian

        * ‘sv’ – Swedish

        * ‘tr’ – Turkish

        * ‘uk_UA’ – Ukrainian

        * ‘vi’ – Vietnamese

        * ‘zh_CN’ – Simplified Chinese

        * ‘zh_TW’ – Traditional Chinese

 -- Configuration Value: locale_dirs

     New in version 0.5.

     Directories in which to search for additional message catalogs (see
     *note language: 86.), relative to the source directory.  The
     directories on this path are searched by the standard ‘gettext’
     module.

     Internal messages are fetched from a text domain of ‘sphinx’; so if
     you add the directory ‘./locale’ to this setting, the message
     catalogs (compiled from ‘.po’ format using ‘msgfmt’) must be in
     ‘./locale/`language'/LC_MESSAGES/sphinx.mo’.  The text domain of
     individual documents depends on *note gettext_compact: 28d.

     The default is ‘['locales']’.

     Changed in version 1.5: Use ‘locales’ directory as a default value

 -- Configuration Value: gettext_compact

     New in version 1.1.

     If true, a document’s text domain is its docname if it is a
     top-level project file and its very base directory otherwise.

     By default, the document ‘markup/code.rst’ ends up in the ‘markup’
     text domain.  With this option set to ‘False’, it is ‘markup/code’.

 -- Configuration Value: gettext_uuid

     If true, Sphinx generates uuid information for version tracking in
     message catalogs.  It is used for:

        * Add uid line for each msgids in .pot files.

        * Calculate similarity between new msgids and previously saved
          old msgids.  This calculation takes a long time.

     If you want to accelerate the calculation, you can use
     ‘python-levenshtein’ 3rd-party package written in C by using ‘pip
     install python-levenshtein’.

     The default is ‘False’.

     New in version 1.3.

 -- Configuration Value: gettext_location

     If true, Sphinx generates location information for messages in
     message catalogs.

     The default is ‘True’.

     New in version 1.3.

 -- Configuration Value: gettext_auto_build

     If true, Sphinx builds mo file for each translation catalog files.

     The default is ‘True’.

     New in version 1.3.

 -- Configuration Value: gettext_additional_targets

     To specify names to enable gettext extracting and translation
     applying for i18n additionally.  You can specify below names:


     Index: index terms


     Literal-block: literal blocks: ‘::’ and ‘code-block’.


     Doctest-block: doctest block


     Raw: raw content


     Image: image/figure uri and alt

     For example: ‘gettext_additional_targets = ['literal-block',
     'image']’.

     The default is ‘[]’.

     New in version 1.3.

 -- Configuration Value: figure_language_filename

     The filename format for language-specific figures.  The default
     value is ‘{root}.{language}{ext}’.  It will be expanded to
     ‘dirname/filename.en.png’ from ‘.. image:: dirname/filename.png’.
     The available format tokens are:

        * ‘{root}’ - the filename, including any path component, without
          the file extension, e.g.  ‘dirname/filename’

        * ‘{path}’ - the directory path component of the filename, with
          a trailing slash if non-empty, e.g.  ‘dirname/’

        * ‘{basename}’ - the filename without the directory path or file
          extension components, e.g.  ‘filename’

        * ‘{ext}’ - the file extension, e.g.  ‘.png’

        * ‘{language}’ - the translation language, e.g.  ‘en’

     For example, setting this to ‘{path}{language}/{basename}{ext}’
     will expand to ‘dirname/en/filename.png’ instead.

     New in version 1.4.

     Changed in version 1.5: Added ‘{path}’ and ‘{basename}’ tokens.


File: sphinx.info,  Node: Options for HTML output,  Next: Options for HTML help output,  Prev: Options for internationalization,  Up: The build configuration file

9.4 Options for HTML output
===========================

These options influence HTML as well as HTML Help output, and other
builders that use Sphinx’s HTMLWriter class.

 -- Configuration Value: html_theme

     The “theme” that the HTML output should use.  See the *note section
     about theming: 64.  The default is ‘'alabaster'’.

     New in version 0.6.

 -- Configuration Value: html_theme_options

     A dictionary of options that influence the look and feel of the
     selected theme.  These are theme-specific.  For the options
     understood by the builtin themes, see *note this section: 296.

     New in version 0.6.

 -- Configuration Value: html_theme_path

     A list of paths that contain custom themes, either as
     subdirectories or as zip files.  Relative paths are taken as
     relative to the configuration directory.

     New in version 0.6.

 -- Configuration Value: html_style

     The style sheet to use for HTML pages.  A file of that name must
     exist either in Sphinx’s ‘static/’ path, or in one of the custom
     paths given in *note html_static_path: 26b.  Default is the
     stylesheet given by the selected theme.  If you only want to add or
     override a few things compared to the theme’s stylesheet, use CSS
     ‘@import’ to import the theme’s stylesheet.

 -- Configuration Value: html_title

     The “title” for HTML documentation generated with Sphinx’s own
     templates.  This is appended to the ‘<title>’ tag of individual
     pages, and used in the navigation bar as the “topmost” element.  It
     defaults to ‘'`<project>' v`<revision>' documentation'’.

 -- Configuration Value: html_short_title

     A shorter “title” for the HTML docs.  This is used in for links in
     the header and in the HTML Help docs.  If not given, it defaults to
     the value of *note html_title: 298.

     New in version 0.4.

 -- Configuration Value: html_context

     A dictionary of values to pass into the template engine’s context
     for all pages.  Single values can also be put in this dictionary
     using the *note -A: b1. command-line option of ‘sphinx-build’.

     New in version 0.5.

 -- Configuration Value: html_logo

     If given, this must be the name of an image file (path relative to
     the *note configuration directory: 47.) that is the logo of the
     docs.  It is placed at the top of the sidebar; its width should
     therefore not exceed 200 pixels.  Default: ‘None’.

     New in version 0.4.1: The image file will be copied to the
     ‘_static’ directory of the output HTML, but only if the file does
     not already exist there.

 -- Configuration Value: html_favicon

     If given, this must be the name of an image file (path relative to
     the *note configuration directory: 47.) that is the favicon of the
     docs.  Modern browsers use this as the icon for tabs, windows and
     bookmarks.  It should be a Windows-style icon file (‘.ico’), which
     is 16x16 or 32x32 pixels large.  Default: ‘None’.

     New in version 0.4: The image file will be copied to the ‘_static’
     directory of the output HTML, but only if the file does not already
     exist there.

 -- Configuration Value: html_static_path

     A list of paths that contain custom static files (such as style
     sheets or script files).  Relative paths are taken as relative to
     the configuration directory.  They are copied to the output’s
     ‘_static’ directory after the theme’s static files, so a file named
     ‘default.css’ will overwrite the theme’s ‘default.css’.

     Changed in version 0.4: The paths in *note html_static_path: 26b.
     can now contain subdirectories.

     Changed in version 1.0: The entries in *note html_static_path: 26b.
     can now be single files.

 -- Configuration Value: html_extra_path

     A list of paths that contain extra files not directly related to
     the documentation, such as ‘robots.txt’ or ‘.htaccess’.  Relative
     paths are taken as relative to the configuration directory.  They
     are copied to the output directory.  They will overwrite any
     existing file of the same name.

     As these files are not meant to be built, they are automatically
     added to *note exclude_patterns: 10c.

     New in version 1.2.

     Changed in version 1.4: The dotfiles in the extra directory will be
     copied to the output directory.  And it refers *note
     exclude_patterns: 10c. on copying extra files and directories, and
     ignores if path matches to patterns.

 -- Configuration Value: html_last_updated_fmt

     If this is not None, a ‘Last updated on:’ timestamp is inserted at
     every page bottom, using the given ‘strftime()’ format.  The empty
     string is equivalent to ‘'%b %d, %Y'’ (or a locale-dependent
     equivalent).

 -- Configuration Value: html_use_smartypants

     If true, quotes and dashes are converted to typographically correct
     entities.  Default: ‘True’.

     Deprecated since version 1.6: To disable smart quotes, use rather
     *note smartquotes: 277.

 -- Configuration Value: html_add_permalinks

     Sphinx will add “permalinks” for each heading and description
     environment as paragraph signs that become visible when the mouse
     hovers over them.

     This value determines the text for the permalink; it defaults to
     ‘"¶"’.  Set it to ‘None’ or the empty string to disable permalinks.

     New in version 0.6: Previously, this was always activated.

     Changed in version 1.1: This can now be a string to select the
     actual text of the link.  Previously, only boolean values were
     accepted.

 -- Configuration Value: html_sidebars

     Custom sidebar templates, must be a dictionary that maps document
     names to template names.

     The keys can contain glob-style patterns (1), in which case all
     matching documents will get the specified sidebars.  (A warning is
     emitted when a more than one glob-style pattern matches for any
     document.)

     The values can be either lists or single strings.

        * If a value is a list, it specifies the complete list of
          sidebar templates to include.  If all or some of the default
          sidebars are to be included, they must be put into this list
          as well.

          The default sidebars (for documents that don’t match any
          pattern) are defined by theme itself.  Builtin themes are
          using these templates by default: ‘['localtoc.html',
          'relations.html', 'sourcelink.html', 'searchbox.html']’.

        * If a value is a single string, it specifies a custom sidebar
          to be added between the ‘'sourcelink.html'’ and
          ‘'searchbox.html'’ entries.  This is for compatibility with
          Sphinx versions before 1.0.

     Deprecated since version 1.7: a single string value for
     ‘html_sidebars’ will be removed in 2.0

     Builtin sidebar templates that can be rendered are:

        * `localtoc.html' – a fine-grained table of contents of the
          current document

        * `globaltoc.html' – a coarse-grained table of contents for the
          whole documentation set, collapsed

        * `relations.html' – two links to the previous and next
          documents

        * `sourcelink.html' – a link to the source of the current
          document, if enabled in *note html_show_sourcelink: 2a0.

        * `searchbox.html' – the “quick search” box

     Example:

          html_sidebars = {
             '**': ['globaltoc.html', 'sourcelink.html', 'searchbox.html'],
             'using/windows': ['windowssidebar.html', 'searchbox.html'],
          }

     This will render the custom template ‘windowssidebar.html’ and the
     quick search box within the sidebar of the given document, and
     render the default sidebars for all other pages (except that the
     local TOC is replaced by the global TOC).

     New in version 1.0: The ability to use globbing keys and to specify
     multiple sidebars.

     Note that this value only has no effect if the chosen theme does
     not possess a sidebar, like the builtin `scrolls' and `haiku'
     themes.

 -- Configuration Value: html_additional_pages

     Additional templates that should be rendered to HTML pages, must be
     a dictionary that maps document names to template names.

     Example:

          html_additional_pages = {
              'download': 'customdownload.html',
          }

     This will render the template ‘customdownload.html’ as the page
     ‘download.html’.

 -- Configuration Value: html_domain_indices

     If true, generate domain-specific indices in addition to the
     general index.  For e.g.  the Python domain, this is the global
     module index.  Default is ‘True’.

     This value can be a bool or a list of index names that should be
     generated.  To find out the index name for a specific index, look
     at the HTML file name.  For example, the Python module index has
     the name ‘'py-modindex'’.

     New in version 1.0.

 -- Configuration Value: html_use_index

     If true, add an index to the HTML documents.  Default is ‘True’.

     New in version 0.4.

 -- Configuration Value: html_split_index

     If true, the index is generated twice: once as a single page with
     all the entries, and once as one page per starting letter.  Default
     is ‘False’.

     New in version 0.4.

 -- Configuration Value: html_copy_source

     If true, the reST sources are included in the HTML build as
     ‘_sources/`name'’.  The default is ‘True’.

          Warning: If this config value is set to ‘False’, the
          JavaScript search function will only display the titles of
          matching documents, and no excerpt from the matching contents.

 -- Configuration Value: html_show_sourcelink

     If true (and *note html_copy_source: 2a5. is true as well), links
     to the reST sources will be added to the sidebar.  The default is
     ‘True’.

     New in version 0.6.

 -- Configuration Value: html_sourcelink_suffix

     Suffix to be appended to source links (see *note
     html_show_sourcelink: 2a0.), unless they have this suffix already.
     Default is ‘'.txt'’.

     New in version 1.5.

 -- Configuration Value: html_use_opensearch

     If nonempty, an OpenSearch(2) description file will be output, and
     all pages will contain a ‘<link>’ tag referring to it.  Since
     OpenSearch doesn’t support relative URLs for its search page
     location, the value of this option must be the base URL from which
     these documents are served (without trailing slash), e.g.
     ‘"https://docs.python.org"’.  The default is ‘''’.

 -- Configuration Value: html_file_suffix

     This is the file name suffix for generated HTML files.  The default
     is ‘".html"’.

     New in version 0.4.

 -- Configuration Value: html_link_suffix

     Suffix for generated links to HTML files.  The default is whatever
     *note html_file_suffix: 2a8. is set to; it can be set differently
     (e.g.  to support different web server setups).

     New in version 0.6.

 -- Configuration Value: html_show_copyright

     If true, “(C) Copyright …” is shown in the HTML footer.  Default is
     ‘True’.

     New in version 1.0.

 -- Configuration Value: html_show_sphinx

     If true, “Created using Sphinx” is shown in the HTML footer.
     Default is ‘True’.

     New in version 0.4.

 -- Configuration Value: html_output_encoding

     Encoding of HTML output files.  Default is ‘'utf-8'’.  Note that
     this encoding name must both be a valid Python encoding name and a
     valid HTML ‘charset’ value.

     New in version 1.0.

 -- Configuration Value: html_compact_lists

     If true, a list all whose items consist of a single paragraph
     and/or a sub-list all whose items etc… (recursive definition) will
     not use the ‘<p>’ element for any of its items.  This is standard
     docutils behavior.  Default: ‘True’.

     New in version 1.0.

 -- Configuration Value: html_secnumber_suffix

     Suffix for section numbers.  Default: ‘". "’.  Set to ‘" "’ to
     suppress the final dot on section numbers.

     New in version 1.0.

 -- Configuration Value: html_search_language

     Language to be used for generating the HTML full-text search index.
     This defaults to the global language selected with *note language:
     86.  If there is no support for this language, ‘"en"’ is used which
     selects the English language.

     Support is present for these languages:

        * ‘da’ – Danish

        * ‘nl’ – Dutch

        * ‘en’ – English

        * ‘fi’ – Finnish

        * ‘fr’ – French

        * ‘de’ – German

        * ‘hu’ – Hungarian

        * ‘it’ – Italian

        * ‘ja’ – Japanese

        * ‘no’ – Norwegian

        * ‘pt’ – Portuguese

        * ‘ro’ – Romanian

        * ‘ru’ – Russian

        * ‘es’ – Spanish

        * ‘sv’ – Swedish

        * ‘tr’ – Turkish

        * ‘zh’ – Chinese

          Accelerating build speed: Each language (except Japanese)
          provides its own stemming algorithm.  Sphinx uses a Python
          implementation by default.  You can use a C implementation to
          accelerate building the index file.

             * PorterStemmer(3) (‘en’)

             * PyStemmer(4) (all languages)

     New in version 1.1: With support for ‘en’ and ‘ja’.

     Changed in version 1.3: Added additional languages.

 -- Configuration Value: html_search_options

     A dictionary with options for the search language support, empty by
     default.  The meaning of these options depends on the language
     selected.

     The English support has no options.

     The Japanese support has these options:


     Type: type is dotted module path string to specify Splitter
     implementation which should be derived from
     ‘sphinx.search.ja.BaseSplitter’.  If not specified or None is
     specified, ‘'sphinx.search.ja.DefaultSplitter'’ will be used.

     You can choose from these modules:


     ‘sphinx.search.ja.DefaultSplitter’: TinySegmenter algorithm.  This
     is default splitter.


     ‘sphinx.search.ja.MeCabSplitter’: MeCab binding.  To use this
     splitter, ‘mecab’ python binding or dynamic link library
     (‘libmecab.so’ for linux, ‘libmecab.dll’ for windows) is required.


     ‘sphinx.search.ja.JanomeSplitter’: Janome binding.  To use this
     splitter, Janome(5) is required.

     To keep compatibility, ‘'mecab'’, ‘'janome'’ and ‘'default'’ are
     also acceptable.  However it will be deprecated in Sphinx-1.6.

     Other option values depend on splitter value which you choose.

     Options for ‘'mecab'’:


          dic_enc: dic_enc option is the encoding for the MeCab
          algorithm.


          dict: dict option is the dictionary to use for the MeCab
          algorithm.


          lib: lib option is the library name for finding the MeCab
          library via ctypes if the Python binding is not installed.

          For example:

               html_search_options = {
                   'type': 'mecab',
                   'dic_enc': 'utf-8',
                   'dict': '/path/to/mecab.dic',
                   'lib': '/path/to/libmecab.so',
               }

     Options for ‘'janome'’:


          user_dic: user_dic option is the user dictionary file path for
          Janome.


          user_dic_enc: user_dic_enc option is the encoding for the user
          dictionary file specified by ‘user_dic’ option.  Default is
          ‘utf8’.

     New in version 1.1.

     Changed in version 1.4: html_search_options for Japanese is
     re-organized and any custom splitter can be used by *note type:
     2b1. settings.

     The Chinese support has these options:

        * ‘dict’ – the ‘jieba’ dictionary path if want to use custom
          dictionary.

 -- Configuration Value: html_search_scorer

     The name of a JavaScript file (relative to the configuration
     directory) that implements a search results scorer.  If empty, the
     default will be used.

     New in version 1.2.

 -- Configuration Value: html_scaled_image_link

     If true, images itself links to the original image if it doesn’t
     have ‘target’ option or scale related options: ‘scale’, ‘width’,
     ‘height’.  The default is ‘True’.

     New in version 1.3.

 -- Configuration Value: html_experimental_html5_writer

     Output is processed with HTML5 writer.  This feature needs docutils
     0.13 or newer.  Default is ‘False’.

     New in version 1.6.

   ---------- Footnotes ----------

   (1) A note on available globbing syntax: you can use the standard
shell constructs ‘*’, ‘?’, ‘[...]’ and ‘[!...]’ with the feature that
these all don’t match slashes.  A double star ‘**’ can be used to match
any sequence of characters `including' slashes.

   (2) http://www.opensearch.org/Home

   (3) https://pypi.python.org/pypi/PorterStemmer

   (4) https://pypi.python.org/pypi/PyStemmer

   (5) https://pypi.python.org/pypi/Janome


File: sphinx.info,  Node: Options for HTML help output,  Next: Options for Apple Help output,  Prev: Options for HTML output,  Up: The build configuration file

9.5 Options for HTML help output
================================

 -- Configuration Value: htmlhelp_basename

     Output file base name for HTML help builder.  Default is ‘'pydoc'’.


File: sphinx.info,  Node: Options for Apple Help output,  Next: Options for epub output,  Prev: Options for HTML help output,  Up: The build configuration file

9.6 Options for Apple Help output
=================================

New in version 1.3.

These options influence the Apple Help output.  This builder derives
from the HTML builder, so the HTML options also apply where appropriate.

     Note: Apple Help output will only work on Mac OS X 10.6 and higher,
     as it requires the ‘hiutil’ and ‘codesign’ command line tools,
     neither of which are Open Source.

     You can disable the use of these tools using *note
     applehelp_disable_external_tools: 21b, but the result will not be a
     valid help book until the indexer is run over the ‘.lproj’ folders
     within the bundle.

 -- Configuration Value: applehelp_bundle_name

     The basename for the Apple Help Book.  Defaults to the *note
     project: 7e. name.

 -- Configuration Value: applehelp_bundle_id

     The bundle ID for the help book bundle.

          Warning: You `must' set this value in order to generate Apple
          Help.

 -- Configuration Value: applehelp_dev_region

     The development region.  Defaults to ‘'en-us'’, which is Apple’s
     recommended setting.

 -- Configuration Value: applehelp_bundle_version

     The bundle version (as a string).  Defaults to ‘'1'’.

 -- Configuration Value: applehelp_icon

     The help bundle icon file, or ‘None’ for no icon.  According to
     Apple’s documentation, this should be a 16-by-16 pixel version of
     the application’s icon with a transparent background, saved as a
     PNG file.

 -- Configuration Value: applehelp_kb_product

     The product tag for use with *note applehelp_kb_url: 2c5.  Defaults
     to ‘'`<project>'-`<release>''’.

 -- Configuration Value: applehelp_kb_url

     The URL for your knowledgebase server, e.g.
     ‘https://example.com/kbsearch.py?p='product'&q='query'&l='lang'’.
     Help Viewer will replace the values ‘'product'’, ‘'query'’ and
     ‘'lang'’ at runtime with the contents of *note
     applehelp_kb_product: 2c4, the text entered by the user in the
     search box and the user’s system language respectively.

     Defaults to ‘None’ for no remote search.

 -- Configuration Value: applehelp_remote_url

     The URL for remote content.  You can place a copy of your Help
     Book’s ‘Resources’ folder at this location and Help Viewer will
     attempt to use it to fetch updated content.

     e.g.  if you set it to ‘https://example.com/help/Foo/’ and Help
     Viewer wants a copy of ‘index.html’ for an English speaking
     customer, it will look at
     ‘https://example.com/help/Foo/en.lproj/index.html’.

     Defaults to ‘None’ for no remote content.

 -- Configuration Value: applehelp_index_anchors

     If ‘True’, tell the help indexer to index anchors in the generated
     HTML. This can be useful for jumping to a particular topic using
     the ‘AHLookupAnchor’ function or the ‘openHelpAnchor:inBook:’
     method in your code.  It also allows you to use ‘help:anchor’ URLs;
     see the Apple documentation for more information on this topic.

 -- Configuration Value: applehelp_min_term_length

     Controls the minimum term length for the help indexer.  Defaults to
     ‘None’, which means the default will be used.

 -- Configuration Value: applehelp_stopwords

     Either a language specification (to use the built-in stopwords), or
     the path to a stopwords plist, or ‘None’ if you do not want to use
     stopwords.  The default stopwords plist can be found at
     ‘/usr/share/hiutil/Stopwords.plist’ and contains, at time of
     writing, stopwords for the following languages:

     Language      Code
                   
     -----------------------
                   
     English       en
                   
                   
     German        de
                   
                   
     Spanish       es
                   
                   
     French        fr
                   
                   
     Swedish       sv
                   
                   
     Hungarian     hu
                   
                   
     Italian       it
                   

     Defaults to *note language: 86, or if that is not set, to ‘en’.

 -- Configuration Value: applehelp_locale

     Specifies the locale to generate help for.  This is used to
     determine the name of the ‘.lproj’ folder inside the Help Book’s
     ‘Resources’, and is passed to the help indexer.

     Defaults to *note language: 86, or if that is not set, to ‘en’.

 -- Configuration Value: applehelp_title

     Specifies the help book title.  Defaults to ‘'`<project>' Help'’.

 -- Configuration Value: applehelp_codesign_identity

     Specifies the identity to use for code signing, or ‘None’ if code
     signing is not to be performed.

     Defaults to the value of the environment variable
     ‘CODE_SIGN_IDENTITY’, which is set by Xcode for script build
     phases, or ‘None’ if that variable is not set.

 -- Configuration Value: applehelp_codesign_flags

     A `list' of additional arguments to pass to ‘codesign’ when signing
     the help book.

     Defaults to a list based on the value of the environment variable
     ‘OTHER_CODE_SIGN_FLAGS’, which is set by Xcode for script build
     phases, or the empty list if that variable is not set.

 -- Configuration Value: applehelp_indexer_path

     The path to the ‘hiutil’ program.  Defaults to ‘'/usr/bin/hiutil'’.

 -- Configuration Value: applehelp_codesign_path

     The path to the ‘codesign’ program.  Defaults to
     ‘'/usr/bin/codesign'’.

 -- Configuration Value: applehelp_disable_external_tools

     If ‘True’, the builder will not run the indexer or the code signing
     tool, no matter what other settings are specified.

     This is mainly useful for testing, or where you want to run the
     Sphinx build on a non-Mac OS X platform and then complete the final
     steps on OS X for some reason.

     Defaults to ‘False’.


File: sphinx.info,  Node: Options for epub output,  Next: Options for LaTeX output,  Prev: Options for Apple Help output,  Up: The build configuration file

9.7 Options for epub output
===========================

These options influence the epub output.  As this builder derives from
the HTML builder, the HTML options also apply where appropriate.  The
actual values for some of the options is not really important, they just
have to be entered into the Dublin Core metadata(1).

 -- Configuration Value: epub_basename

     The basename for the epub file.  It defaults to the *note project:
     7e. name.

 -- Configuration Value: epub_theme

     The HTML theme for the epub output.  Since the default themes are
     not optimized for small screen space, using the same theme for HTML
     and epub output is usually not wise.  This defaults to ‘'epub'’, a
     theme designed to save visual space.

 -- Configuration Value: epub_theme_options

     A dictionary of options that influence the look and feel of the
     selected theme.  These are theme-specific.  For the options
     understood by the builtin themes, see *note this section: 296.

     New in version 1.2.

 -- Configuration Value: epub_title

     The title of the document.  It defaults to the *note html_title:
     298. option but can be set independently for epub creation.

 -- Configuration Value: epub_description

     The description of the document.  The default value is ‘'unknown'’.

     New in version 1.4.

     Changed in version 1.5: Renamed from ‘epub3_description’

 -- Configuration Value: epub_author

     The author of the document.  This is put in the Dublin Core
     metadata.  It defaults to the *note author: 27f. option.

 -- Configuration Value: epub_contributor

     The name of a person, organization, etc.  that played a secondary
     role in the creation of the content of an EPUB Publication.  The
     default value is ‘'unknown'’.

     New in version 1.4.

     Changed in version 1.5: Renamed from ‘epub3_contributor’

 -- Configuration Value: epub_language

     The language of the document.  This is put in the Dublin Core
     metadata.  The default is the *note language: 86. option or ‘'en'’
     if unset.

 -- Configuration Value: epub_publisher

     The publisher of the document.  This is put in the Dublin Core
     metadata.  You may use any sensible string, e.g.  the project
     homepage.  The defaults to the *note author: 27f. option.

 -- Configuration Value: epub_copyright

     The copyright of the document.  It defaults to the *note copyright:
     80. option but can be set independently for epub creation.

 -- Configuration Value: epub_identifier

     An identifier for the document.  This is put in the Dublin Core
     metadata.  For published documents this is the ISBN number, but you
     can also use an alternative scheme, e.g.  the project homepage.
     The default value is ‘'unknown'’.

 -- Configuration Value: epub_scheme

     The publication scheme for the *note epub_identifier: 2dc.  This is
     put in the Dublin Core metadata.  For published books the scheme is
     ‘'ISBN'’.  If you use the project homepage, ‘'URL'’ seems
     reasonable.  The default value is ‘'unknown'’.

 -- Configuration Value: epub_uid

     A unique identifier for the document.  This is put in the Dublin
     Core metadata.  You may use a XML’s Name format(2) string.  You
     can’t use hyphen, period, numbers as a first character.  The
     default value is ‘'unknown'’.

 -- Configuration Value: epub_cover

     The cover page information.  This is a tuple containing the
     filenames of the cover image and the html template.  The rendered
     html cover page is inserted as the first item in the spine in
     ‘content.opf’.  If the template filename is empty, no html cover
     page is created.  No cover at all is created if the tuple is empty.
     Examples:

          epub_cover = ('_static/cover.png', 'epub-cover.html')
          epub_cover = ('_static/cover.png', '')
          epub_cover = ()

     The default value is ‘()’.

     New in version 1.1.

 -- Configuration Value: epub_guide

     Meta data for the guide element of ‘content.opf’.  This is a
     sequence of tuples containing the `type', the `uri' and the `title'
     of the optional guide information.  See the OPF documentation at
     ‘http://idpf.org/epub’ for details.  If possible, default entries
     for the `cover' and `toc' types are automatically inserted.
     However, the types can be explicitly overwritten if the default
     entries are not appropriate.  Example:

          epub_guide = (('cover', 'cover.html', u'Cover Page'),)

     The default value is ‘()’.

 -- Configuration Value: epub_pre_files

     Additional files that should be inserted before the text generated
     by Sphinx.  It is a list of tuples containing the file name and the
     title.  If the title is empty, no entry is added to ‘toc.ncx’.
     Example:

          epub_pre_files = [
              ('index.html', 'Welcome'),
          ]

     The default value is ‘[]’.

 -- Configuration Value: epub_post_files

     Additional files that should be inserted after the text generated
     by Sphinx.  It is a list of tuples containing the file name and the
     title.  This option can be used to add an appendix.  If the title
     is empty, no entry is added to ‘toc.ncx’.  The default value is
     ‘[]’.

 -- Configuration Value: epub_exclude_files

     A list of files that are generated/copied in the build directory
     but should not be included in the epub file.  The default value is
     ‘[]’.

 -- Configuration Value: epub_tocdepth

     The depth of the table of contents in the file ‘toc.ncx’.  It
     should be an integer greater than zero.  The default value is 3.
     Note: A deeply nested table of contents may be difficult to
     navigate.

 -- Configuration Value: epub_tocdup

     This flag determines if a toc entry is inserted again at the
     beginning of its nested toc listing.  This allows easier navigation
     to the top of a chapter, but can be confusing because it mixes
     entries of different depth in one list.  The default value is
     ‘True’.

 -- Configuration Value: epub_tocscope

     This setting control the scope of the epub table of contents.  The
     setting can have the following values:

        * ‘'default'’ – include all toc entries that are not hidden
          (default)

        * ‘'includehidden'’ – include all toc entries

     New in version 1.2.

 -- Configuration Value: epub_fix_images

     This flag determines if sphinx should try to fix image formats that
     are not supported by some epub readers.  At the moment palette
     images with a small color table are upgraded.  You need the Python
     Image Library (Pillow the successor of the PIL) installed to use
     this option.  The default value is ‘False’ because the automatic
     conversion may lose information.

     New in version 1.2.

 -- Configuration Value: epub_max_image_width

     This option specifies the maximum width of images.  If it is set to
     a value greater than zero, images with a width larger than the
     given value are scaled accordingly.  If it is zero, no scaling is
     performed.  The default value is ‘0’.  You need the Python Image
     Library (Pillow) installed to use this option.

     New in version 1.2.

 -- Configuration Value: epub_show_urls

     Control whether to display URL addresses.  This is very useful for
     readers that have no other means to display the linked URL. The
     settings can have the following values:

        * ‘'inline'’ – display URLs inline in parentheses (default)

        * ‘'footnote'’ – display URLs in footnotes

        * ‘'no'’ – do not display URLs

     The display of inline URLs can be customized by adding CSS rules
     for the class ‘link-target’.

     New in version 1.2.

 -- Configuration Value: epub_use_index

     If true, add an index to the epub document.  It defaults to the
     *note html_use_index: 2a3. option but can be set independently for
     epub creation.

     New in version 1.2.

 -- Configuration Value: epub_writing_mode

     It specifies writing direction.  It can accept ‘'horizontal'’
     (default) and ‘'vertical'’

     ‘epub_writing_mode’                   ‘'horizontal'’                        ‘'vertical'’
                                                                                 
     ------------------------------------------------------------------------------------------------------------------
                                                                                 
     writing-mode (3)                      ‘horizontal-tb’                       ‘vertical-rl’
                                                                                 
                                                                                 
     page progression                      left to right                         right to left
                                                                                 
                                                                                 
     iBook’s Scroll Theme support          scroll-axis is vertical.              scroll-axis is horizontal.
                                                                                 

   ---------- Footnotes ----------

   (1) http://dublincore.org/

   (2) https://www.w3.org/TR/REC-xml/#NT-NameStartChar

   (3) ‘https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode’


File: sphinx.info,  Node: Options for LaTeX output,  Next: Options for text output,  Prev: Options for epub output,  Up: The build configuration file

9.8 Options for LaTeX output
============================

These options influence LaTeX output.  See further *note LaTeX
customization: 2ed.

 -- Configuration Value: latex_engine

     The LaTeX engine to build the docs.  The setting can have the
     following values:

        * ‘'pdflatex'’ – PDFLaTeX (default)

        * ‘'xelatex'’ – XeLaTeX

        * ‘'lualatex'’ – LuaLaTeX

        * ‘'platex'’ – pLaTeX (default if *note language: 86. is ‘'ja'’)

     PDFLaTeX’s support for Unicode characters covers those from the
     document language (the LaTeX ‘babel’ and ‘inputenc’ packages map
     them to glyph slots in the document font, at various encodings
     allowing each only 256 characters; Sphinx uses by default (except
     for Cyrillic languages) the ‘times’ package), but stray characters
     from other scripts or special symbols may require adding extra
     LaTeX packages or macros to the LaTeX preamble.

     If your project uses such extra Unicode characters, switching the
     engine to XeLaTeX or LuaLaTeX often provides a quick fix.  They
     only work with UTF-8 encoded sources and can (in fact, should) use
     OpenType fonts, either from the system or the TeX install tree.
     Recent LaTeX releases will default with these engines to the Latin
     Modern OpenType font, which has good coverage of Latin and Cyrillic
     scripts (it is provided by standard LaTeX installation), and Sphinx
     does not modify this default.  Refer to the documentation of the
     LaTeX ‘polyglossia’ package to see how to instruct LaTeX to use
     some other OpenType font if Unicode coverage proves insufficient
     (or use directly ‘\setmainfont’ et.  al.  as in *note this example:
     2ee.)

 -- Configuration Value: latex_documents

     This value determines how to group the document tree into LaTeX
     source files.  It must be a list of tuples ‘(startdocname,
     targetname, title, author, documentclass, toctree_only)’, where the
     items are:

        * `startdocname': document name that is the “root” of the LaTeX
          file.  All documents referenced by it in TOC trees will be
          included in the LaTeX file too.  (If you want only one LaTeX
          file, use your *note master_doc: 8a. here.)

        * `targetname': file name of the LaTeX file in the output
          directory.

        * `title': LaTeX document title.  Can be empty to use the title
          of the `startdoc'.  This is inserted as LaTeX markup, so
          special characters like a backslash or ampersand must be
          represented by the proper LaTeX commands if they are to be
          inserted literally.

        * `author': Author for the LaTeX document.  The same LaTeX
          markup caveat as for `title' applies.  Use ‘\\and’ to separate
          multiple authors, as in: ‘'John \\and Sarah'’ (backslashes
          must be Python-escaped to reach LaTeX).

        * `documentclass': Normally, one of ‘'manual'’ or ‘'howto'’
          (provided by Sphinx and based on ‘'report'’, resp.
          ‘'article'’; Japanese documents use ‘'jsbook'’, resp.
          ‘'jreport'’.)  “howto” (non-Japanese) documents will not get
          appendices.  Also they have a simpler title page.  Other
          document classes can be given.  Independently of the document
          class, the “sphinx” package is always loaded in order to
          define Sphinx’s custom LaTeX commands.

        * `toctree_only': Must be ‘True’ or ‘False’.  If true, the
          `startdoc' document itself is not included in the output, only
          the documents referenced by it via TOC trees.  With this
          option, you can put extra stuff in the master document that
          shows up in the HTML, but not the LaTeX output.

     New in version 1.2: In the past including your own document class
     required you to prepend the document class name with the string
     “sphinx”.  This is not necessary anymore.

     New in version 0.3: The 6th item ‘toctree_only’.  Tuples with 5
     items are still accepted.

 -- Configuration Value: latex_logo

     If given, this must be the name of an image file (relative to the
     configuration directory) that is the logo of the docs.  It is
     placed at the top of the title page.  Default: ‘None’.

 -- Configuration Value: latex_toplevel_sectioning

     This value determines the topmost sectioning unit.  It should be
     chosen from ‘'part'’, ‘'chapter'’ or ‘'section'’.  The default is
     ‘None’; the topmost sectioning unit is switched by documentclass:
     ‘section’ is used if documentclass will be ‘howto’, otherwise
     ‘chapter’ will be used.

     Note that if LaTeX uses ‘\part’ command, then the numbering of
     sectioning units one level deep gets off-sync with HTML numbering,
     because LaTeX numbers continuously ‘\chapter’ (or ‘\section’ for
     ‘howto’.)

     New in version 1.4.

 -- Configuration Value: latex_appendices

     A list of document names to append as an appendix to all manuals.

 -- Configuration Value: latex_domain_indices

     If true, generate domain-specific indices in addition to the
     general index.  For e.g.  the Python domain, this is the global
     module index.  Default is ‘True’.

     This value can be a bool or a list of index names that should be
     generated, like for *note html_domain_indices: 2a2.

     New in version 1.0.

 -- Configuration Value: latex_show_pagerefs

     If true, add page references after internal references.  This is
     very useful for printed copies of the manual.  Default is ‘False’.

     New in version 1.0.

 -- Configuration Value: latex_show_urls

     Control whether to display URL addresses.  This is very useful for
     printed copies of the manual.  The setting can have the following
     values:

        * ‘'no'’ – do not display URLs (default)

        * ‘'footnote'’ – display URLs in footnotes

        * ‘'inline'’ – display URLs inline in parentheses

     New in version 1.0.

     Changed in version 1.1: This value is now a string; previously it
     was a boolean value, and a true value selected the ‘'inline'’
     display.  For backwards compatibility, ‘True’ is still accepted.

 -- Configuration Value: latex_use_latex_multicolumn

     The default is ‘False’: it means that Sphinx’s own macros are used
     for merged cells from grid tables.  They allow general contents
     (literal blocks, lists, blockquotes, …) but may have problems if
     the *note tabularcolumns: 16e. directive was used to inject LaTeX
     mark-up of the type ‘>{..}’, ‘<{..}’, ‘@{..}’ as column
     specification.

     Setting to ‘True’ means to use LaTeX’s standard ‘\multicolumn’;
     this is incompatible with literal blocks in the horizontally merged
     cell, and also with multiple paragraphs in such cell if the table
     is rendered using ‘tabulary’.

     New in version 1.6.

 -- Configuration Value: latex_elements

     New in version 0.5.

     A dictionary that contains LaTeX snippets that override those
     Sphinx usually puts into the generated ‘.tex’ files.

     Keep in mind that backslashes must be doubled in Python string
     literals to avoid interpretation as escape sequences.

        * Keys that you may want to override include:

          ‘'papersize'’

               Paper size option of the document class (‘'a4paper'’ or
               ‘'letterpaper'’), default ‘'letterpaper'’.

          ‘'pointsize'’

               Point size option of the document class (‘'10pt'’,
               ‘'11pt'’ or ‘'12pt'’), default ‘'10pt'’.

          ‘'pxunit'’

               the value of the ‘px’ when used in image attributes
               ‘width’ and ‘height’.  The default value is ‘'0.75bp'’
               which achieves ‘96px=1in’ (in TeX ‘1in = 72bp =
               72.27pt’.)  To obtain for example ‘100px=1in’ use
               ‘'0.01in'’ or ‘'0.7227pt'’ (the latter leads to TeX
               computing a more precise value, due to the smaller unit
               used in the specification); for ‘72px=1in’, simply use
               ‘'1bp'’; for ‘90px=1in’, use ‘'0.8bp'’ or ‘'0.803pt'’.

               New in version 1.5.

          ‘'sphinxsetup'’

               A comma separated list of ‘key=value’ package options for
               the Sphinx LaTeX style, default empty.  See *note LaTeX
               customization: 2ed.

               New in version 1.5.

          ‘'passoptionstopackages'’

               A string which will be positioned early in the preamble,
               designed to contain
               ‘\\PassOptionsToPackage{options}{foo}’ commands.  Default
               empty.

               New in version 1.4.

          ‘'babel'’

               “babel” package inclusion, default
               ‘'\\usepackage{babel}'’ (the suitable document language
               string is passed as class option, and ‘english’ is used
               if no language.)  For Japanese documents, the default is
               the empty string.

               Changed in version 1.5: For *note latex_engine: a6. set
               to ‘'xelatex'’, the default is
               ‘'\\usepackage{polyglossia}\n\\setmainlanguage{<language>}'’.

               Changed in version 1.6: ‘'lualatex'’ uses same default
               setting as ‘'xelatex'’

          ‘'fontpkg'’

               Font package inclusion, default ‘'\\usepackage{times}'’
               (which uses Times and Helvetica).  You can set this to
               ‘''’ to use the Computer Modern fonts.

               Changed in version 1.2: Defaults to ‘''’ when the *note
               language: 86. uses the Cyrillic script.

               Changed in version 1.5: Defaults to ‘''’ when *note
               latex_engine: a6. is ‘'xelatex'’.

               Changed in version 1.6: Defaults to ‘''’ also with
               ‘'lualatex'’.

          ‘'fncychap'’

               Inclusion of the “fncychap” package (which makes fancy
               chapter titles), default
               ‘'\\usepackage[Bjarne]{fncychap}'’ for English
               documentation (this option is slightly customized by
               Sphinx), ‘'\\usepackage[Sonny]{fncychap}'’ for
               internationalized docs (because the “Bjarne” style uses
               numbers spelled out in English).  Other “fncychap” styles
               you can try are “Lenny”, “Glenn”, “Conny”, “Rejne” and
               “Bjornstrup”.  You can also set this to ‘''’ to disable
               fncychap.

          ‘'preamble'’

               Additional preamble content, default empty.  See *note
               LaTeX customization: 2ed.

          ‘'atendofbody'’

               Additional document content (right before the indices),
               default empty.

               New in version 1.5.

          ‘'figure_align'’

               Latex figure float alignment, default ‘htbp’ (here, top,
               bottom, page).  Whenever an image doesn’t fit into the
               current page, it will be ‘floated’ into the next page but
               may be preceded by any other text.  If you don’t like
               this behavior, use ‘H’ which will disable floating and
               position figures strictly in the order they appear in the
               source.

               New in version 1.3.

          ‘'footer'’

               Additional footer content (before the indices), default
               empty.

               Deprecated since version 1.5: Use ‘'atendofbody'’ key
               instead.

        * Keys that don’t need to be overridden unless in special cases
          are:

          ‘'extraclassoptions'’

               The default is the empty string.  Example:
               ‘'extraclassoptions': 'openany'’ will allow chapters (for
               documents of the ‘'manual'’ type) to start on any page.

               New in version 1.2.

               Changed in version 1.6: Added this documentation.

          ‘'maxlistdepth'’

               LaTeX allows by default at most 6 levels for nesting list
               and quote-like environments, with at most 4 enumerated
               lists, and 4 bullet lists.  Setting this key for example
               to ‘'10'’ (as a string) will allow up to 10 nested levels
               (of all sorts).  Leaving it to the empty string means to
               obey the LaTeX default.

                    Warning: 
                       - Using this key may prove incompatible with some
                         LaTeX packages or special document classes
                         which do their own list customization.

                       - The key setting is silently `ignored' if
                         ‘\usepackage{enumitem}’ is executed inside the
                         document preamble.  Use then rather the
                         dedicated commands of this LaTeX package.

               New in version 1.5.

          ‘'inputenc'’

               “inputenc” package inclusion, defaults to
               ‘'\\usepackage[utf8]{inputenc}'’ when using pdflatex.
               Otherwise empty.

               Changed in version 1.4.3: Previously
               ‘'\\usepackage[utf8]{inputenc}'’ was used for all
               compilers.

          ‘'cmappkg'’

               “cmap” package inclusion, default ‘'\\usepackage{cmap}'’.

               New in version 1.2.

          ‘'fontenc'’

               “fontenc” package inclusion, default
               ‘'\\usepackage[T1]{fontenc}'’.

               Changed in version 1.5: Defaults to
               ‘'\\usepackage{fontspec}'’ when *note latex_engine: a6.
               is ‘'xelatex'’.

               Changed in version 1.6: ‘'lualatex'’ also uses ‘fontspec’
               per default.

          ‘'geometry'’

               “geometry” package inclusion, the default definition is:

                    ‘'\\usepackage{geometry}'’

               with an additional ‘[dvipdfm]’ for Japanese documents.
               The Sphinx LaTeX style file executes:

                    ‘\PassOptionsToPackage{hmargin=1in,vmargin=1in,marginpar=0.5in}{geometry}’

               which can be customized via corresponding *note
               ‘sphinxsetup’ options: 2f6.

               New in version 1.5.

               Changed in version 1.5.2: ‘dvipdfm’ option if *note
               latex_engine: a6. is ‘'platex'’.

               New in version 1.5.3: The *note ‘sphinxsetup’ keys for
               the margins: 2f7.

               Changed in version 1.5.3: The location in the LaTeX file
               has been moved to after ‘\usepackage{sphinx}’ and
               ‘\sphinxsetup{..}’, hence also after insertion of
               ‘'fontpkg'’ key.  This is in order to handle the paper
               layout options in a special way for Japanese documents:
               the text width will be set to an integer multiple of the
               `zenkaku' width, and the text height to an integer
               multiple of the baseline.  See the *note hmargin: 2f7.
               documentation for more.

          ‘'hyperref'’

               “hyperref” package inclusion; also loads package “hypcap”
               and issues ‘\urlstyle{same}’.  This is done after
               ‘sphinx.sty’ file is loaded and before executing the
               contents of ‘'preamble'’ key.

                    Attention: Loading of packages “hyperref” and
                    “hypcap” is mandatory.

               New in version 1.5: Previously this was done from inside
               ‘sphinx.sty’.

          ‘'maketitle'’

               “maketitle” call, default ‘'\\maketitle'’ (but it has
               been redefined by the Sphinx ‘manual’ and ‘howto’
               classes.)  Override if you want to generate a
               differently-styled title page.

          ‘'releasename'’

               value that prefixes ‘'release'’ element on title page,
               default ‘'Release'’.  As for `title' and `author' used in
               the tuples of *note latex_documents: 228, it is inserted
               as LaTeX markup.

          ‘'tableofcontents'’

               “tableofcontents” call, default
               ‘'\\sphinxtableofcontents'’ (it is a wrapper of
               unmodified ‘\tableofcontents’, which may itself be
               customized by user loaded packages.)  Override if you
               want to generate a different table of contents or put
               content between the title page and the TOC.

               Changed in version 1.5: Previously the meaning of
               ‘\tableofcontents’ itself was modified by Sphinx.  This
               created an incompatibility with dedicated packages
               modifying it also such as “tocloft” or “etoc”.

          ‘'transition'’

               Commands used to display transitions, default
               ‘'\n\n\\bigskip\\hrule\\bigskip\n\n'’.  Override if you
               want to display transitions differently.

               New in version 1.2.

               Changed in version 1.6: Remove unneeded ‘{}’ after
               ‘\\hrule’.

          ‘'printindex'’

               “printindex” call, the last thing in the file, default
               ‘'\\printindex'’.  Override if you want to generate the
               index differently or append some content after the index.
               For example ‘'\\footnotesize\\raggedright\\printindex'’
               is advisable when the index is full of long entries.

        * Keys that are set by other options and therefore should not be
          overridden are:

          ‘'docclass'’ ‘'classoptions'’ ‘'title'’ ‘'date'’ ‘'release'’
          ‘'author'’ ‘'logo'’ ‘'makeindex'’ ‘'shorthandoff'’

 -- Configuration Value: latex_docclass

     A dictionary mapping ‘'howto'’ and ‘'manual'’ to names of real
     document classes that will be used as the base for the two Sphinx
     classes.  Default is to use ‘'article'’ for ‘'howto'’ and
     ‘'report'’ for ‘'manual'’.

     New in version 1.0.

     Changed in version 1.5: In Japanese docs (*note language: 86. is
     ‘'ja'’), by default ‘'jreport'’ is used for ‘'howto'’ and
     ‘'jsbook'’ for ‘'manual'’.

 -- Configuration Value: latex_additional_files

     A list of file names, relative to the configuration directory, to
     copy to the build directory when building LaTeX output.  This is
     useful to copy files that Sphinx doesn’t copy automatically, e.g.
     if they are referenced in custom LaTeX added in ‘latex_elements’.
     Image files that are referenced in source files (e.g.  via ‘..
     image::’) are copied automatically.

     You have to make sure yourself that the filenames don’t collide
     with those of any automatically copied files.

     New in version 0.6.

     Changed in version 1.2: This overrides the files which is provided
     from Sphinx such as sphinx.sty.


File: sphinx.info,  Node: Options for text output,  Next: Options for manual page output,  Prev: Options for LaTeX output,  Up: The build configuration file

9.9 Options for text output
===========================

These options influence text output.

 -- Configuration Value: text_newlines

     Determines which end-of-line character(s) are used in text output.

        * ‘'unix'’: use Unix-style line endings (‘\n’)

        * ‘'windows'’: use Windows-style line endings (‘\r\n’)

        * ‘'native'’: use the line ending style of the platform the
          documentation is built on

     Default: ‘'unix'’.

     New in version 1.1.

 -- Configuration Value: text_sectionchars

     A string of 7 characters that should be used for underlining
     sections.  The first character is used for first-level headings,
     the second for second-level headings and so on.

     The default is ‘'*=-~"+`'’.

     New in version 1.1.

 -- Configuration Value: text_add_secnumbers

     A boolean that decides whether section numbers are included in text
     output.  Default is ‘True’.

     New in version 1.7.

 -- Configuration Value: text_secnumber_suffix

     Suffix for section numbers in text output.  Default: ‘". "’.  Set
     to ‘" "’ to suppress the final dot on section numbers.

     New in version 1.7.


File: sphinx.info,  Node: Options for manual page output,  Next: Options for Texinfo output,  Prev: Options for text output,  Up: The build configuration file

9.10 Options for manual page output
===================================

These options influence manual page output.

 -- Configuration Value: man_pages

     This value determines how to group the document tree into manual
     pages.  It must be a list of tuples ‘(startdocname, name,
     description, authors, section)’, where the items are:

        * `startdocname': document name that is the “root” of the manual
          page.  All documents referenced by it in TOC trees will be
          included in the manual file too.  (If you want one master
          manual page, use your *note master_doc: 8a. here.)

        * `name': name of the manual page.  This should be a short
          string without spaces or special characters.  It is used to
          determine the file name as well as the name of the manual page
          (in the NAME section).

        * `description': description of the manual page.  This is used
          in the NAME section.

        * `authors': A list of strings with authors, or a single string.
          Can be an empty string or list if you do not want to
          automatically generate an AUTHORS section in the manual page.

        * `section': The manual page section.  Used for the output file
          name as well as in the manual page header.

     New in version 1.0.

 -- Configuration Value: man_show_urls

     If true, add URL addresses after links.  Default is ‘False’.

     New in version 1.1.


File: sphinx.info,  Node: Options for Texinfo output,  Next: Options for QtHelp output,  Prev: Options for manual page output,  Up: The build configuration file

9.11 Options for Texinfo output
===============================

These options influence Texinfo output.

 -- Configuration Value: texinfo_documents

     This value determines how to group the document tree into Texinfo
     source files.  It must be a list of tuples ‘(startdocname,
     targetname, title, author, dir_entry, description, category,
     toctree_only)’, where the items are:

        * `startdocname': document name that is the “root” of the
          Texinfo file.  All documents referenced by it in TOC trees
          will be included in the Texinfo file too.  (If you want only
          one Texinfo file, use your *note master_doc: 8a. here.)

        * `targetname': file name (no extension) of the Texinfo file in
          the output directory.

        * `title': Texinfo document title.  Can be empty to use the
          title of the `startdoc'.  Inserted as Texinfo markup, so
          special characters like @ and {} will need to be escaped to be
          inserted literally.

        * `author': Author for the Texinfo document.  Inserted as
          Texinfo markup.  Use ‘@*’ to separate multiple authors, as in:
          ‘'John@*Sarah'’.

        * `dir_entry': The name that will appear in the top-level ‘DIR’
          menu file.

        * `description': Descriptive text to appear in the top-level
          ‘DIR’ menu file.

        * `category': Specifies the section which this entry will appear
          in the top-level ‘DIR’ menu file.

        * `toctree_only': Must be ‘True’ or ‘False’.  If true, the
          `startdoc' document itself is not included in the output, only
          the documents referenced by it via TOC trees.  With this
          option, you can put extra stuff in the master document that
          shows up in the HTML, but not the Texinfo output.

     New in version 1.1.

 -- Configuration Value: texinfo_appendices

     A list of document names to append as an appendix to all manuals.

     New in version 1.1.

 -- Configuration Value: texinfo_domain_indices

     If true, generate domain-specific indices in addition to the
     general index.  For e.g.  the Python domain, this is the global
     module index.  Default is ‘True’.

     This value can be a bool or a list of index names that should be
     generated, like for *note html_domain_indices: 2a2.

     New in version 1.1.

 -- Configuration Value: texinfo_show_urls

     Control how to display URL addresses.

        * ‘'footnote'’ – display URLs in footnotes (default)

        * ‘'no'’ – do not display URLs

        * ‘'inline'’ – display URLs inline in parentheses

     New in version 1.1.

 -- Configuration Value: texinfo_no_detailmenu

     If true, do not generate a ‘@detailmenu’ in the “Top” node’s menu
     containing entries for each sub-node in the document.  Default is
     ‘False’.

     New in version 1.2.

 -- Configuration Value: texinfo_elements

     A dictionary that contains Texinfo snippets that override those
     Sphinx usually puts into the generated ‘.texi’ files.

        * Keys that you may want to override include:

          ‘'paragraphindent'’

               Number of spaces to indent the first line of each
               paragraph, default ‘2’.  Specify ‘0’ for no indentation.

          ‘'exampleindent'’

               Number of spaces to indent the lines for examples or
               literal blocks, default ‘4’.  Specify ‘0’ for no
               indentation.

          ‘'preamble'’

               Texinfo markup inserted near the beginning of the file.

          ‘'copying'’

               Texinfo markup inserted within the ‘@copying’ block and
               displayed after the title.  The default value consists of
               a simple title page identifying the project.

        * Keys that are set by other options and therefore should not be
          overridden are:

          ‘'author'’ ‘'body'’ ‘'date'’ ‘'direntry'’ ‘'filename'’
          ‘'project'’ ‘'release'’ ‘'title'’

     New in version 1.1.


File: sphinx.info,  Node: Options for QtHelp output,  Next: Options for the linkcheck builder,  Prev: Options for Texinfo output,  Up: The build configuration file

9.12 Options for QtHelp output
==============================

These options influence qthelp output.  As this builder derives from the
HTML builder, the HTML options also apply where appropriate.

 -- Configuration Value: qthelp_basename

     The basename for the qthelp file.  It defaults to the *note
     project: 7e. name.

 -- Configuration Value: qthelp_namespace

     The namespace for the qthelp file.  It defaults to
     ‘org.sphinx.<project_name>.<project_version>’.

 -- Configuration Value: qthelp_theme

     The HTML theme for the qthelp output.  This defaults to ‘'nonav'’.

 -- Configuration Value: qthelp_theme_options

     A dictionary of options that influence the look and feel of the
     selected theme.  These are theme-specific.  For the options
     understood by the builtin themes, see *note this section: 296.


File: sphinx.info,  Node: Options for the linkcheck builder,  Next: Options for the XML builder,  Prev: Options for QtHelp output,  Up: The build configuration file

9.13 Options for the linkcheck builder
======================================

 -- Configuration Value: linkcheck_ignore

     A list of regular expressions that match URIs that should not be
     checked when doing a ‘linkcheck’ build.  Example:

          linkcheck_ignore = [r'http://localhost:\d+/']

     New in version 1.1.

 -- Configuration Value: linkcheck_retries

     The number of times the linkcheck builder will attempt to check a
     URL before declaring it broken.  Defaults to 1 attempt.

     New in version 1.4.

 -- Configuration Value: linkcheck_timeout

     A timeout value, in seconds, for the linkcheck builder.  The
     default is to use Python’s global socket timeout.

     New in version 1.1.

 -- Configuration Value: linkcheck_workers

     The number of worker threads to use when checking links.  Default
     is 5 threads.

     New in version 1.1.

 -- Configuration Value: linkcheck_anchors

     If true, check the validity of ‘#anchor’s in links.  Since this
     requires downloading the whole document, it’s considerably slower
     when enabled.  Default is ‘True’.

     New in version 1.2.

 -- Configuration Value: linkcheck_anchors_ignore

     A list of regular expressions that match URIs that should skip
     checking the validity of anchors in links.  This allows skipping
     entire sites, where anchors are used to control dynamic pages, or
     just specific anchors within a page, where javascript is used to
     add anchors dynamically, or use the fragment as part of to trigger
     an internal REST request.  Default is ‘["/#!"]’.

     New in version 1.5.


File: sphinx.info,  Node: Options for the XML builder,  Next: Options for the C++ domain,  Prev: Options for the linkcheck builder,  Up: The build configuration file

9.14 Options for the XML builder
================================

 -- Configuration Value: xml_pretty

     If true, pretty-print the XML. Default is ‘True’.

     New in version 1.2.


File: sphinx.info,  Node: Options for the C++ domain,  Prev: Options for the XML builder,  Up: The build configuration file

9.15 Options for the C++ domain
===============================

 -- Configuration Value: cpp_index_common_prefix

     A list of prefixes that will be ignored when sorting C++ objects in
     the global index.  For example ‘['awesome_lib::']’.

     New in version 1.5.

 -- Configuration Value: cpp_id_attributes

     A list of strings that the parser additionally should accept as
     attributes.  This can for example be used when attributes have been
     ‘#define’ d for portability.

     New in version 1.5.

 -- Configuration Value: cpp_paren_attributes

     A list of strings that the parser additionally should accept as
     attributes with one argument.  That is, if ‘my_align_as’ is in the
     list, then ‘my_align_as(X)’ is parsed as an attribute for all
     strings ‘X’ that have balanced brances (‘()’, ‘[]’, and ‘{}’).
     This can for example be used when attributes have been ‘#define’ d
     for portability.

     New in version 1.5.


File: sphinx.info,  Node: Example of configuration file,  Next: Internationalization,  Prev: The build configuration file,  Up: Top

10 Example of configuration file
********************************

     # -*- coding: utf-8 -*-
     #
     # test documentation build configuration file, created by
     # sphinx-quickstart on Sun Jun 26 00:00:43 2016.
     #
     # This file is execfile()d with the current directory set to its
     # containing dir.
     #
     # Note that not all possible configuration values are present in this
     # autogenerated file.
     #
     # All configuration values have a default; values that are commented out
     # serve to show the default.

     # If extensions (or modules to document with autodoc) are in another directory,
     # add these directories to sys.path here. If the directory is relative to the
     # documentation root, use os.path.abspath to make it absolute, like shown here.
     #
     # import os
     # import sys
     # sys.path.insert(0, os.path.abspath('.'))

     # -- General configuration ------------------------------------------------

     # If your documentation needs a minimal Sphinx version, state it here.
     #
     # needs_sphinx = '1.0'

     # Add any Sphinx extension module names here, as strings. They can be
     # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
     # ones.
     extensions = []

     # Add any paths that contain templates here, relative to this directory.
     templates_path = ['_templates']

     # The suffix(es) of source filenames.
     # You can specify multiple suffix as a list of string:
     #
     # source_suffix = ['.rst', '.md']
     source_suffix = '.rst'

     # The encoding of source files.
     #
     # source_encoding = 'utf-8-sig'

     # The master toctree document.
     master_doc = 'index'

     # General information about the project.
     project = u'test'
     copyright = u'2016, test'
     author = u'test'

     # The version info for the project you're documenting, acts as replacement for
     # |version| and |release|, also used in various other places throughout the
     # built documents.
     #
     # The short X.Y version.
     version = u'test'
     # The full version, including alpha/beta/rc tags.
     release = u'test'

     # The language for content autogenerated by Sphinx. Refer to documentation
     # for a list of supported languages.
     #
     # This is also used if you do content translation via gettext catalogs.
     # Usually you set "language" from the command line for these cases.
     language = None

     # There are two options for replacing |today|: either, you set today to some
     # non-false value, then it is used:
     #
     # today = ''
     #
     # Else, today_fmt is used as the format for a strftime call.
     #
     # today_fmt = '%B %d, %Y'

     # List of patterns, relative to source directory, that match files and
     # directories to ignore when looking for source files.
     # These patterns also affect html_static_path and html_extra_path
     exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

     # The reST default role (used for this markup: `text`) to use for all
     # documents.
     #
     # default_role = None

     # If true, '()' will be appended to :func: etc. cross-reference text.
     #
     # add_function_parentheses = True

     # If true, the current module name will be prepended to all description
     # unit titles (such as .. function::).
     #
     # add_module_names = True

     # If true, sectionauthor and moduleauthor directives will be shown in the
     # output. They are ignored by default.
     #
     # show_authors = False

     # The name of the Pygments (syntax highlighting) style to use.
     pygments_style = 'sphinx'

     # A list of ignored prefixes for module index sorting.
     # modindex_common_prefix = []

     # If true, keep warnings as "system message" paragraphs in the built documents.
     # keep_warnings = False

     # If true, `todo` and `todoList` produce output, else they produce nothing.
     todo_include_todos = False


     # -- Options for HTML output ----------------------------------------------

     # The theme to use for HTML and HTML Help pages.  See the documentation for
     # a list of builtin themes.
     #
     html_theme = 'alabaster'

     # Theme options are theme-specific and customize the look and feel of a theme
     # further.  For a list of options available for each theme, see the
     # documentation.
     #
     # html_theme_options = {}

     # Add any paths that contain custom themes here, relative to this directory.
     # html_theme_path = []

     # The name for this set of Sphinx documents.
     # "<project> v<release> documentation" by default.
     #
     # html_title = u'test vtest'

     # A shorter title for the navigation bar.  Default is the same as html_title.
     #
     # html_short_title = None

     # The name of an image file (relative to this directory) to place at the top
     # of the sidebar.
     #
     # html_logo = None

     # The name of an image file (relative to this directory) to use as a favicon of
     # the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
     # pixels large.
     #
     # html_favicon = None

     # Add any paths that contain custom static files (such as style sheets) here,
     # relative to this directory. They are copied after the builtin static files,
     # so a file named "default.css" will overwrite the builtin "default.css".
     html_static_path = ['_static']

     # Add any extra paths that contain custom files (such as robots.txt or
     # .htaccess) here, relative to this directory. These files are copied
     # directly to the root of the documentation.
     #
     # html_extra_path = []

     # If not None, a 'Last updated on:' timestamp is inserted at every page
     # bottom, using the given strftime format.
     # The empty string is equivalent to '%b %d, %Y'.
     #
     # html_last_updated_fmt = None

     # Custom sidebar templates, maps document names to template names.
     #
     # html_sidebars = {}

     # Additional templates that should be rendered to pages, maps page names to
     # template names.
     #
     # html_additional_pages = {}

     # If false, no module index is generated.
     #
     # html_domain_indices = True

     # If false, no index is generated.
     #
     # html_use_index = True

     # If true, the index is split into individual pages for each letter.
     #
     # html_split_index = False

     # If true, links to the reST sources are added to the pages.
     #
     # html_show_sourcelink = True

     # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
     #
     # html_show_sphinx = True

     # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
     #
     # html_show_copyright = True

     # If true, an OpenSearch description file will be output, and all pages will
     # contain a <link> tag referring to it.  The value of this option must be the
     # base URL from which the finished HTML is served.
     #
     # html_use_opensearch = ''

     # This is the file name suffix for HTML files (e.g. ".xhtml").
     # html_file_suffix = None

     # Language to be used for generating the HTML full-text search index.
     # Sphinx supports the following languages:
     #   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
     #   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr', 'zh'
     #
     # html_search_language = 'en'

     # A dictionary with options for the search language support, empty by default.
     # 'ja' uses this config value.
     # 'zh' user can custom change `jieba` dictionary path.
     #
     # html_search_options = {'type': 'default'}

     # The name of a javascript file (relative to the configuration directory) that
     # implements a search results scorer. If empty, the default will be used.
     #
     # html_search_scorer = 'scorer.js'

     # Output file base name for HTML help builder.
     htmlhelp_basename = 'testdoc'

     # -- Options for LaTeX output ---------------------------------------------

     latex_elements = {
         # The paper size ('letterpaper' or 'a4paper').
         #
         # 'papersize': 'letterpaper',

         # The font size ('10pt', '11pt' or '12pt').
         #
         # 'pointsize': '10pt',

         # Additional stuff for the LaTeX preamble.
         #
         # 'preamble': '',

         # Latex figure (float) alignment
         #
         # 'figure_align': 'htbp',
     }

     # Grouping the document tree into LaTeX files. List of tuples
     # (source start file, target name, title,
     #  author, documentclass [howto, manual, or own class]).
     latex_documents = [
         (master_doc, 'test.tex', u'test Documentation',
          u'test', 'manual'),
     ]

     # The name of an image file (relative to this directory) to place at the top of
     # the title page.
     #
     # latex_logo = None

     # If true, show page references after internal links.
     #
     # latex_show_pagerefs = False

     # If true, show URL addresses after external links.
     #
     # latex_show_urls = False

     # Documents to append as an appendix to all manuals.
     #
     # latex_appendices = []

     # If false, no module index is generated.
     #
     # latex_domain_indices = True


     # -- Options for manual page output ---------------------------------------

     # One entry per manual page. List of tuples
     # (source start file, name, description, authors, manual section).
     man_pages = [
         (master_doc, 'test', u'test Documentation',
          [author], 1)
     ]

     # If true, show URL addresses after external links.
     #
     # man_show_urls = False


     # -- Options for Texinfo output -------------------------------------------

     # Grouping the document tree into Texinfo files. List of tuples
     # (source start file, target name, title, author,
     #  dir menu entry, description, category)
     texinfo_documents = [
         (master_doc, 'test', u'test Documentation',
          author, 'test', 'One line description of project.',
          'Miscellaneous'),
     ]

     # Documents to append as an appendix to all manuals.
     #
     # texinfo_appendices = []

     # If false, no module index is generated.
     #
     # texinfo_domain_indices = True

     # How to display URL addresses: 'footnote', 'no', or 'inline'.
     #
     # texinfo_show_urls = 'footnote'

     # If true, do not generate a @detailmenu in the "Top" node's menu.
     #
     # texinfo_no_detailmenu = False

     # -- A random example -----------------------------------------------------

     import sys, os
     sys.path.insert(0, os.path.abspath('.'))
     exclude_patterns = ['zzz']

     numfig = True
     #language = 'ja'

     extensions.append('sphinx.ext.todo')
     extensions.append('sphinx.ext.autodoc')
     #extensions.append('sphinx.ext.autosummary')
     extensions.append('sphinx.ext.intersphinx')
     extensions.append('sphinx.ext.mathjax')
     extensions.append('sphinx.ext.viewcode')
     extensions.append('sphinx.ext.graphviz')


     autosummary_generate = True
     html_theme = 'default'
     #source_suffix = ['.rst', '.txt']


File: sphinx.info,  Node: Internationalization,  Next: HTML theming support,  Prev: Example of configuration file,  Up: Top

11 Internationalization
***********************

New in version 1.1.

Complementary to translations provided for Sphinx-generated messages
such as navigation bars, Sphinx provides mechanisms facilitating
`document' translations in itself.  See the *note Options for
internationalization: 28b. for details on configuration.

 [image src="translation.png" ]

Figure: Workflow visualization of translations in Sphinx.  (The
stick-figure is taken from an XKCD comic(1).)

* Menu:

* Sphinx internationalization details::
* Translating with sphinx-intl::
* Using Transifex service for team translation::
* Contributing to Sphinx reference translation::

   ---------- Footnotes ----------

   (1) https://xkcd.com/779/


File: sphinx.info,  Node: Sphinx internationalization details,  Next: Translating with sphinx-intl,  Up: Internationalization

11.1 Sphinx internationalization details
========================================

`gettext' (1) is an established standard for internationalization and
localization.  It naively maps messages in a program to a translated
string.  Sphinx uses these facilities to translate whole documents.

Initially project maintainers have to collect all translatable strings
(also referred to as `messages') to make them known to translators.
Sphinx extracts these through invocation of ‘sphinx-build -b gettext’.

Every single element in the doctree will end up in a single message
which results in lists being equally split into different chunks while
large paragraphs will remain as coarsely-grained as they were in the
original document.  This grants seamless document updates while still
providing a little bit of context for translators in free-text passages.
It is the maintainer’s task to split up paragraphs which are too large
as there is no sane automated way to do that.

After Sphinx successfully ran the *note MessageCatalogBuilder: 24a. you
will find a collection of ‘.pot’ files in your output directory.  These
are `catalog templates' and contain messages in your original language
`only'.

They can be delivered to translators which will transform them to ‘.po’
files — so called `message catalogs' — containing a mapping from the
original messages to foreign-language strings.

Gettext compiles them into a binary format known as `binary catalogs'
through ‘msgfmt’ for efficiency reasons.  If you make these files
discoverable with *note locale_dirs: 28c. for your *note language: 86,
Sphinx will pick them up automatically.

An example: you have a document ‘usage.rst’ in your Sphinx project.  The
gettext builder will put its messages into ‘usage.pot’.  Imagine you
have Spanish translations (2) on your hands in ‘usage.po’ — for your
builds to be translated you need to follow these instructions:

   * Compile your message catalog to a locale directory, say ‘locale’,
     so it ends up in ‘./locale/es/LC_MESSAGES/usage.mo’ in your source
     directory (where ‘es’ is the language code for Spanish.)

          msgfmt "usage.po" -o "locale/es/LC_MESSAGES/usage.mo"

   * Set *note locale_dirs: 28c. to ‘["locale/"]’.

   * Set *note language: 86. to ‘es’ (also possible via *note -D: b0.).

   * Run your desired build.

   ---------- Footnotes ----------

   (1) See the GNU gettext utilities
(https://www.gnu.org/software/gettext/manual/gettext.html#Introduction)
for details on that software suite.

   (2) Because nobody expects the Spanish Inquisition!


File: sphinx.info,  Node: Translating with sphinx-intl,  Next: Using Transifex service for team translation,  Prev: Sphinx internationalization details,  Up: Internationalization

11.2 Translating with sphinx-intl
=================================

* Menu:

* Quick guide::
* Translating::
* Update your po files by new pot files::


File: sphinx.info,  Node: Quick guide,  Next: Translating,  Up: Translating with sphinx-intl

11.2.1 Quick guide
------------------

sphinx-intl(1) is a useful tool to work with Sphinx translation flow.
This section describe an easy way to translate with sphinx-intl.

  1. Install sphinx-intl(2) by ‘pip install sphinx-intl’ or
     ‘easy_install sphinx-intl’.

  2. Add configurations to your ‘conf.py’:

          locale_dirs = ['locale/']   # path is example but recommended.
          gettext_compact = False     # optional.

     This case-study assumes that *note locale_dirs: 28c. is set to
     ‘locale/’ and *note gettext_compact: 28d. is set to ‘False’ (the
     Sphinx document is already configured as such).

  3. Extract document’s translatable messages into pot files:

          $ make gettext

     As a result, many pot files are generated under ‘_build/gettext’
     directory.

  4. Setup/Update your ‘locale_dir’:

          $ sphinx-intl update -p _build/gettext -l de -l ja

     Done.  You got these directories that contain po files:

        * ‘./locale/de/LC_MESSAGES/’

        * ‘./locale/ja/LC_MESSAGES/’

  5. Translate your po files under ‘./locale/<lang>/LC_MESSAGES/’.

  6. make translated document.

     You need a *note language: 86. parameter in ‘conf.py’ or you may
     also specify the parameter on the command line:

          $ make -e SPHINXOPTS="-D language='de'" html

Congratulations!  You got the translated documentation in the
‘_build/html’ directory.

New in version 1.3: sphinx-build that is invoked by make command will
build po files into mo files.

If you are using 1.2.x or earlier, please invoke ‘sphinx-intl build’
command before make command.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/sphinx-intl

   (2) https://pypi.python.org/pypi/sphinx-intl


File: sphinx.info,  Node: Translating,  Next: Update your po files by new pot files,  Prev: Quick guide,  Up: Translating with sphinx-intl

11.2.2 Translating
------------------

Translate po file under ‘./locale/de/LC_MESSAGES’ directory.  The case
of builders.po file for sphinx document:

     # a5600c3d2e3d48fc8c261ea0284db79b
     #: ../../builders.rst:4
     msgid "Available builders"
     msgstr "<FILL HERE BY TARGET LANGUAGE>"

Another case, msgid is multi-line text and contains reStructuredText
syntax:

     # 302558364e1d41c69b3277277e34b184
     #: ../../builders.rst:9
     msgid ""
     "These are the built-in Sphinx builders. More builders can be added by "
     ":ref:`extensions <extensions>`."
     msgstr ""
     "FILL HERE BY TARGET LANGUAGE FILL HERE BY TARGET LANGUAGE FILL HERE "
     "BY TARGET LANGUAGE :ref:`EXTENSIONS <extensions>` FILL HERE."

Please be careful not to break reST notation.  Most po-editors will help
you with that.


File: sphinx.info,  Node: Update your po files by new pot files,  Prev: Translating,  Up: Translating with sphinx-intl

11.2.3 Update your po files by new pot files
--------------------------------------------

If a document is updated, it is necessary to generate updated pot files
and to apply differences to translated po files.  In order to apply the
updating difference of a pot file to po file, use the ‘sphinx-intl
update’ command.

     $ sphinx-intl update -p _build/locale


File: sphinx.info,  Node: Using Transifex service for team translation,  Next: Contributing to Sphinx reference translation,  Prev: Translating with sphinx-intl,  Up: Internationalization

11.3 Using Transifex service for team translation
=================================================

Transifex(1) is one of several services that allow collaborative
translation via a web interface.  It has a nifty Python-based command
line client that makes it easy to fetch and push translations.

  1. Install transifex-client(2)

     You need ‘tx’ command to upload resources (pot files).

          $ pip install transifex-client

     See also
     ........

     Transifex Client v0.8 &mdash; Transifex documentation(3)

  2. Create your transifex(4) account and create new project for your
     document

     Currently, transifex does not allow for a translation project to
     have more than one version of the document, so you’d better include
     a version number in your project name.

     For example:


     Project ID: ‘sphinx-document-test_1_0’


     Project URL:
     ‘https://www.transifex.com/projects/p/sphinx-document-test_1_0/’

  3. Create config files for tx command

     This process will create ‘.tx/config’ in the current directory, as
     well as a ‘~/.transifexrc’ file that includes auth information.

          $ tx init
          Creating .tx folder...
          Transifex instance [https://www.transifex.com]:
          ...
          Please enter your transifex username: <transifex-username>
          Password: <transifex-password>
          ...
          Done.

  4. Upload pot files to transifex service

     Register pot files to ‘.tx/config’ file:

          $ cd /your/document/root
          $ sphinx-intl update-txconfig-resources --pot-dir _build/locale \
            --transifex-project-name sphinx-document-test_1_0

     and upload pot files:

          $ tx push -s
          Pushing translations for resource sphinx-document-test_1_0.builders:
          Pushing source file (locale/pot/builders.pot)
          Resource does not exist.  Creating...
          ...
          Done.

  5. Forward the translation on transifex

  6. Pull translated po files and make translated html

     Get translated catalogs and build mo files (ex.  for ‘de’):

          $ cd /your/document/root
          $ tx pull -l de
          Pulling translations for resource sphinx-document-test_1_0.builders (...)
           -> de: locale/de/LC_MESSAGES/builders.po
          ...
          Done.

     Invoke make html:

          $ make -e SPHINXOPTS="-D language='de'" html

That’s all!

     Tip: Translating locally and on Transifex

     If you want to push all language’s po files, you can be done by
     using ‘tx push -t’ command.  Watch out!  This operation overwrites
     translations in transifex.

     In other words, if you have updated each in the service and local
     po files, it would take much time and effort to integrate them.

   ---------- Footnotes ----------

   (1) https://www.transifex.com/

   (2) https://pypi.python.org/pypi/transifex-client

   (3) https://docs.transifex.com/client/introduction/

   (4) https://www.transifex.com/


File: sphinx.info,  Node: Contributing to Sphinx reference translation,  Prev: Using Transifex service for team translation,  Up: Internationalization

11.4 Contributing to Sphinx reference translation
=================================================

The recommended way for new contributors to translate Sphinx reference
is to join the translation team on Transifex.

There is sphinx translation page(1) for Sphinx-1.3 documentation.

  1. Login to transifex(2) service.

  2. Go to sphinx translation page(3).

  3. Click ‘Request language’ and fill form.

  4. Wait acceptance by transifex sphinx translation maintainers.

  5. (after acceptance) translate on transifex.

   ---------- Footnotes ----------

   (1) https://www.transifex.com/sphinx-doc/sphinx-doc-1_3/

   (2) https://www.transifex.com/

   (3) https://www.transifex.com/sphinx-doc/sphinx-doc-1_3/


File: sphinx.info,  Node: HTML theming support,  Next: Setuptools integration,  Prev: Internationalization,  Up: Top

12 HTML theming support
***********************

New in version 0.6.

Sphinx supports changing the appearance of its HTML output via `themes'.
A theme is a collection of HTML templates, stylesheet(s) and other
static files.  Additionally, it has a configuration file which specifies
from which theme to inherit, which highlighting style to use, and what
options exist for customizing the theme’s look and feel.

Themes are meant to be project-unaware, so they can be used for
different projects without change.

* Menu:

* Using a theme::
* Builtin themes::
* Creating themes::
* Distribute your theme as a python package::
* Third Party Themes::


File: sphinx.info,  Node: Using a theme,  Next: Builtin themes,  Up: HTML theming support

12.1 Using a theme
==================

Using an existing theme is easy.  If the theme is builtin to Sphinx, you
only need to set the *note html_theme: 294. config value.  With the
*note html_theme_options: 295. config value you can set theme-specific
options that change the look and feel.  For example, you could have the
following in your ‘conf.py’:

     html_theme = "classic"
     html_theme_options = {
         "rightsidebar": "true",
         "relbarbgcolor": "black"
     }

That would give you the classic theme, but with a sidebar on the right
side and a black background for the relation bar (the bar with the
navigation links at the page’s top and bottom).

If the theme does not come with Sphinx, it can be in two static forms:
either a directory (containing ‘theme.conf’ and other needed files), or
a zip file with the same contents.  Either of them must be put where
Sphinx can find it; for this there is the config value *note
html_theme_path: 297.  It gives a list of directories, relative to the
directory containing ‘conf.py’, that can contain theme directories or
zip files.  For example, if you have a theme in the file ‘blue.zip’, you
can put it right in the directory containing ‘conf.py’ and use this
configuration:

     html_theme = "blue"
     html_theme_path = ["."]

The third form is a python package.  If a theme you want to use is
distributed as a python package, you can use it after installing

     # installing theme package
     $ pip install sphinxjp.themes.dotted

     # use it in your conf.py
     html_theme = "dotted"


File: sphinx.info,  Node: Builtin themes,  Next: Creating themes,  Prev: Using a theme,  Up: HTML theming support

12.2 Builtin themes
===================

`Theme overview'

 [image src="alabaster.png" alt="alabaster" ] [image src="classic.png" alt="classic" ]
                         
`alabaster'              `classic'
                         
                         
 [image src="sphinxdoc.png" alt="sphinxdoc" ] [image src="scrolls.png" alt="scrolls" ]
                         
`sphinxdoc'              `scrolls'
                         
                         
 [image src="agogo.png" alt="agogo" ] [image src="traditional.png" alt="traditional" ]
                         
`agogo'                  `traditional'
                         
                         
 [image src="nature.png" alt="nature" ] [image src="haiku.png" alt="haiku" ]
                         
`nature'                 `haiku'
                         
                         
 [image src="pyramid.png" alt="pyramid" ] [image src="bizstyle.png" alt="bizstyle" ]
                         
`pyramid'                `bizstyle'
                         

Sphinx comes with a selection of themes to choose from.

These themes are:

   * `basic' – This is a basically unstyled layout used as the base for
     the other themes, and usable as the base for custom themes as well.
     The HTML contains all important elements like sidebar and relation
     bar.  There are these options (which are inherited by the other
     themes):

        - `nosidebar' (true or false): Don’t include the sidebar.
          Defaults to ‘False’.

        - `sidebarwidth' (int or str): Width of the sidebar in pixels.
          This can be an int, which is interpreted as pixels or a valid
          CSS dimension string such as ‘70em’ or ‘50%’.  Defaults to 230
          pixels.

        - `body_min_width' (int or str): Minimal width of the document
          body.  This can be an int, which is interpreted as pixels or a
          valid CSS dimension string such as ‘70em’ or ‘50%’.  Use 0 if
          you don’t want a width limit.  Defaults may depend on the
          theme (often 450px).

        - `body_max_width' (int or str): Maximal width of the document
          body.  This can be an int, which is interpreted as pixels or a
          valid CSS dimension string such as ‘70em’ or ‘50%’.  Use
          ‘none’ if you don’t want a width limit.  Defaults may depend
          on the theme (often 800px).

   * `alabaster' – Alabaster theme(1) is a modified “Kr” Sphinx theme
     from @kennethreitz (especially as used in his Requests project),
     which was itself originally based on @mitsuhiko’s theme used for
     Flask & related projects.  Check out at its installation page(2)
     how to set up properly *note html_sidebars: 29f. for its use.

   * `classic' – This is the classic theme, which looks like the Python
     2 documentation(3).  It can be customized via these options:

        - `rightsidebar' (true or false): Put the sidebar on the right
          side.  Defaults to ‘False’.

        - `stickysidebar' (true or false): Make the sidebar “fixed” so
          that it doesn’t scroll out of view for long body content.
          This may not work well with all browsers.  Defaults to
          ‘False’.

        - `collapsiblesidebar' (true or false): Add an `experimental'
          JavaScript snippet that makes the sidebar collapsible via a
          button on its side.  `Doesn’t work with “stickysidebar”.'
          Defaults to ‘False’.

        - `externalrefs' (true or false): Display external links
          differently from internal links.  Defaults to ‘False’.

     There are also various color and font options that can change the
     color scheme without having to write a custom stylesheet:

        - `footerbgcolor' (CSS color): Background color for the footer
          line.

        - `footertextcolor' (CSS color): Text color for the footer line.

        - `sidebarbgcolor' (CSS color): Background color for the
          sidebar.

        - `sidebarbtncolor' (CSS color): Background color for the
          sidebar collapse button (used when `collapsiblesidebar' is
          ‘True’).

        - `sidebartextcolor' (CSS color): Text color for the sidebar.

        - `sidebarlinkcolor' (CSS color): Link color for the sidebar.

        - `relbarbgcolor' (CSS color): Background color for the relation
          bar.

        - `relbartextcolor' (CSS color): Text color for the relation
          bar.

        - `relbarlinkcolor' (CSS color): Link color for the relation
          bar.

        - `bgcolor' (CSS color): Body background color.

        - `textcolor' (CSS color): Body text color.

        - `linkcolor' (CSS color): Body link color.

        - `visitedlinkcolor' (CSS color): Body color for visited links.

        - `headbgcolor' (CSS color): Background color for headings.

        - `headtextcolor' (CSS color): Text color for headings.

        - `headlinkcolor' (CSS color): Link color for headings.

        - `codebgcolor' (CSS color): Background color for code blocks.

        - `codetextcolor' (CSS color): Default text color for code
          blocks, if not set differently by the highlighting style.

        - `bodyfont' (CSS font-family): Font for normal text.

        - `headfont' (CSS font-family): Font for headings.

   * `sphinxdoc' – The theme originally used by this documentation.  It
     features a sidebar on the right side.  There are currently no
     options beyond `nosidebar' and `sidebarwidth'.

          Note: The Sphinx documentation now uses an adjusted version of
          the sphinxdoc theme(4).

   * `scrolls' – A more lightweight theme, based on the Jinja
     documentation(5).  The following color options are available:

        - `headerbordercolor'

        - `subheadlinecolor'

        - `linkcolor'

        - `visitedlinkcolor'

        - `admonitioncolor'

   * `agogo' – A theme created by Andi Albrecht.  The following options
     are supported:

        - `bodyfont' (CSS font family): Font for normal text.

        - `headerfont' (CSS font family): Font for headings.

        - `pagewidth' (CSS length): Width of the page content, default
          70em.

        - `documentwidth' (CSS length): Width of the document (without
          sidebar), default 50em.

        - `sidebarwidth' (CSS length): Width of the sidebar, default
          20em.

        - `bgcolor' (CSS color): Background color.

        - `headerbg' (CSS value for “background”): background for the
          header area, default a grayish gradient.

        - `footerbg' (CSS value for “background”): background for the
          footer area, default a light gray gradient.

        - `linkcolor' (CSS color): Body link color.

        - `headercolor1', `headercolor2' (CSS color): colors for <h1>
          and <h2> headings.

        - `headerlinkcolor' (CSS color): Color for the backreference
          link in headings.

        - `textalign' (CSS `text-align' value): Text alignment for the
          body, default is ‘justify’.

   * `nature' – A greenish theme.  There are currently no options beyond
     `nosidebar' and `sidebarwidth'.

   * `pyramid' – A theme from the Pyramid web framework project,
     designed by Blaise Laflamme.  There are currently no options beyond
     `nosidebar' and `sidebarwidth'.

   * `haiku' – A theme without sidebar inspired by the Haiku OS user
     guide(6).  The following options are supported:

        - `full_logo' (true or false, default ‘False’): If this is true,
          the header will only show the *note html_logo: 29b.  Use this
          for large logos.  If this is false, the logo (if present) will
          be shown floating right, and the documentation title will be
          put in the header.

        - `textcolor', `headingcolor', `linkcolor', `visitedlinkcolor',
          `hoverlinkcolor' (CSS colors): Colors for various body
          elements.

   * `traditional' – A theme resembling the old Python documentation.
     There are currently no options beyond `nosidebar' and
     `sidebarwidth'.

   * `epub' – A theme for the epub builder.  This theme tries to save
     visual space which is a sparse resource on ebook readers.  The
     following options are supported:

        - `relbar1' (true or false, default ‘True’): If this is true,
          the ‘relbar1’ block is inserted in the epub output, otherwise
          it is omitted.

        - `footer' (true or false, default ‘True’): If this is true, the
          ‘footer’ block is inserted in the epub output, otherwise it is
          omitted.

   - `bizstyle' – A simple bluish theme.  The following options are
     supported beyond `nosidebar' and `sidebarwidth':

        - `rightsidebar' (true or false): Put the sidebar on the right
          side.  Defaults to ‘False’.

New in version 1.3: ‘alabaster’, ‘sphinx_rtd_theme’ and ‘bizstyle’
theme.

Changed in version 1.3: The ‘default’ theme has been renamed to
‘classic’.  ‘default’ is still available, however it will emit a notice
that it is an alias for the new ‘alabaster’ theme.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/alabaster

   (2) https://alabaster.readthedocs.io/en/latest/installation.html

   (3) https://docs.python.org/2/

   (4) 
https://github.com/sphinx-doc/sphinx/tree/master/doc/_themes/sphinx13

   (5) http://jinja.pocoo.org/

   (6) https://www.haiku-os.org/docs/userguide/en/contents.html


File: sphinx.info,  Node: Creating themes,  Next: Distribute your theme as a python package,  Prev: Builtin themes,  Up: HTML theming support

12.3 Creating themes
====================

As said, themes are either a directory or a zipfile (whose name is the
theme name), containing the following:

   * A ‘theme.conf’ file, see below.

   * HTML templates, if needed.

   * A ‘static/’ directory containing any static files that will be
     copied to the output static directory on build.  These can be
     images, styles, script files.

The ‘theme.conf’ file is in INI format (1) (readable by the standard
Python ‘ConfigParser’ module) and has the following structure:

     [theme]
     inherit = base theme
     stylesheet = main CSS name
     pygments_style = stylename
     sidebars = localtoc.html, relations.html, sourcelink.html, searchbox.html

     [options]
     variable = default value

   * The `inherit' setting gives the name of a “base theme”, or ‘none’.
     The base theme will be used to locate missing templates (most
     themes will not have to supply most templates if they use ‘basic’
     as the base theme), its options will be inherited, and all of its
     static files will be used as well.

   * The `stylesheet' setting gives the name of a CSS file which will be
     referenced in the HTML header.  If you need more than one CSS file,
     either include one from the other via CSS’ ‘@import’, or use a
     custom HTML template that adds ‘<link rel="stylesheet">’ tags as
     necessary.  Setting the *note html_style: 263. config value will
     override this setting.

   * The `pygments_style' setting gives the name of a Pygments style to
     use for highlighting.  This can be overridden by the user in the
     *note pygments_style: 285. config value.

   * The `sidebars' setting gives the comma separated list of sidebar
     templates for constructing sidebars.  This can be overridden by the
     user in the *note html_sidebars: 29f. config value.

   * The `options' section contains pairs of variable names and default
     values.  These options can be overridden by the user in *note
     html_theme_options: 295. and are accessible from all templates as
     ‘theme_<name>’.

New in version 1.7: sidebar settings

   ---------- Footnotes ----------

   (1) It is not an executable Python file, as opposed to ‘conf.py’,
because that would pose an unnecessary security risk if themes are
shared.


File: sphinx.info,  Node: Distribute your theme as a python package,  Next: Third Party Themes,  Prev: Creating themes,  Up: HTML theming support

12.4 Distribute your theme as a python package
==============================================

As a way to distribute your theme, you can use python package.  Python
package brings to users easy setting up ways.

To distribute your theme as a python package, please define an entry
point called ‘sphinx.html_themes’ in your setup.py file, and write a
‘setup()’ function to register your themes using ‘add_html_theme()’ API
in it:

     # 'setup.py'
     setup(
         ...
         entry_points = {
             'sphinx.html_themes': [
                 'name_of_theme = your_package',
             ]
         },
         ...
     )

     # 'your_package.py'
     from os import path

     def setup(app):
         app.add_html_theme('name_of_theme', path.abspath(path.dirname(__file__)))

If your theme package contains two or more themes, please call
‘add_html_theme()’ twice or more.

New in version 1.2: ‘sphinx_themes’ entry_points feature.

Deprecated since version 1.6: ‘sphinx_themes’ entry_points has been
deprecated.

New in version 1.6: ‘sphinx.html_themes’ entry_points feature.

* Menu:

* Templating::
* Static templates::


File: sphinx.info,  Node: Templating,  Next: Static templates,  Up: Distribute your theme as a python package

12.4.1 Templating
-----------------

The *note guide to templating: 32f. is helpful if you want to write your
own templates.  What is important to keep in mind is the order in which
Sphinx searches for templates:

   * First, in the user’s ‘templates_path’ directories.

   * Then, in the selected theme.

   * Then, in its base theme, its base’s base theme, etc.

When extending a template in the base theme with the same name, use the
theme name as an explicit directory: ‘{% extends "basic/layout.html"
%}’.  From a user ‘templates_path’ template, you can still use the
“exclamation mark” syntax as described in the templating document.


File: sphinx.info,  Node: Static templates,  Prev: Templating,  Up: Distribute your theme as a python package

12.4.2 Static templates
-----------------------

Since theme options are meant for the user to configure a theme more
easily, without having to write a custom stylesheet, it is necessary to
be able to template static files as well as HTML files.  Therefore,
Sphinx supports so-called “static templates”, like this:

If the name of a file in the ‘static/’ directory of a theme (or in the
user’s static path, for that matter) ends with ‘_t’, it will be
processed by the template engine.  The ‘_t’ will be left from the final
file name.  For example, the `classic' theme has a file
‘static/classic.css_t’ which uses templating to put the color options
into the stylesheet.  When a documentation is built with the classic
theme, the output directory will contain a ‘_static/classic.css’ file
where all template tags have been processed.


File: sphinx.info,  Node: Third Party Themes,  Prev: Distribute your theme as a python package,  Up: HTML theming support

12.5 Third Party Themes
=======================

`Theme overview'

 [image src="sphinx_rtd_theme.png" alt="sphinx_rtd_theme" ]

`sphinx_rtd_theme'

   * `sphinx_rtd_theme' – Read the Docs Sphinx Theme(1).  This is a
     mobile-friendly sphinx theme that was made for readthedocs.org.
     View a working demo over on readthedocs.org.  You can get install
     and options information at Read the Docs Sphinx Theme(2) page.

     Changed in version 1.4: `sphinx_rtd_theme' has become optional.

Besides this, there are a lot of third party themes.  You can find them
on PyPI(3), GitHub(4), sphinx-themes.org(5) and so on.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/sphinx_rtd_theme

   (2) https://pypi.python.org/pypi/sphinx_rtd_theme

   (3) https://pypi.python.org/pypi?:action=browse&c=599

   (4) https://github.com/search?utf8=%E2%9C%93&q=sphinx+theme&type=

   (5) https://sphinx-themes.org/


File: sphinx.info,  Node: Setuptools integration,  Next: Templating<2>,  Prev: HTML theming support,  Up: Top

13 Setuptools integration
*************************

Sphinx supports integration with setuptools and distutils through a
custom command - ‘BuildDoc’.

* Menu:

* Using setuptools integration::
* Options for setuptools integration::


File: sphinx.info,  Node: Using setuptools integration,  Next: Options for setuptools integration,  Up: Setuptools integration

13.1 Using setuptools integration
=================================

The Sphinx build can then be triggered from distutils, and some Sphinx
options can be set in ‘setup.py’ or ‘setup.cfg’ instead of Sphinx’s own
configuration file.

For instance, from ‘setup.py’:

     # this is only necessary when not using setuptools/distribute
     from sphinx.setup_command import BuildDoc
     cmdclass = {'build_sphinx': BuildDoc}

     name = 'My project'
     version = '1.2'
     release = '1.2.0'
     setup(
         name=name,
         author='Bernard Montgomery',
         version=release,
         cmdclass=cmdclass,
         # these are optional and override conf.py settings
         command_options={
             'build_sphinx': {
                 'project': ('setup.py', name),
                 'version': ('setup.py', version),
                 'release': ('setup.py', release),
                 'source_dir': ('setup.py', 'doc')}},
     )

     Note: If you set Sphinx options directly in the ‘setup()’ command,
     replace hyphens in variable names with underscores.  In the example
     above, ‘source-dir’ becomes ‘source_dir’.

Or add this section in ‘setup.cfg’:

     [build_sphinx]
     project = 'My project'
     version = 1.2
     release = 1.2.0
     source-dir = 'doc'

Once configured, call this by calling the relevant command on
‘setup.py’:

     $ python setup.py build_sphinx


File: sphinx.info,  Node: Options for setuptools integration,  Prev: Using setuptools integration,  Up: Setuptools integration

13.2 Options for setuptools integration
=======================================

 -- Configuration Value: fresh-env

     A boolean that determines whether the saved environment should be
     discarded on build.  Default is false.

     This can also be set by passing the ‘-E’ flag to ‘setup.py’.

          $ python setup.py build_sphinx -E

 -- Configuration Value: all-files

     A boolean that determines whether all files should be built from
     scratch.  Default is false.

     This can also be set by passing the ‘-a’ flag to ‘setup.py’:

          $ python setup.py build_sphinx -a

 -- Configuration Value: source-dir

     The target source directory.  This can be relative to the
     ‘setup.py’ or ‘setup.cfg’ file, or it can be absolute.  It defaults
     to ‘./doc’ or ‘./docs’ if either contains a file named ‘conf.py’
     (checking ‘./doc’ first); otherwise it defaults to the current
     directory.

     This can also be set by passing the ‘-s’ flag to ‘setup.py’:

          $ python setup.py build_sphinx -s $SOURCE_DIR

 -- Configuration Value: build-dir

     The target build directory.  This can be relative to the ‘setup.py’
     or ‘setup.cfg’ file, or it can be absolute.  Default is
     ‘./build/sphinx’.

 -- Configuration Value: config-dir

     Location of the configuration directory.  This can be relative to
     the ‘setup.py’ or ‘setup.cfg’ file, or it can be absolute.  Default
     is to use ‘source-dir’.

     This can also be set by passing the ‘-c’ flag to ‘setup.py’:

          $ python setup.py build_sphinx -c $CONFIG_DIR

     New in version 1.0.

 -- Configuration Value: builder

     The builder or list of builders to use.  Default is ‘html’.

     This can also be set by passing the ‘-b’ flag to ‘setup.py’:

          $ python setup.py build_sphinx -b $BUILDER

     Changed in version 1.6: This can now be a comma- or space-separated
     list of builders

 -- Configuration Value: warning-is-error

     A boolean that ensures Sphinx warnings will result in a failed
     build.  Default is false.

     This can also be set by passing the ‘-W’ flag to ‘setup.py’:

          $ python setup.py build_sphinx -W

     New in version 1.5.

 -- Configuration Value: project

     The documented project’s name.  Default is ‘''’.

     New in version 1.0.

 -- Configuration Value: version

     The short X.Y version.  Default is ‘''’.

     New in version 1.0.

 -- Configuration Value: release

     The full version, including alpha/beta/rc tags.  Default is ‘''’.

     New in version 1.0.

 -- Configuration Value: today

     How to format the current date, used as the replacement for
     ‘|today|’.  Default is ‘''’.

     New in version 1.0.

 -- Configuration Value: link-index

     A boolean that ensures index.html will be linked to the master doc.
     Default is false.

     This can also be set by passing the ‘-i’ flag to ‘setup.py’:

          $ python setup.py build_sphinx -i

     New in version 1.0.

 -- Configuration Value: copyright

     The copyright string.  Default is ‘''’.

     New in version 1.3.

 -- Configuration Value: pdb

     A boolean to configure ‘pdb’ on exception.  Default is false.

     New in version 1.5.


File: sphinx.info,  Node: Templating<2>,  Next: LaTeX customization,  Prev: Setuptools integration,  Up: Top

14 Templating
*************

Sphinx uses the Jinja(1) templating engine for its HTML templates.
Jinja is a text-based engine, and inspired by Django templates, so
anyone having used Django will already be familiar with it.  It also has
excellent documentation for those who need to make themselves familiar
with it.

* Menu:

* Do I need to use Sphinx’s templates to produce HTML?::
* Jinja/Sphinx Templating Primer::
* Working with the builtin templates::

   ---------- Footnotes ----------

   (1) http://jinja.pocoo.org


File: sphinx.info,  Node: Do I need to use Sphinx’s templates to produce HTML?,  Next: Jinja/Sphinx Templating Primer,  Up: Templating<2>

14.1 Do I need to use Sphinx’s templates to produce HTML?
=========================================================

No.  You have several other options:

   * You can write a *note TemplateBridge: 26f. subclass that calls your
     template engine of choice, and set the *note template_bridge: 26e.
     configuration value accordingly.

   * You can *note write a custom builder: 342. that derives from *note
     StandaloneHTMLBuilder: 205. and calls your template engine of
     choice.

   * You can use the *note PickleHTMLBuilder: 242. that produces pickle
     files with the page contents, and postprocess them using a custom
     tool, or use them in your Web application.


File: sphinx.info,  Node: Jinja/Sphinx Templating Primer,  Next: Working with the builtin templates,  Prev: Do I need to use Sphinx’s templates to produce HTML?,  Up: Templating<2>

14.2 Jinja/Sphinx Templating Primer
===================================

The default templating language in Sphinx is Jinja.  It’s Django/Smarty
inspired and easy to understand.  The most important concept in Jinja is
`template inheritance', which means that you can overwrite only specific
blocks within a template, customizing it while also keeping the changes
at a minimum.

To customize the output of your documentation you can override all the
templates (both the layout templates and the child templates) by adding
files with the same name as the original filename into the template
directory of the structure the Sphinx quickstart generated for you.

Sphinx will look for templates in the folders of *note templates_path:
26d. first, and if it can’t find the template it’s looking for there, it
falls back to the selected theme’s templates.

A template contains `variables', which are replaced with values when the
template is evaluated, `tags', which control the logic of the template
and `blocks' which are used for template inheritance.

Sphinx’s `basic' theme provides base templates with a couple of blocks
it will fill with data.  These are located in the ‘themes/basic’
subdirectory of the Sphinx installation directory, and used by all
builtin Sphinx themes.  Templates with the same name in the *note
templates_path: 26d. override templates supplied by the selected theme.

For example, to add a new link to the template area containing related
links all you have to do is to add a new template called ‘layout.html’
with the following contents:

     {% extends "!layout.html" %}
     {% block rootrellink %}
         <li><a href="https://project.invalid/">Project Homepage</a> &raquo;</li>
         {{ super() }}
     {% endblock %}

By prefixing the name of the overridden template with an exclamation
mark, Sphinx will load the layout template from the underlying HTML
theme.

`Important': If you override a block, call ‘{{ super() }}’ somewhere to
render the block’s original content in the extended template – unless
you don’t want that content to show up.


File: sphinx.info,  Node: Working with the builtin templates,  Prev: Jinja/Sphinx Templating Primer,  Up: Templating<2>

14.3 Working with the builtin templates
=======================================

The builtin `basic' theme supplies the templates that all builtin Sphinx
themes are based on.  It has the following elements you can override or
use:

* Menu:

* Blocks::
* Configuration Variables: Configuration Variables<2>.
* Helper Functions::
* Global Variables::


File: sphinx.info,  Node: Blocks,  Next: Configuration Variables<2>,  Up: Working with the builtin templates

14.3.1 Blocks
-------------

The following blocks exist in the ‘layout.html’ template:

‘doctype’

     The doctype of the output format.  By default this is XHTML 1.0
     Transitional as this is the closest to what Sphinx and Docutils
     generate and it’s a good idea not to change it unless you want to
     switch to HTML 5 or a different but compatible XHTML doctype.

‘linktags’

     This block adds a couple of ‘<link>’ tags to the head section of
     the template.

‘extrahead’

     This block is empty by default and can be used to add extra
     contents into the ‘<head>’ tag of the generated HTML file.  This is
     the right place to add references to JavaScript or extra CSS files.

‘relbar1’ / ‘relbar2’

     This block contains the `relation bar', the list of related links
     (the parent documents on the left, and the links to index, modules
     etc.  on the right).  ‘relbar1’ appears before the document,
     ‘relbar2’ after the document.  By default, both blocks are filled;
     to show the relbar only before the document, you would override
     ‘relbar2’ like this:

          {% block relbar2 %}{% endblock %}

‘rootrellink’ / ‘relbaritems’

     Inside the relbar there are three sections: The ‘rootrellink’, the
     links from the documentation and the custom ‘relbaritems’.  The
     ‘rootrellink’ is a block that by default contains a list item
     pointing to the master document by default, the ‘relbaritems’ is an
     empty block.  If you override them to add extra links into the bar
     make sure that they are list items and end with the *note
     reldelim1: 346.

‘document’

     The contents of the document itself.  It contains the block “body”
     where the individual content is put by subtemplates like
     ‘page.html’.

‘sidebar1’ / ‘sidebar2’

     A possible location for a sidebar.  ‘sidebar1’ appears before the
     document and is empty by default, ‘sidebar2’ after the document and
     contains the default sidebar.  If you want to swap the sidebar
     location override this and call the ‘sidebar’ helper:

          {% block sidebar1 %}{{ sidebar() }}{% endblock %}
          {% block sidebar2 %}{% endblock %}

     (The ‘sidebar2’ location for the sidebar is needed by the
     ‘sphinxdoc.css’ stylesheet, for example.)

‘sidebarlogo’

     The logo location within the sidebar.  Override this if you want to
     place some content at the top of the sidebar.

‘footer’

     The block for the footer div.  If you want a custom footer or
     markup before or after it, override this one.

The following four blocks are `only' used for pages that do not have
assigned a list of custom sidebars in the *note html_sidebars: 29f.
config value.  Their use is deprecated in favor of separate sidebar
templates, which can be included via *note html_sidebars: 29f.

‘sidebartoc’

     The table of contents within the sidebar.

     Deprecated since version 1.0.

‘sidebarrel’

     The relation links (previous, next document) within the sidebar.

     Deprecated since version 1.0.

‘sidebarsourcelink’

     The “Show source” link within the sidebar (normally only shown if
     this is enabled by *note html_show_sourcelink: 2a0.).

     Deprecated since version 1.0.

‘sidebarsearch’

     The search box within the sidebar.  Override this if you want to
     place some content at the bottom of the sidebar.

     Deprecated since version 1.0.


File: sphinx.info,  Node: Configuration Variables<2>,  Next: Helper Functions,  Prev: Blocks,  Up: Working with the builtin templates

14.3.2 Configuration Variables
------------------------------

Inside templates you can set a couple of variables used by the layout
template using the ‘{% set %}’ tag:

 -- Data: reldelim1

     The delimiter for the items on the left side of the related bar.
     This defaults to ‘' &raquo;'’ Each item in the related bar ends
     with the value of this variable.

 -- Data: reldelim2

     The delimiter for the items on the right side of the related bar.
     This defaults to ‘' |'’.  Each item except of the last one in the
     related bar ends with the value of this variable.

Overriding works like this:

     {% extends "!layout.html" %}
     {% set reldelim1 = ' &gt;' %}

 -- Data: script_files

     Add additional script files here, like this:

          {% set script_files = script_files + ["_static/myscript.js"] %}


File: sphinx.info,  Node: Helper Functions,  Next: Global Variables,  Prev: Configuration Variables<2>,  Up: Working with the builtin templates

14.3.3 Helper Functions
-----------------------

Sphinx provides various Jinja functions as helpers in the template.  You
can use them to generate links or output multiply used elements.

 -- Function: pathto (document)

     Return the path to a Sphinx document as a URL. Use this to refer to
     built documents.

 -- Function: pathto (file, 1)

     Return the path to a `file' which is a filename relative to the
     root of the generated output.  Use this to refer to static files.

 -- Function: hasdoc (document)

     Check if a document with the name `document' exists.

 -- Function: sidebar ()

     Return the rendered sidebar.

 -- Function: relbar ()

     Return the rendered relation bar.


File: sphinx.info,  Node: Global Variables,  Prev: Helper Functions,  Up: Working with the builtin templates

14.3.4 Global Variables
-----------------------

These global variables are available in every template and are safe to
use.  There are more, but most of them are an implementation detail and
might change in the future.

 -- Data: builder

     The name of the builder (e.g.  ‘html’ or ‘htmlhelp’).

 -- Data: copyright

     The value of *note copyright: 80.

 -- Data: docstitle

     The title of the documentation (the value of *note html_title:
     298.), except when the “single-file” builder is used, when it is
     set to ‘None’.

 -- Data: embedded

     True if the built HTML is meant to be embedded in some viewing
     application that handles navigation, not the web browser, such as
     for HTML help or Qt help formats.  In this case, the sidebar is not
     included.

 -- Data: favicon

     The path to the HTML favicon in the static path, or ‘''’.

 -- Data: file_suffix

     The value of the builder’s *note out_suffix: 23e. attribute, i.e.
     the file name extension that the output files will get.  For a
     standard HTML builder, this is usually ‘.html’.

 -- Data: has_source

     True if the reST document sources are copied (if *note
     html_copy_source: 2a5. is ‘True’).

 -- Data: language

     The value of *note language: 86.

 -- Data: last_updated

     The build date.

 -- Data: logo

     The path to the HTML logo image in the static path, or ‘''’.

 -- Data: master_doc

     The value of *note master_doc: 8a, for usage with *note pathto():
     34b.

 -- Data: pagename

     The “page name” of the current file, i.e.  either the document name
     if the file is generated from a reST source, or the equivalent
     hierarchical name relative to the output directory
     (‘[directory/]filename_without_extension’).

 -- Data: project

     The value of *note project: 7e.

 -- Data: release

     The value of *note release: 84.

 -- Data: rellinks

     A list of links to put at the left side of the relbar, next to
     “next” and “prev”.  This usually contains links to the general
     index and other indices, such as the Python module index.  If you
     add something yourself, it must be a tuple ‘(pagename, link title,
     accesskey, link text)’.

 -- Data: shorttitle

     The value of *note html_short_title: 299.

 -- Data: show_source

     True if *note html_show_sourcelink: 2a0. is ‘True’.

 -- Data: sphinx_version

     The version of Sphinx used to build.

 -- Data: style

     The name of the main stylesheet, as given by the theme or *note
     html_style: 263.

 -- Data: title

     The title of the current document, as used in the ‘<title>’ tag.

 -- Data: use_opensearch

     The value of *note html_use_opensearch: 2a7.

 -- Data: version

     The value of *note version: 82.

In addition to these values, there are also all `theme options'
available (prefixed by ‘theme_’), as well as the values given by the
user in *note html_context: 29a.

In documents that are created from source files (as opposed to
automatically-generated files like the module index, or documents that
already are in HTML form), these variables are also available:

 -- Data: body

     A string containing the content of the page in HTML form as
     produced by the HTML builder, before the theme is applied.

 -- Data: display_toc

     A boolean that is True if the toc contains more than one entry.

 -- Data: meta

     Document metadata (a dictionary), see *note File-wide metadata:
     10d.

 -- Data: metatags

     A string containing the page’s HTML meta(1) tags.

 -- Data: next

     The next document for the navigation.  This variable is either
     false or has two attributes ‘link’ and ‘title’.  The title contains
     HTML markup.  For example, to generate a link to the next page, you
     can use this snippet:

          {% if next %}
          <a href="{{ next.link|e }}">{{ next.title }}</a>
          {% endif %}

 -- Data: page_source_suffix

     The suffix of the file that was rendered.  Since we support a list
     of *note source_suffix: 88, this will allow you to properly link to
     the original source file.

 -- Data: parents

     A list of parent documents for navigation, structured like the
     *note next: 36a. item.

 -- Data: prev

     Like *note next: 36a, but for the previous page.

 -- Data: sourcename

     The name of the copied source file for the current document.  This
     is only nonempty if the *note html_copy_source: 2a5. value is
     ‘True’.  This has empty value on creating automatically-generated
     files.

 -- Data: title

     The page title.

 -- Data: toc

     The local table of contents for the current page, rendered as HTML
     bullet lists.

 -- Data: toctree

     A callable yielding the global TOC tree containing the current
     page, rendered as HTML bullet lists.  Optional keyword arguments:

        * ‘collapse’ (‘True’ by default): if true, all TOC entries that
          are not ancestors of the current page are collapsed

        * ‘maxdepth’ (defaults to the max depth selected in the toctree
          directive): the maximum depth of the tree; set it to ‘-1’ to
          allow unlimited depth

        * ‘titles_only’ (‘False’ by default): if true, put only toplevel
          document titles in the tree

        * ‘includehidden’ (‘False’ by default): if true, the TOC tree
          will also contain hidden entries.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/ref/rst/directives.html#meta


File: sphinx.info,  Node: LaTeX customization,  Next: Markdown support,  Prev: Templating<2>,  Up: Top

15 LaTeX customization
**********************

The `latex' target does not benefit from pre-prepared themes like the
`html' target does (see *note HTML theming support: 64.).

* Menu:

* Basic customization::
* The LaTeX style file options::
* LaTeX macros and environments::


File: sphinx.info,  Node: Basic customization,  Next: The LaTeX style file options,  Up: LaTeX customization

15.1 Basic customization
========================

It is achieved via usage of the *note Options for LaTeX output: 229. as
described in *note The build configuration file: 264.  For example:

     # inside conf.py
     latex_engine = 'xelatex'
     latex_elements = {
         'fontpkg': r'''
     \setmainfont{DejaVu Serif}
     \setsansfont{DejaVu Sans}
     \setmonofont{DejaVu Sans Mono}
     ''',
         'preamble': r'''
     \usepackage[titles]{tocloft}
     \cftsetpnumwidth {1.25cm}\cftsetrmarg{1.5cm}
     \setlength{\cftchapnumwidth}{0.75cm}
     \setlength{\cftsecindent}{\cftchapnumwidth}
     \setlength{\cftsecnumwidth}{1.25cm}
     ''',
         'fncychap': r'\usepackage[Bjornstrup]{fncychap}',
         'printindex': r'\footnotesize\raggedright\printindex',
     }
     latex_show_urls = 'footnote'

If the size of the ‘'preamble'’ contents becomes inconvenient, one may
move all needed macros into some file ‘mystyle.tex.txt’ of the project
source repertory, and get LaTeX to import it at run time:

     'preamble': r'\input{mystyle.tex.txt}',
     # or, if the \ProvidesPackage LaTeX macro is used in a file mystyle.sty
     'preamble': r'\usepackage{mystyle}',

It is needed to set appropriately *note latex_additional_files: 2f9, for
example:

     latex_additional_files = ["mystyle.sty"]


File: sphinx.info,  Node: The LaTeX style file options,  Next: LaTeX macros and environments,  Prev: Basic customization,  Up: LaTeX customization

15.2 The LaTeX style file options
=================================

* Menu:

* The sphinxsetup interface::
* The available styling options::


File: sphinx.info,  Node: The sphinxsetup interface,  Next: The available styling options,  Up: The LaTeX style file options

15.2.1 The sphinxsetup interface
--------------------------------

The ‘'sphinxsetup'’ key of *note latex_elements: be. provides a
convenient interface to the package options of the Sphinx style file:

     latex_elements = {
         'sphinxsetup': 'key1=value1, key2=value2, ...',
     }

   - some values may be LaTeX macros, then the backslashes must be
     Python-escaped, or the whole must be a Python raw string,

   - LaTeX boolean keys require `lowercase' ‘true’ or ‘false’ values,

   - spaces around the commas and equal signs are ignored, spaces inside
     LaTeX macros may be significant.

If non-empty, it will be passed as argument to the ‘\sphinxsetup’ macro
inside the document preamble, like this:

     \usepackage{sphinx}
     \sphinxsetup{key1=value1, key2=value2,...}

New in version 1.5.

It is possible to insert further uses of the ‘\sphinxsetup’ LaTeX macro
directly into the body of the document, via the help of the ‘raw’
directive.  This is what is done for this documentation, for local
styling of this chapter in the PDF output:

     .. raw:: latex

        \begingroup
        \sphinxsetup{%
              verbatimwithframe=false,
              VerbatimColor={named}{OldLace},
              TitleColor={named}{DarkGoldenrod},
              hintBorderColor={named}{LightCoral},
              attentionborder=3pt,
              attentionBorderColor={named}{Crimson},
              attentionBgColor={named}{FloralWhite},
              noteborder=2pt,
              noteBorderColor={named}{Olive},
              cautionborder=3pt,
              cautionBorderColor={named}{Cyan},
              cautionBgColor={named}{LightCyan}}

at the start of the chapter and:

     .. raw:: latex

        \endgroup

at its end.

     Note: The colors above are made available via the ‘svgnames’ option
     of the “xcolor” package:

          latex_elements = {
              'passoptionstopackages': r'\PassOptionsToPackage{svgnames}{xcolor}',
          }


File: sphinx.info,  Node: The available styling options,  Prev: The sphinxsetup interface,  Up: The LaTeX style file options

15.2.2 The available styling options
------------------------------------

‘hmargin, vmargin’

     The dimensions of the horizontal (resp.  vertical) margins, passed
     as ‘hmargin’ (resp.  ‘vmargin’) option to the ‘geometry’ package.
     The default is ‘1in’, which is equivalent to ‘{1in,1in}’.  Example:

          'sphinxsetup': 'hmargin={2in,1.5in}, vmargin={1.5in,2in}, marginpar=1in',

     Japanese documents currently accept only the one-dimension format
     for these parameters.  The ‘geometry’ package is then passed
     suitable options to get the text width set to an exact multiple of
     the `zenkaku' width, and the text height set to an integer multiple
     of the baselineskip, with the closest fit for the margins.

          Hint: For Japanese ‘'manual'’ docclass with pointsize ‘11pt’
          or ‘12pt’, use the ‘nomag’ extra document class option (cf.
          ‘'extraclassoptions'’ key of *note latex_elements: be.) or
          so-called TeX “true” units:

               'sphinxsetup': 'hmargin=1.5truein, vmargin=1.5truein, marginpar=5zw',

     New in version 1.5.3.

‘marginpar’

     The ‘\marginparwidth’ LaTeX dimension, defaults to ‘0.5in’.  For
     Japanese documents, the value is modified to be the closest integer
     multiple of the `zenkaku' width.

     New in version 1.5.3.

‘verbatimwithframe’

     default ‘true’.  Boolean to specify if *note code-block: 12a.s and
     literal includes are framed.  Setting it to ‘false’ does not
     deactivate use of package “framed”, because it is still in use for
     the optional background colour.

‘verbatimwrapslines’

     default ‘true’.  Tells whether long lines in *note code-block:
     12a.’s contents should wrap.

‘literalblockcappos’

     default ‘t’ for “top”.  Decides the caption position.  Alternative
     is ‘b’ (“bottom”).

     New in version 1.7.

‘verbatimhintsturnover’

     default ‘true’.  If ‘true’, code-blocks display “continued on next
     page”, “continued from previous page” hints in case of pagebreaks.

     New in version 1.6.3.

     Changed in version 1.7: the default changed from ‘false’ to ‘true’.

‘verbatimcontinuedalign’, ‘verbatimcontinuesalign’

     default ‘c’.  Horizontal position relative to the framed contents:
     either ‘l’ (left aligned), ‘r’ (right aligned) or ‘c’ (centered).

     New in version 1.7.

‘parsedliteralwraps’

     default ‘true’.  Tells whether long lines in parsed-literal(1)’s
     contents should wrap.

     New in version 1.5.2: set this option value to ‘false’ to recover
     former behaviour.

‘inlineliteralwraps’

     default ‘true’.  Allows linebreaks inside inline literals: but
     extra potential break-points (additionally to those allowed by
     LaTeX at spaces or for hyphenation) are currently inserted only
     after the characters ‘. , ; ? ! /’.  Due to TeX internals, white
     space in the line will be stretched (or shrunk) in order to
     accomodate the linebreak.

     New in version 1.5: set this option value to ‘false’ to recover
     former behaviour.

‘verbatimvisiblespace’

     default ‘\textcolor{red}{\textvisiblespace}’.  When a long code
     line is split, the last space character from the source code line
     right before the linebreak location is typeset using this.

‘verbatimcontinued’

     A LaTeX macro inserted at start of continuation code lines.  Its
     (complicated…) default typesets a small red hook pointing to the
     right:

          \makebox[2\fontcharwd\font`\x][r]{\textcolor{red}{\tiny$\hookrightarrow$}}

     Changed in version 1.5: The breaking of long code lines was added
     at 1.4.2.  The default definition of the continuation symbol was
     changed at 1.5 to accomodate various font sizes (e.g.  code-blocks
     can be in footnotes).

‘TitleColor’

     default ‘{rgb}{0.126,0.263,0.361}’.  The colour for titles (as
     configured via use of package “titlesec”.)

     Warning: Colours set via ‘'sphinxsetup'’ must obey the syntax of
     the argument of the ‘color/xcolor’ packages ‘\definecolor’ command.

‘InnerLinkColor’

     default ‘{rgb}{0.208,0.374,0.486}’.  A colour passed to ‘hyperref’
     as value of ‘linkcolor’ and ‘citecolor’.

‘OuterLinkColor’

     default ‘{rgb}{0.216,0.439,0.388}’.  A colour passed to ‘hyperref’
     as value of ‘filecolor’, ‘menucolor’, and ‘urlcolor’.

‘VerbatimColor’

     default ‘{rgb}{1,1,1}’.  The background colour for *note
     code-block: 12a.s.  The default is white.

‘VerbatimBorderColor’

     default ‘{rgb}{0,0,0}’.  The frame color, defaults to black.

‘VerbatimHighlightColor’

     default ‘{rgb}{0.878,1,1}’.  The color for highlighted lines.

     New in version 1.6.6.

     Note: Starting with this colour key, and for all others coming
     next, the actual names declared to “color” or “xcolor” are prefixed
     with “sphinx”.

‘verbatimsep’

     default ‘\fboxsep’.  The separation between code lines and the
     frame.

‘verbatimborder’

     default ‘\fboxrule’.  The width of the frame around *note
     code-block: 12a.s.

‘shadowsep’

     default ‘5pt’.  The separation between contents and frame for
     contents(2) and topic(3) boxes.

‘shadowsize’

     default ‘4pt’.  The width of the lateral “shadow” to the right.

‘shadowrule’

     default ‘\fboxrule’.  The width of the frame around topic(4) boxes.

‘noteBorderColor’, ‘hintBorderColor’,
     ‘importantBorderColor’, ‘tipBorderColor’

     default ‘{rgb}{0,0,0}’ (black).  The colour for the two horizontal
     rules used by Sphinx in LaTeX for styling a note(5) type
     admonition.

‘noteborder’, ‘hintborder’, ‘importantborder’, ‘tipborder’

     default ‘0.5pt’.  The width of the two horizontal rules.

‘warningBorderColor’, ‘cautionBorderColor’,
     ‘attentionBorderColor’, ‘dangerBorderColor’, ‘errorBorderColor’

     default ‘{rgb}{0,0,0}’ (black).  The colour for the admonition
     frame.

‘warningBgColor’, ‘cautionBgColor’,
     ‘attentionBgColor’, ‘dangerBgColor’, ‘errorBgColor’

     default ‘{rgb}{1,1,1}’ (white).  The background colours for the
     respective admonitions.

‘warningBorder’, ‘cautionBorder’,
     ‘attentionBorder’, ‘dangerBorder’, ‘errorBorder’

     default ‘1pt’.  The width of the frame.

‘AtStartFootnote’

     default ‘\mbox{ }’.  LaTeX macros inserted at the start of the
     footnote text at bottom of page, after the footnote number.

‘BeforeFootnote’

     default ‘\leavevmode\unskip’.  LaTeX macros inserted before the
     footnote mark.  The default removes possible space before it (else,
     TeX could insert a linebreak there).

     New in version 1.5.

‘HeaderFamily’

     default ‘\sffamily\bfseries’.  Sets the font used by headings.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#parsed-literal

   (2) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#contents

   (3) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#topic

   (4) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#topic

   (5) http://docutils.sourceforge.net/docs/ref/rst/directives.html#note


File: sphinx.info,  Node: LaTeX macros and environments,  Prev: The LaTeX style file options,  Up: LaTeX customization

15.3 LaTeX macros and environments
==================================

Here are some macros from the package file ‘sphinx.sty’ and class files
‘sphinxhowto.cls’, ‘sphinxmanual.cls’, which have public names thus
allowing redefinitions.  Check the respective files for the defaults.

* Menu:

* Macros::
* Environments::
* Miscellany::


File: sphinx.info,  Node: Macros,  Next: Environments,  Up: LaTeX macros and environments

15.3.1 Macros
-------------

   - text styling commands ‘\sphinx<foo>’ with ‘<foo>’ being one of
     ‘strong’, ‘bfcode’, ‘email’, ‘tablecontinued’, ‘titleref’,
     ‘menuselection’, ‘accelerator’, ‘crossref’, ‘termref’, ‘optional’.

     New in version 1.4.5: Use of ‘\sphinx’ prefixed macro names to
     limit possibilities of conflict with LaTeX packages.

   - more text styling: ‘\sphinxstyle<bar>’ with ‘<bar>’ one of
     ‘indexentry’, ‘indexextra’, ‘indexpageref’, ‘topictitle’,
     ‘sidebartitle’, ‘othertitle’, ‘sidebarsubtitle’, ‘theadfamily’,
     ‘emphasis’, ‘literalemphasis’, ‘strong’, ‘literalstrong’,
     ‘abbreviation’, ‘literalintitle’, ‘codecontinued’, ‘codecontinues’

     New in version 1.5: these macros were formerly hard-coded as non
     customizable ‘\texttt’, ‘\emph’, etc…

     New in version 1.6: ‘\sphinxstyletheadfamily’ which defaults to
     ‘\sffamily’ and allows multiple paragraphs in header cells of
     tables.

     New in version 1.6.3: ‘\sphinxstylecodecontinued’ and
     ‘\sphinxstylecodecontinues’.

   - by default the Sphinx style file ‘sphinx.sty’ executes the command
     ‘\fvset{fontsize=\small}’ as part of its configuration of
     ‘fancyvrb.sty’.  This may be overriden for example via
     ‘\fvset{fontsize=auto}’ which will let code listings use the
     ambient font size.  Refer to ‘fancyvrb.sty’’s documentation for
     further keys.

     New in version 1.5.

   - the table of contents is typeset via ‘\sphinxtableofcontents’ which
     is a wrapper (whose definition can be found in ‘sphinxhowto.cls’ or
     in ‘sphinxmanual.cls’) of standard ‘\tableofcontents’.

     Changed in version 1.5: formerly, the meaning of ‘\tableofcontents’
     was modified by Sphinx.

   - the ‘\maketitle’ command is redefined by the class files
     ‘sphinxmanual.cls’ and ‘sphinxhowto.cls’.


File: sphinx.info,  Node: Environments,  Next: Miscellany,  Prev: Macros,  Up: LaTeX macros and environments

15.3.2 Environments
-------------------

   - a figure(1) may have an optional legend with arbitrary body
     elements: they are rendered in a ‘sphinxlegend’ environment.  The
     default definition issues ‘\small’, and ends with ‘\par’.

     New in version 1.5.6: formerly, the ‘\small’ was hardcoded in LaTeX
     writer and the ending ‘\par’ was lacking.

   - for each admonition type ‘<foo>’, the used environment is named
     ‘sphinx<foo>’.  They may be ‘\renewenvironment’ ‘d individually,
     and must then be defined with one argument (it is the heading of
     the notice, for example ‘Warning:’ for warning(2) directive, if
     English is the document language).  Their default definitions use
     either the `sphinxheavybox' (for the first listed directives) or
     the `sphinxlightbox' environments, configured to use the parameters
     (colours, border thickness) specific to each type, which can be set
     via ‘'sphinxsetup'’ string.

     Changed in version 1.5: use of public environment names, separate
     customizability of the parameters, such as ‘noteBorderColor’,
     ‘noteborder’, ‘warningBgColor’, ‘warningBorderColor’,
     ‘warningborder’, …

   - the contents(3) directive (with ‘:local:’ option) and the topic(4)
     directive are implemented by environment ‘sphinxShadowBox’.

     New in version 1.4.2: former code refactored into an environment
     allowing page breaks.

     Changed in version 1.5: options ‘shadowsep’, ‘shadowsize’,
     ‘shadowrule’.

   - the literal blocks (via ‘::’ or *note code-block: 12a.), are
     implemented using ‘sphinxVerbatim’ environment which is a wrapper
     of ‘Verbatim’ environment from package ‘fancyvrb.sty’.  It adds the
     handling of the top caption and the wrapping of long lines, and a
     frame which allows pagebreaks.  Inside tables the used environment
     is ‘sphinxVerbatimintable’ (it does not draw a frame, but allows a
     caption).

     Changed in version 1.5: ‘Verbatim’ keeps exact same meaning as in
     ‘fancyvrb.sty’ (also under the name ‘OriginalVerbatim’);
     ‘sphinxVerbatimintable’ is used inside tables.

     New in version 1.5: options ‘verbatimwithframe’,
     ‘verbatimwrapslines’, ‘verbatimsep’, ‘verbatimborder’.

     New in version 1.6.6: support for ‘:emphasize-lines:’ option

     New in version 1.6.6: easier customizability of the formatting via
     exposed to user LaTeX macros such as
     ‘\sphinxVerbatimHighlightLine’.

   - the bibliography uses ‘sphinxthebibliography’ and the Python Module
     index as well as the general index both use ‘sphinxtheindex’; these
     environments are wrappers of the ‘thebibliography’ and respectively
     ‘theindex’ environments as provided by the document class (or
     packages).

     Changed in version 1.5: formerly, the original environments were
     modified by Sphinx.

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#figure

   (2) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#warning

   (3) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#contents

   (4) 
http://docutils.sourceforge.net/docs/ref/rst/directives.html#topic


File: sphinx.info,  Node: Miscellany,  Prev: Environments,  Up: LaTeX macros and environments

15.3.3 Miscellany
-----------------

   - the section, subsection, … headings are set using `titlesec'’s
     ‘\titleformat’ command.

   - for the ‘'manual'’ docclass, the chapter headings can be customized
     using `fncychap'’s commands ‘\ChNameVar’, ‘\ChNumVar’,
     ‘\ChTitleVar’.  File ‘sphinx.sty’ has custom re-definitions in case
     of `fncychap' option ‘Bjarne’.

     Changed in version 1.5: formerly, use of `fncychap' with other
     styles than ‘Bjarne’ was dysfunctional.

   - check file ‘sphinx.sty’ for more…

     Hint: As an experimental feature, Sphinx can use user-defined
     template file for LaTeX source if you have a file named
     ‘_templates/latex.tex_t’ in your project.

     New in version 1.5: currently all template variables are unstable
     and undocumented.

     Additional files ‘longtable.tex_t’, ‘tabulary.tex_t’ and
     ‘tabular.tex_t’ can be added to ‘_templates/’ to configure some
     aspects of table rendering (such as the caption position).

     New in version 1.6: currently all template variables are unstable
     and undocumented.


File: sphinx.info,  Node: Markdown support,  Next: Sphinx Extensions,  Prev: LaTeX customization,  Up: Top

16 Markdown support
*******************

Markdown(1) is a lightweight markup language with a simplistic plain
text formatting syntax.  It exists in many syntactically different
`flavors'.  To support Markdown-based documentation, Sphinx can use
recommonmark(2).  recommonmark is a Docutils bridge to CommonMark-py(3),
a Python package for parsing the CommonMark(4) Markdown flavor.

* Menu:

* Configuration::

   ---------- Footnotes ----------

   (1) https://daringfireball.net/projects/markdown/

   (2) https://recommonmark.readthedocs.io/en/latest/index.html

   (3) https://github.com/rtfd/CommonMark-py

   (4) http://commonmark.org/


File: sphinx.info,  Node: Configuration,  Up: Markdown support

16.1 Configuration
==================

To configure your Sphinx project for Markdown support, proceed as
follows:

  1. Install recommonmark:

          pip install recommonmark

  2. Add the Markdown parser to the ‘source_parsers’ configuration
     variable in your Sphinx configuration file:

          source_parsers = {
             '.md': 'recommonmark.parser.CommonMarkParser',
          }

     You can replace ‘.md’ with a filename extension of your choice.

  3. Add the Markdown filename extension to the ‘source_suffix’
     configuration variable:

          source_suffix = ['.rst', '.md']

  4. You can further configure recommonmark to allow custom syntax that
     standard CommonMark doesn’t support.  Read more in the recommonmark
     documentation(1).

   ---------- Footnotes ----------

   (1) https://recommonmark.readthedocs.io/en/latest/auto_structify.html


File: sphinx.info,  Node: Sphinx Extensions,  Next: Developing extensions for Sphinx,  Prev: Markdown support,  Up: Top

17 Sphinx Extensions
********************

Since many projects will need special features in their documentation,
Sphinx allows adding “extensions” to the build process, each of which
can modify almost any aspect of document processing.

This chapter describes the extensions bundled with Sphinx.  For the API
documentation on writing your own extension, see *note Developing
extensions for Sphinx: 67.

* Menu:

* Builtin Sphinx extensions::
* Third-party extensions::


File: sphinx.info,  Node: Builtin Sphinx extensions,  Next: Third-party extensions,  Up: Sphinx Extensions

17.1 Builtin Sphinx extensions
==============================

These extensions are built in and can be activated by respective entries
in the *note extensions: 5c. configuration value:

* Menu:

* sphinx.ext.autodoc – Include documentation from docstrings: sphinx ext autodoc – Include documentation from docstrings.
* sphinx.ext.autosectionlabel – Allow reference sections using its title: sphinx ext autosectionlabel – Allow reference sections using its title.
* sphinx.ext.autosummary – Generate autodoc summaries: sphinx ext autosummary – Generate autodoc summaries.
* sphinx.ext.coverage – Collect doc coverage stats: sphinx ext coverage – Collect doc coverage stats.
* sphinx.ext.doctest – Test snippets in the documentation: sphinx ext doctest – Test snippets in the documentation.
* sphinx.ext.extlinks – Markup to shorten external links: sphinx ext extlinks – Markup to shorten external links.
* sphinx.ext.githubpages – Publish HTML docs in GitHub Pages: sphinx ext githubpages – Publish HTML docs in GitHub Pages.
* sphinx.ext.graphviz – Add Graphviz graphs: sphinx ext graphviz – Add Graphviz graphs.
* sphinx.ext.ifconfig – Include content based on configuration: sphinx ext ifconfig – Include content based on configuration.
* sphinx.ext.imgconverter – Convert images to appropriate format for builders: sphinx ext imgconverter – Convert images to appropriate format for builders.
* sphinx.ext.inheritance_diagram – Include inheritance diagrams: sphinx ext inheritance_diagram – Include inheritance diagrams.
* sphinx.ext.intersphinx – Link to other projects’ documentation: sphinx ext intersphinx – Link to other projects’ documentation.
* sphinx.ext.linkcode – Add external links to source code: sphinx ext linkcode – Add external links to source code.
* Math support in Sphinx::
* sphinx.ext.napoleon – Support for NumPy and Google style docstrings: sphinx ext napoleon – Support for NumPy and Google style docstrings.
* sphinx.ext.todo – Support for todo items: sphinx ext todo – Support for todo items.
* sphinx.ext.viewcode – Add links to highlighted source code: sphinx ext viewcode – Add links to highlighted source code.


File: sphinx.info,  Node: sphinx ext autodoc – Include documentation from docstrings,  Next: sphinx ext autosectionlabel – Allow reference sections using its title,  Up: Builtin Sphinx extensions

17.1.1 ‘sphinx.ext.autodoc’ – Include documentation from docstrings
-------------------------------------------------------------------

This extension can import the modules you are documenting, and pull in
documentation from docstrings in a semi-automatic way.

     Note: For Sphinx (actually, the Python interpreter that executes
     Sphinx) to find your module, it must be importable.  That means
     that the module or the package must be in one of the directories on
     ‘sys.path’ – adapt your ‘sys.path’ in the configuration file
     accordingly.

     Warning: *note autodoc: 18. `imports' the modules to be documented.
     If any modules have side effects on import, these will be executed
     by ‘autodoc’ when ‘sphinx-build’ is run.

     If you document scripts (as opposed to library modules), make sure
     their main routine is protected by a ‘if __name__ == '__main__'’
     condition.

For this to work, the docstrings must of course be written in correct
reStructuredText.  You can then use all of the usual Sphinx markup in
the docstrings, and it will end up correctly in the documentation.
Together with hand-written documentation, this technique eases the pain
of having to maintain two locations for documentation, while at the same
time avoiding auto-generated-looking pure API documentation.

If you prefer NumPy(1) or Google(2) style docstrings over
reStructuredText, you can also enable the *note napoleon: 29. extension.
*note napoleon: 29. is a preprocessor that converts your docstrings to
correct reStructuredText before ‘autodoc’ processes them.

‘autodoc’ provides several directives that are versions of the usual
*note py;module: 111, *note py;class: 56. and so forth.  On parsing
time, they import the corresponding module and extract the docstring of
the given objects, inserting them into the page source under a suitable
*note py;module: 111, *note py;class: 56. etc.  directive.

     Note: Just as *note py;class: 56. respects the current *note
     py;module: 111, *note autoclass: 383. will also do so.  Likewise,
     *note automethod: 384. will respect the current *note py;class: 56.

 -- reStructuredText Directive: .. automodule::
 -- reStructuredText Directive: .. autoclass::
 -- reStructuredText Directive: .. autoexception::

     Document a module, class or exception.  All three directives will
     by default only insert the docstring of the object itself:

          .. autoclass:: Noodle

     will produce source like this:

          .. class:: Noodle

             Noodle's docstring.

     The “auto” directives can also contain content of their own, it
     will be inserted into the resulting non-auto directive source after
     the docstring (but before any automatic member documentation).

     Therefore, you can also mix automatic and non-automatic member
     documentation, like so:

          .. autoclass:: Noodle
             :members: eat, slurp

             .. method:: boil(time=10)

                Boil the noodle *time* minutes.

     `Options and advanced usage'

        * If you want to automatically document members, there’s a
          ‘members’ option:

               .. automodule:: noodle
                  :members:

          will document all module members (recursively), and

               .. autoclass:: Noodle
                  :members:

          will document all non-private member functions and properties
          (that is, those whose name doesn’t start with ‘_’).

          For modules, ‘__all__’ will be respected when looking for
          members unless you give the ‘ignore-module-all’ flag option.
          Without ‘ignore-module-all’, the order of the members will
          also be the order in ‘__all__’.

          You can also give an explicit list of members; only these will
          then be documented:

               .. autoclass:: Noodle
                  :members: eat, slurp

        * If you want to make the ‘members’ option (or other flag
          options described below) the default, see *note
          autodoc_default_flags: 387.

        * Members without docstrings will be left out, unless you give
          the ‘undoc-members’ flag option:

               .. automodule:: noodle
                  :members:
                  :undoc-members:

        * “Private” members (that is, those named like ‘_private’ or
          ‘__private’) will be included if the ‘private-members’ flag
          option is given.

          New in version 1.1.

        * Python “special” members (that is, those named like
          ‘__special__’) will be included if the ‘special-members’ flag
          option is given:

               .. autoclass:: my.Class
                  :members:
                  :private-members:
                  :special-members:

          would document both “private” and “special” members of the
          class.

          New in version 1.1.

          Changed in version 1.2: The option can now take arguments,
          i.e.  the special members to document.

        * For classes and exceptions, members inherited from base
          classes will be left out when documenting all members, unless
          you give the ‘inherited-members’ flag option, in addition to
          ‘members’:

               .. autoclass:: Noodle
                  :members:
                  :inherited-members:

          This can be combined with ‘undoc-members’ to document `all'
          available members of the class or module.

          Note: this will lead to markup errors if the inherited members
          come from a module whose docstrings are not reST formatted.

          New in version 0.3.

        * It’s possible to override the signature for explicitly
          documented callable objects (functions, methods, classes) with
          the regular syntax that will override the signature gained
          from introspection:

               .. autoclass:: Noodle(type)

                  .. automethod:: eat(persona)

          This is useful if the signature from the method is hidden by a
          decorator.

          New in version 0.4.

        * The *note automodule: 385, *note autoclass: 383. and *note
          autoexception: 386. directives also support a flag option
          called ‘show-inheritance’.  When given, a list of base classes
          will be inserted just below the class signature (when used
          with *note automodule: 385, this will be inserted for every
          class that is documented in the module).

          New in version 0.4.

        * All autodoc directives support the ‘noindex’ flag option that
          has the same effect as for standard *note py;function: 180.
          etc.  directives: no index entries are generated for the
          documented object (and all autodocumented members).

          New in version 0.4.

        * *note automodule: 385. also recognizes the ‘synopsis’,
          ‘platform’ and ‘deprecated’ options that the standard *note
          py;module: 111. directive supports.

          New in version 0.5.

        * *note automodule: 385. and *note autoclass: 383. also has an
          ‘member-order’ option that can be used to override the global
          value of *note autodoc_member_order: 388. for one directive.

          New in version 0.6.

        * The directives supporting member documentation also have a
          ‘exclude-members’ option that can be used to exclude single
          member names from documentation, if all members are to be
          documented.

          New in version 0.6.

        * In an *note automodule: 385. directive with the ‘members’
          option set, only module members whose ‘__module__’ attribute
          is equal to the module name as given to ‘automodule’ will be
          documented.  This is to prevent documentation of imported
          classes or functions.  Set the ‘imported-members’ option if
          you want to prevent this behavior and document all available
          members.  Note that attributes from imported modules will not
          be documented, because attribute documentation is discovered
          by parsing the source file of the current module.

          New in version 1.2.

        * Add a list of modules in the *note autodoc_mock_imports: 389.
          to prevent import errors to halt the building process when
          some external dependencies are not importable at build time.

          New in version 1.3.

 -- reStructuredText Directive: .. autofunction::
 -- reStructuredText Directive: .. autodata::
 -- reStructuredText Directive: .. automethod::
 -- reStructuredText Directive: .. autoattribute::

     These work exactly like *note autoclass: 383. etc., but do not
     offer the options used for automatic member documentation.

     *note autodata: 38b. and *note autoattribute: 38c. support the
     ‘annotation’ option.  Without this option, the representation of
     the object will be shown in the documentation.  When the option is
     given without arguments, only the name of the object will be
     printed:

          .. autodata:: CD_DRIVE
             :annotation:

     You can tell sphinx what should be printed after the name:

          .. autodata:: CD_DRIVE
             :annotation: = your CD device name

     For module data members and class attributes, documentation can
     either be put into a comment with special formatting (using a ‘#:’
     to start the comment instead of just ‘#’), or in a docstring
     `after' the definition.  Comments need to be either on a line of
     their own `before' the definition, or immediately after the
     assignment `on the same line'.  The latter form is restricted to
     one line only.

     This means that in the following class definition, all attributes
     can be autodocumented:

          class Foo:
              """Docstring for class Foo."""

              #: Doc comment for class attribute Foo.bar.
              #: It can have multiple lines.
              bar = 1

              flox = 1.5   #: Doc comment for Foo.flox. One line only.

              baz = 2
              """Docstring for class attribute Foo.baz."""

              def __init__(self):
                  #: Doc comment for instance attribute qux.
                  self.qux = 3

                  self.spam = 4
                  """Docstring for instance attribute spam."""

     Changed in version 0.6: *note autodata: 38b. and *note
     autoattribute: 38c. can now extract docstrings.

     Changed in version 1.1: Comment docs are now allowed on the same
     line after an assignment.

     Changed in version 1.2: *note autodata: 38b. and *note
     autoattribute: 38c. have an ‘annotation’ option.

          Note: If you document decorated functions or methods, keep in
          mind that autodoc retrieves its docstrings by importing the
          module and inspecting the ‘__doc__’ attribute of the given
          function or method.  That means that if a decorator replaces
          the decorated function with another, it must copy the original
          ‘__doc__’ to the new function.

          From Python 2.5, ‘functools.wraps()’ can be used to create
          well-behaved decorating functions.

There are also new config values that you can set:

 -- Configuration Value: autoclass_content

     This value selects what content will be inserted into the main body
     of an *note autoclass: 383. directive.  The possible values are:

     ‘"class"’

          Only the class’ docstring is inserted.  This is the default.
          You can still document ‘__init__’ as a separate method using
          *note automethod: 384. or the ‘members’ option to *note
          autoclass: 383.

     ‘"both"’

          Both the class’ and the ‘__init__’ method’s docstring are
          concatenated and inserted.

     ‘"init"’

          Only the ‘__init__’ method’s docstring is inserted.

     New in version 0.3.

     If the class has no ‘__init__’ method or if the ‘__init__’ method’s
     docstring is empty, but the class has a ‘__new__’ method’s
     docstring, it is used instead.

     New in version 1.4.

 -- Configuration Value: autodoc_member_order

     This value selects if automatically documented members are sorted
     alphabetical (value ‘'alphabetical'’), by member type (value
     ‘'groupwise'’) or by source order (value ‘'bysource'’).  The
     default is alphabetical.

     Note that for source order, the module must be a Python module with
     the source code available.

     New in version 0.6.

     Changed in version 1.0: Support for ‘'bysource'’.

 -- Configuration Value: autodoc_default_flags

     This value is a list of autodoc directive flags that should be
     automatically applied to all autodoc directives.  The supported
     flags are ‘'members'’, ‘'undoc-members'’, ‘'private-members'’,
     ‘'special-members'’, ‘'inherited-members'’, ‘'show-inheritance'’
     and ‘'ignore-module-all'’.

     If you set one of these flags in this config value, you can use a
     negated form, ‘'no-`flag''’, in an autodoc directive, to disable it
     once.  For example, if ‘autodoc_default_flags’ is set to
     ‘['members', 'undoc-members']’, and you write a directive like
     this:

          .. automodule:: foo
             :no-undoc-members:

     the directive will be interpreted as if only ‘:members:’ was given.

     New in version 1.0.

 -- Configuration Value: autodoc_docstring_signature

     Functions imported from C modules cannot be introspected, and
     therefore the signature for such functions cannot be automatically
     determined.  However, it is an often-used convention to put the
     signature into the first line of the function’s docstring.

     If this boolean value is set to ‘True’ (which is the default),
     autodoc will look at the first line of the docstring for functions
     and methods, and if it looks like a signature, use the line as the
     signature and remove it from the docstring content.

     New in version 1.1.

 -- Configuration Value: autodoc_mock_imports

     This value contains a list of modules to be mocked up.  This is
     useful when some external dependencies are not met at build time
     and break the building process.  You may only specify the root
     package of the dependencies themselves and ommit the sub-modules:

          autodoc_mock_imports = ["django"]

     Will mock all imports under the ‘django’ package.

     New in version 1.3.

     Changed in version 1.6: This config value only requires to declare
     the top-level modules that should be mocked.

 -- Configuration Value: autodoc_warningiserror

     This value controls the behavior of *note sphinx-build -W: ba.
     during importing modules.  If ‘False’ is given, autodoc forcely
     suppresses the error if the imported module emits warnings.  By
     default, ‘True’.

 -- Configuration Value: autodoc_inherit_docstrings

     This value controls the docstrings inheritance.  If set to True the
     docstring for classes or methods, if not explicitly set, is
     inherited form parents.

     The default is ‘True’.

     New in version 1.7.

* Menu:

* Docstring preprocessing::
* Skipping members::

   ---------- Footnotes ----------

   (1) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

   (2) https://google.github.io/styleguide/pyguide.html#Comments


File: sphinx.info,  Node: Docstring preprocessing,  Next: Skipping members,  Up: sphinx ext autodoc – Include documentation from docstrings

17.1.1.1 Docstring preprocessing
................................

autodoc provides the following additional events:

 -- Event: autodoc-process-docstring (app, what, name, obj, options,
          lines)

     New in version 0.4.

     Emitted when autodoc has read and processed a docstring.  `lines'
     is a list of strings – the lines of the processed docstring – that
     the event handler can modify `in place' to change what Sphinx puts
     into the output.


     Parameters:

        * ‘app’ – the Sphinx application object

        * ‘what’ – the type of the object which the docstring belongs to
          (one of ‘"module"’, ‘"class"’, ‘"exception"’, ‘"function"’,
          ‘"method"’, ‘"attribute"’)

        * ‘name’ – the fully qualified name of the object

        * ‘obj’ – the object itself

        * ‘options’ – the options given to the directive: an object with
          attributes ‘inherited_members’, ‘undoc_members’,
          ‘show_inheritance’ and ‘noindex’ that are true if the flag
          option of same name was given to the auto directive

        * ‘lines’ – the lines of the docstring, see above

 -- Event: autodoc-process-signature (app, what, name, obj, options,
          signature, return_annotation)

     New in version 0.5.

     Emitted when autodoc has formatted a signature for an object.  The
     event handler can return a new tuple ‘(signature,
     return_annotation)’ to change what Sphinx puts into the output.


     Parameters:

        * ‘app’ – the Sphinx application object

        * ‘what’ – the type of the object which the docstring belongs to
          (one of ‘"module"’, ‘"class"’, ‘"exception"’, ‘"function"’,
          ‘"method"’, ‘"attribute"’)

        * ‘name’ – the fully qualified name of the object

        * ‘obj’ – the object itself

        * ‘options’ – the options given to the directive: an object with
          attributes ‘inherited_members’, ‘undoc_members’,
          ‘show_inheritance’ and ‘noindex’ that are true if the flag
          option of same name was given to the auto directive

        * ‘signature’ – function signature, as a string of the form
          ‘"(parameter_1, parameter_2)"’, or ‘None’ if introspection
          didn’t succeed and signature wasn’t specified in the
          directive.

        * ‘return_annotation’ – function return annotation as a string
          of the form ‘" -> annotation"’, or ‘None’ if there is no
          return annotation

The *note sphinx.ext.autodoc: 18. module provides factory functions for
commonly needed docstring processing in event *note
autodoc-process-docstring: 392.:

 -- Function: sphinx.ext.autodoc.cut_lines (pre, post=0, what=None)

     Return a listener that removes the first `pre' and last `post'
     lines of every docstring.  If `what' is a sequence of strings, only
     docstrings of a type in `what' will be processed.

     Use like this (e.g.  in the ‘setup()’ function of ‘conf.py’):

          from sphinx.ext.autodoc import cut_lines
          app.connect('autodoc-process-docstring', cut_lines(4, what=['module']))

     This can (and should) be used in place of ‘automodule_skip_lines’.

 -- Function: sphinx.ext.autodoc.between (marker, what=None,
          keepempty=False, exclude=False)

     Return a listener that either keeps, or if `exclude' is True
     excludes, lines between lines that match the `marker' regular
     expression.  If no line matches, the resulting docstring would be
     empty, so no change will be made unless `keepempty' is true.

     If `what' is a sequence of strings, only docstrings of a type in
     `what' will be processed.


File: sphinx.info,  Node: Skipping members,  Prev: Docstring preprocessing,  Up: sphinx ext autodoc – Include documentation from docstrings

17.1.1.2 Skipping members
.........................

autodoc allows the user to define a custom method for determining
whether a member should be included in the documentation by using the
following event:

 -- Event: autodoc-skip-member (app, what, name, obj, skip, options)

     New in version 0.5.

     Emitted when autodoc has to decide whether a member should be
     included in the documentation.  The member is excluded if a handler
     returns ‘True’.  It is included if the handler returns ‘False’.

     If more than one enabled extension handles the
     ‘autodoc-skip-member’ event, autodoc will use the first non-‘None’
     value returned by a handler.  Handlers should return ‘None’ to fall
     back to the skipping behavior of autodoc and other enabled
     extensions.


     Parameters:

        * ‘app’ – the Sphinx application object

        * ‘what’ – the type of the object which the docstring belongs to
          (one of ‘"module"’, ‘"class"’, ‘"exception"’, ‘"function"’,
          ‘"method"’, ‘"attribute"’)

        * ‘name’ – the fully qualified name of the object

        * ‘obj’ – the object itself

        * ‘skip’ – a boolean indicating if autodoc will skip this member
          if the user handler does not override the decision

        * ‘options’ – the options given to the directive: an object with
          attributes ‘inherited_members’, ‘undoc_members’,
          ‘show_inheritance’ and ‘noindex’ that are true if the flag
          option of same name was given to the auto directive


File: sphinx.info,  Node: sphinx ext autosectionlabel – Allow reference sections using its title,  Next: sphinx ext autosummary – Generate autodoc summaries,  Prev: sphinx ext autodoc – Include documentation from docstrings,  Up: Builtin Sphinx extensions

17.1.2 ‘sphinx.ext.autosectionlabel’ – Allow reference sections using its title
-------------------------------------------------------------------------------

New in version 1.4.

This extension allows you to refer sections its title.  This affects to
the reference role (*note ref: 4e.).

For example:

     A Plain Title
     -------------

     This is the text of the section.

     It refers to the section title, see :ref:`A Plain Title`.

Internally, this extension generates the labels for each section.  If
same section names are used in whole of document, any one is used for a
target by default.  The ‘autosectionlabel_prefix_document’ configuration
variable can be used to make headings which appear multiple times but in
different documents unique.

* Menu:

* Configuration: Configuration<2>.


File: sphinx.info,  Node: Configuration<2>,  Up: sphinx ext autosectionlabel – Allow reference sections using its title

17.1.2.1 Configuration
......................

 -- Configuration Value: autosectionlabel_prefix_document

     True to prefix each section label with the name of the document it
     is in, followed by a colon.  For example, ‘index:Introduction’ for
     a section called ‘Introduction’ that appears in document
     ‘index.rst’.  Useful for avoiding ambiguity when the same section
     heading appears in different documents.


File: sphinx.info,  Node: sphinx ext autosummary – Generate autodoc summaries,  Next: sphinx ext coverage – Collect doc coverage stats,  Prev: sphinx ext autosectionlabel – Allow reference sections using its title,  Up: Builtin Sphinx extensions

17.1.3 ‘sphinx.ext.autosummary’ – Generate autodoc summaries
------------------------------------------------------------

New in version 0.6.

This extension generates function/method/attribute summary lists,
similar to those output e.g.  by Epydoc and other API doc generation
tools.  This is especially useful when your docstrings are long and
detailed, and putting each one of them on a separate page makes them
easier to read.

The *note sphinx.ext.autosummary: 1a. extension does this in two parts:

  1. There is an *note autosummary: e1. directive for generating summary
     listings that contain links to the documented items, and short
     summary blurbs extracted from their docstrings.

  2. Optionally, the convenience script ‘sphinx-autogen’ or the new
     *note autosummary_generate: 39e. config value can be used to
     generate short “stub” files for the entries listed in the *note
     autosummary: e1. directives.  These files by default contain only
     the corresponding *note sphinx.ext.autodoc: 18. directive, but can
     be customized with templates.

 -- reStructuredText Directive: .. autosummary::

     Insert a table that contains links to documented items, and a short
     summary blurb (the first sentence of the docstring) for each of
     them.

     The *note autosummary: e1. directive can also optionally serve as a
     *note toctree: 10a. entry for the included items.  Optionally, stub
     ‘.rst’ files for these items can also be automatically generated.

     For example,

          .. currentmodule:: sphinx

          .. autosummary::

             environment.BuildEnvironment
             util.relative_uri

     produces a table like this:

          *note environment.BuildEnvironment: 39f.(app)The environment in which the ReST files are translated.
                         
                         
          ‘util.relative_uri’(base,Return a relative URL from ‘base’ to ‘to’.
          to)            

     Autosummary preprocesses the docstrings and signatures with the
     same *note autodoc-process-docstring: 392. and *note
     autodoc-process-signature: 393. hooks as *note autodoc: 18.

     `Options'

        * If you want the *note autosummary: e1. table to also serve as
          a *note toctree: 10a. entry, use the ‘toctree’ option, for
          example:

               .. autosummary::
                  :toctree: DIRNAME

                  sphinx.environment.BuildEnvironment
                  sphinx.util.relative_uri

          The ‘toctree’ option also signals to the ‘sphinx-autogen’
          script that stub pages should be generated for the entries
          listed in this directive.  The option accepts a directory name
          as an argument; ‘sphinx-autogen’ will by default place its
          output in this directory.  If no argument is given, output is
          placed in the same directory as the file that contains the
          directive.

        * If you don’t want the *note autosummary: e1. to show function
          signatures in the listing, include the ‘nosignatures’ option:

               .. autosummary::
                  :nosignatures:

                  sphinx.environment.BuildEnvironment
                  sphinx.util.relative_uri

        * You can specify a custom template with the ‘template’ option.
          For example,

               .. autosummary::
                  :template: mytemplate.rst

                  sphinx.environment.BuildEnvironment

          would use the template ‘mytemplate.rst’ in your *note
          templates_path: 26d. to generate the pages for all entries
          listed.  See *note Customizing templates: 3a0. below.

          New in version 1.0.

* Menu:

* sphinx-autogen – generate autodoc stub pages::
* Generating stub pages automatically::
* Customizing templates::


File: sphinx.info,  Node: sphinx-autogen – generate autodoc stub pages,  Next: Generating stub pages automatically,  Up: sphinx ext autosummary – Generate autodoc summaries

17.1.3.1 ‘sphinx-autogen’ – generate autodoc stub pages
.......................................................

The ‘sphinx-autogen’ script can be used to conveniently generate stub
documentation pages for items included in *note autosummary: e1.
listings.

For example, the command

     $ sphinx-autogen -o generated *.rst

will read all *note autosummary: e1. tables in the ‘*.rst’ files that
have the ‘:toctree:’ option set, and output corresponding stub pages in
directory ‘generated’ for all documented items.  The generated pages by
default contain text of the form:

     sphinx.util.relative_uri
     ========================

     .. autofunction:: sphinx.util.relative_uri

If the ‘-o’ option is not given, the script will place the output files
in the directories specified in the ‘:toctree:’ options.

For more information, refer to the *note sphinx-autogen documentation:
dd.


File: sphinx.info,  Node: Generating stub pages automatically,  Next: Customizing templates,  Prev: sphinx-autogen – generate autodoc stub pages,  Up: sphinx ext autosummary – Generate autodoc summaries

17.1.3.2 Generating stub pages automatically
............................................

If you do not want to create stub pages with ‘sphinx-autogen’, you can
also use this new config value:

 -- Configuration Value: autosummary_generate

     Boolean indicating whether to scan all found documents for
     autosummary directives, and to generate stub pages for each.

     Can also be a list of documents for which stub pages should be
     generated.

     The new files will be placed in the directories specified in the
     ‘:toctree:’ options of the directives.


File: sphinx.info,  Node: Customizing templates,  Prev: Generating stub pages automatically,  Up: sphinx ext autosummary – Generate autodoc summaries

17.1.3.3 Customizing templates
..............................

New in version 1.0.

You can customize the stub page templates, in a similar way as the HTML
Jinja templates, see *note Templating: 66.  (*note TemplateBridge: 26f.
is not supported.)

     Note: If you find yourself spending much time tailoring the stub
     templates, this may indicate that it’s a better idea to write
     custom narrative documentation instead.

Autosummary uses the following Jinja template files:

   - ‘autosummary/base.rst’ – fallback template

   - ‘autosummary/module.rst’ – template for modules

   - ‘autosummary/class.rst’ – template for classes

   - ‘autosummary/function.rst’ – template for functions

   - ‘autosummary/attribute.rst’ – template for class attributes

   - ‘autosummary/method.rst’ – template for class methods

The following variables available in the templates:

 -- Data: name

     Name of the documented object, excluding the module and class
     parts.

 -- Data: objname

     Name of the documented object, excluding the module parts.

 -- Data: fullname

     Full name of the documented object, including module and class
     parts.

 -- Data: module

     Name of the module the documented object belongs to.

 -- Data: class

     Name of the class the documented object belongs to.  Only available
     for methods and attributes.

 -- Data: underline

     A string containing ‘len(full_name) * '='’.  Use the ‘underline’
     filter instead.

 -- Data: members

     List containing names of all members of the module or class.  Only
     available for modules and classes.

 -- Data: functions

     List containing names of “public” functions in the module.  Here,
     “public” here means that the name does not start with an
     underscore.  Only available for modules.

 -- Data: classes

     List containing names of “public” classes in the module.  Only
     available for modules.

 -- Data: exceptions

     List containing names of “public” exceptions in the module.  Only
     available for modules.

 -- Data: methods

     List containing names of “public” methods in the class.  Only
     available for classes.

 -- Data: attributes

     List containing names of “public” attributes in the class.  Only
     available for classes.

Additionally, the following filters are available

 -- Function: escape (s)

     Escape any special characters in the text to be used in formatting
     RST contexts.  For instance, this prevents asterisks making things
     bold.  This replaces the builtin Jinja escape filter(1) that does
     html-escaping.

 -- Function: underline (s, line='=')

     Add a title underline to a piece of text.

For instance, ‘{{ fullname | escape | underline }}’ should be used to
produce the title of a page.

     Note: You can use the *note autosummary: e1. directive in the stub
     pages.  Stub pages are generated also based on these directives.

   ---------- Footnotes ----------

   (1) http://jinja.pocoo.org/docs/2.9/templates/#escape


File: sphinx.info,  Node: sphinx ext coverage – Collect doc coverage stats,  Next: sphinx ext doctest – Test snippets in the documentation,  Prev: sphinx ext autosummary – Generate autodoc summaries,  Up: Builtin Sphinx extensions

17.1.4 ‘sphinx.ext.coverage’ – Collect doc coverage stats
---------------------------------------------------------

This extension features one additional builder, the *note
CoverageBuilder: 3b3.

 -- Class: sphinx.ext.coverage.CoverageBuilder

     To use this builder, activate the coverage extension in your
     configuration file and give ‘-b coverage’ on the command line.

     Todo: Write this section.

Several new configuration values can be used to specify what the builder
should check:

 -- Configuration Value: coverage_ignore_modules

 -- Configuration Value: coverage_ignore_functions

 -- Configuration Value: coverage_ignore_classes

 -- Configuration Value: coverage_c_path

 -- Configuration Value: coverage_c_regexes

 -- Configuration Value: coverage_ignore_c_items

 -- Configuration Value: coverage_write_headline

     Set to ‘False’ to not write headlines.

     New in version 1.1.

 -- Configuration Value: coverage_skip_undoc_in_source

     Skip objects that are not documented in the source with a
     docstring.  ‘False’ by default.

     New in version 1.1.


File: sphinx.info,  Node: sphinx ext doctest – Test snippets in the documentation,  Next: sphinx ext extlinks – Markup to shorten external links,  Prev: sphinx ext coverage – Collect doc coverage stats,  Up: Builtin Sphinx extensions

17.1.5 ‘sphinx.ext.doctest’ – Test snippets in the documentation
----------------------------------------------------------------

This extension allows you to test snippets in the documentation in a
natural way.  It works by collecting specially-marked up code blocks and
running them as doctest tests.

Within one document, test code is partitioned in `groups', where each
group consists of:

   * zero or more `setup code' blocks (e.g.  importing the module to
     test)

   * one or more `test' blocks

When building the docs with the ‘doctest’ builder, groups are collected
for each document and run one after the other, first executing setup
code blocks, then the test blocks in the order they appear in the file.

There are two kinds of test blocks:

   * `doctest-style' blocks mimic interactive sessions by interleaving
     Python code (including the interpreter prompt) and output.

   * `code-output-style' blocks consist of an ordinary piece of Python
     code, and optionally, a piece of output for that code.

* Menu:

* Directives: Directives<3>.
* Configuration: Configuration<3>.


File: sphinx.info,  Node: Directives<3>,  Next: Configuration<3>,  Up: sphinx ext doctest – Test snippets in the documentation

17.1.5.1 Directives
...................

The `group' argument below is interpreted as follows: if it is empty,
the block is assigned to the group named ‘default’.  If it is ‘*’, the
block is assigned to all groups (including the ‘default’ group).
Otherwise, it must be a comma-separated list of group names.

 -- reStructuredText Directive: .. testsetup:: [group]

     A setup code block.  This code is not shown in the output for other
     builders, but executed before the doctests of the group(s) it
     belongs to.

 -- reStructuredText Directive: .. testcleanup:: [group]

     A cleanup code block.  This code is not shown in the output for
     other builders, but executed after the doctests of the group(s) it
     belongs to.

     New in version 1.1.

 -- reStructuredText Directive: .. doctest:: [group]

     A doctest-style code block.  You can use standard ‘doctest’ flags
     for controlling how actual output is compared with what you give as
     output.  The default set of flags is specified by the *note
     doctest_default_flags: 3c1. configuration variable.

     This directive supports three options:

        * ‘hide’, a flag option, hides the doctest block in other
          builders.  By default it is shown as a highlighted doctest
          block.

        * ‘options’, a string option, can be used to give a
          comma-separated list of doctest flags that apply to each
          example in the tests.  (You still can give explicit flags per
          example, with doctest comments, but they will show up in other
          builders too.)

        * ‘pyversion’, a string option, can be used to specify the
          required Python version for the example to be tested.  For
          instance, in the following case the example will be tested
          only for Python versions greather than 3.3:

               .. doctest::
                  :pyversion: > 3.3

          The following operands are supported:

             * ‘~=’: Compatible release clause

             * ‘==’: Version matching clause

             * ‘!=’: Version exclusion clause

             * ‘<=’, ‘>=’: Inclusive ordered comparison clause

             * ‘<’, ‘>’: Exclusive ordered comparison clause

             * ‘===’: Arbitrary equality clause.

          ‘pyversion’ option is followed PEP-440: Version Specifiers(1).

          New in version 1.6.

          Changed in version 1.7: Supported PEP-440 operands and
          notations

     Note that like with standard doctests, you have to use
     ‘<BLANKLINE>’ to signal a blank line in the expected output.  The
     ‘<BLANKLINE>’ is removed when building presentation output (HTML,
     LaTeX etc.).

     Also, you can give inline doctest options, like in doctest:

          >>> datetime.date.now()   # doctest: +SKIP
          datetime.date(2008, 1, 1)

     They will be respected when the test is run, but stripped from
     presentation output.

 -- reStructuredText Directive: .. testcode:: [group]

     A code block for a code-output-style test.

     This directive supports one option:

        * ‘hide’, a flag option, hides the code block in other builders.
          By default it is shown as a highlighted code block.

          Note: Code in a ‘testcode’ block is always executed all at
          once, no matter how many statements it contains.  Therefore,
          output will `not' be generated for bare expressions – use
          ‘print’.  Example:

               .. testcode::

                  1+1        # this will give no output!
                  print 2+2  # this will give output

               .. testoutput::

                  4

          Also, please be aware that since the doctest module does not
          support mixing regular output and an exception message in the
          same snippet, this applies to testcode/testoutput as well.

 -- reStructuredText Directive: .. testoutput:: [group]

     The corresponding output, or the exception message, for the last
     *note testcode: 3c2. block.

     This directive supports two options:

        * ‘hide’, a flag option, hides the output block in other
          builders.  By default it is shown as a literal block without
          highlighting.

        * ‘options’, a string option, can be used to give doctest flags
          (comma-separated) just like in normal doctest blocks.

     Example:

          .. testcode::

             print 'Output     text.'

          .. testoutput::
             :hide:
             :options: -ELLIPSIS, +NORMALIZE_WHITESPACE

             Output text.

The following is an example for the usage of the directives.  The test
via *note doctest: 3c0. and the test via *note testcode: 3c2. and *note
testoutput: 3c3. are equivalent.

     The parrot module
     =================

     .. testsetup:: *

        import parrot

     The parrot module is a module about parrots.

     Doctest example:

     .. doctest::

        >>> parrot.voom(3000)
        This parrot wouldn't voom if you put 3000 volts through it!

     Test-Output example:

     .. testcode::

        parrot.voom(3000)

     This would output:

     .. testoutput::

        This parrot wouldn't voom if you put 3000 volts through it!

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0440/#version-specifiers


File: sphinx.info,  Node: Configuration<3>,  Prev: Directives<3>,  Up: sphinx ext doctest – Test snippets in the documentation

17.1.5.2 Configuration
......................

The doctest extension uses the following configuration values:

 -- Configuration Value: doctest_default_flags

     By default, these options are enabled:

        - ‘ELLIPSIS’, allowing you to put ellipses in the expected
          output that match anything in the actual output;

        - ‘IGNORE_EXCEPTION_DETAIL’, causing everything following the
          leftmost colon and any module information in the exception
          name to be ignored;

        - ‘DONT_ACCEPT_TRUE_FOR_1’, rejecting “True” in the output where
          “1” is given – the default behavior of accepting this
          substitution is a relic of pre-Python 2.2 times.

     New in version 1.5.

 -- Configuration Value: doctest_path

     A list of directories that will be added to ‘sys.path’ when the
     doctest builder is used.  (Make sure it contains absolute paths.)

 -- Configuration Value: doctest_global_setup

     Python code that is treated like it were put in a ‘testsetup’
     directive for `every' file that is tested, and for every group.
     You can use this to e.g.  import modules you will always need in
     your doctests.

     New in version 0.6.

 -- Configuration Value: doctest_global_cleanup

     Python code that is treated like it were put in a ‘testcleanup’
     directive for `every' file that is tested, and for every group.
     You can use this to e.g.  remove any temporary files that the tests
     leave behind.

     New in version 1.1.

 -- Configuration Value: doctest_test_doctest_blocks

     If this is a nonempty string (the default is ‘'default'’), standard
     reST doctest blocks will be tested too.  They will be assigned to
     the group name given.

     reST doctest blocks are simply doctests put into a paragraph of
     their own, like so:

          Some documentation text.

          >>> print 1
          1

          Some more documentation text.

     (Note that no special ‘::’ is used to introduce a doctest block;
     docutils recognizes them from the leading ‘>>>’.  Also, no
     additional indentation is used, though it doesn’t hurt.)

     If this value is left at its default value, the above snippet is
     interpreted by the doctest builder exactly like the following:

          Some documentation text.

          .. doctest::

             >>> print 1
             1

          Some more documentation text.

     This feature makes it easy for you to test doctests in docstrings
     included with the *note autodoc: 18. extension without marking them
     up with a special directive.

     Note though that you can’t have blank lines in reST doctest blocks.
     They will be interpreted as one block ending and another one
     starting.  Also, removal of ‘<BLANKLINE>’ and ‘# doctest:’ options
     only works in *note doctest: 3c0. blocks, though you may set *note
     trim_doctest_flags: 289. to achieve that in all code blocks with
     Python console content.


File: sphinx.info,  Node: sphinx ext extlinks – Markup to shorten external links,  Next: sphinx ext githubpages – Publish HTML docs in GitHub Pages,  Prev: sphinx ext doctest – Test snippets in the documentation,  Up: Builtin Sphinx extensions

17.1.6 ‘sphinx.ext.extlinks’ – Markup to shorten external links
---------------------------------------------------------------

`Module author: Georg Brandl'

New in version 1.0.

This extension is meant to help with the common pattern of having many
external links that point to URLs on one and the same site, e.g.  links
to bug trackers, version control web interfaces, or simply subpages in
other websites.  It does so by providing aliases to base URLs, so that
you only need to give the subpage name when creating a link.

Let’s assume that you want to include many links to issues at the Sphinx
tracker, at ‘https://github.com/sphinx-doc/sphinx/issues/`num'’.  Typing
this URL again and again is tedious, so you can use *note extlinks: 1d.
to avoid repeating yourself.

The extension adds one new config value:

 -- Configuration Value: extlinks

     This config value must be a dictionary of external sites, mapping
     unique short alias names to a base URL and a `prefix'.  For
     example, to create an alias for the above mentioned issues, you
     would add

          extlinks = {'issue': ('https://github.com/sphinx-doc/sphinx/issues/%s',
                                'issue ')}

     Now, you can use the alias name as a new role, e.g.
     ‘:issue:`123`’.  This then inserts a link to
     ‘https://github.com/sphinx-doc/sphinx/issues/123’.  As you can see,
     the target given in the role is substituted in the base URL in the
     place of ‘%s’.

     The link `caption' depends on the second item in the tuple, the
     `prefix':

        - If the prefix is ‘None’, the link caption is the full URL.

        - If the prefix is the empty string, the link caption is the
          partial URL given in the role content (‘123’ in this case.)

        - If the prefix is a non-empty string, the link caption is the
          partial URL, prepended by the prefix – in the above example,
          the link caption would be ‘issue 123’.

     You can also use the usual “explicit title” syntax supported by
     other roles that generate links, i.e.  ‘:issue:`this issue <123>`’.
     In this case, the `prefix' is not relevant.

     Note: Since links are generated from the role in the reading stage,
     they appear as ordinary links to e.g.  the ‘linkcheck’ builder.


File: sphinx.info,  Node: sphinx ext githubpages – Publish HTML docs in GitHub Pages,  Next: sphinx ext graphviz – Add Graphviz graphs,  Prev: sphinx ext extlinks – Markup to shorten external links,  Up: Builtin Sphinx extensions

17.1.7 ‘sphinx.ext.githubpages’ – Publish HTML docs in GitHub Pages
-------------------------------------------------------------------

New in version 1.4.

This extension creates ‘.nojekyll’ file on generated HTML directory to
publish the document on GitHub Pages.


File: sphinx.info,  Node: sphinx ext graphviz – Add Graphviz graphs,  Next: sphinx ext ifconfig – Include content based on configuration,  Prev: sphinx ext githubpages – Publish HTML docs in GitHub Pages,  Up: Builtin Sphinx extensions

17.1.8 ‘sphinx.ext.graphviz’ – Add Graphviz graphs
--------------------------------------------------

New in version 0.6.

This extension allows you to embed Graphviz(1) graphs in your documents.

It adds these directives:

 -- reStructuredText Directive: .. graphviz::

     Directive to embed graphviz code.  The input code for ‘dot’ is
     given as the content.  For example:

          .. graphviz::

             digraph foo {
                "bar" -> "baz";
             }

     In HTML output, the code will be rendered to a PNG or SVG image
     (see *note graphviz_output_format: 3d1.).  In LaTeX output, the
     code will be rendered to an embeddable PDF file.

     You can also embed external dot files, by giving the file name as
     an argument to *note graphviz: 3d0. and no additional content:

          .. graphviz:: external.dot

     As for all file references in Sphinx, if the filename is absolute,
     it is taken as relative to the source directory.

     Changed in version 1.1: Added support for external files.

 -- reStructuredText Directive: .. graph::

     Directive for embedding a single undirected graph.  The name is
     given as a directive argument, the contents of the graph are the
     directive content.  This is a convenience directive to generate
     ‘graph <name> { <content> }’.

     For example:

          .. graph:: foo

             "bar" -- "baz";

          Note: The graph name is passed unchanged to Graphviz.  If it
          contains non-alphanumeric characters (e.g.  a dash), you will
          have to double-quote it.

 -- reStructuredText Directive: .. digraph::

     Directive for embedding a single directed graph.  The name is given
     as a directive argument, the contents of the graph are the
     directive content.  This is a convenience directive to generate
     ‘digraph <name> { <content> }’.

     For example:

          .. digraph:: foo

             "bar" -> "baz" -> "quux";

New in version 1.0: All three directives support an ‘alt’ option that
determines the image’s alternate text for HTML output.  If not given,
the alternate text defaults to the graphviz code.

New in version 1.1: All three directives support a ‘caption’ option that
can be used to give a caption to the diagram.

Changed in version 1.4: All three directives support a ‘graphviz_dot’
option that can be switch the ‘dot’ command within the directive.

New in version 1.5: All three directives support a ‘align’ option to
align the graph horizontal.  The values “left”, “center”, “right” are
allowed.

New in version 1.6: All three directives support a ‘name’ option to set
the label to graph.

There are also these new config values:

 -- Configuration Value: graphviz_dot

     The command name with which to invoke ‘dot’.  The default is
     ‘'dot'’; you may need to set this to a full path if ‘dot’ is not in
     the executable search path.

     Since this setting is not portable from system to system, it is
     normally not useful to set it in ‘conf.py’; rather, giving it on
     the ‘sphinx-build’ command line via the *note -D: b0. option should
     be preferable, like this:

          sphinx-build -b html -D graphviz_dot=C:\graphviz\bin\dot.exe . _build/html

 -- Configuration Value: graphviz_dot_args

     Additional command-line arguments to give to dot, as a list.  The
     default is an empty list.  This is the right place to set global
     graph, node or edge attributes via dot’s ‘-G’, ‘-N’ and ‘-E’
     options.

 -- Configuration Value: graphviz_output_format

     The output format for Graphviz when building HTML files.  This must
     be either ‘'png'’ or ‘'svg'’; the default is ‘'png'’.  If ‘'svg'’
     is used, in order to make the URL links work properly, an
     appropriate ‘target’ attribute must be set, such as ‘"_top"’ and
     ‘"_blank"’.  For example, the link in the following graph should
     work in the svg output:

          .. graphviz::

               digraph example {
                   a [label="sphinx", href="http://sphinx-doc.org", target="_top"];
                   b [label="other"];
                   a -> b;
               }

     New in version 1.0: Previously, output always was PNG.

   ---------- Footnotes ----------

   (1) https://graphviz.org/


File: sphinx.info,  Node: sphinx ext ifconfig – Include content based on configuration,  Next: sphinx ext imgconverter – Convert images to appropriate format for builders,  Prev: sphinx ext graphviz – Add Graphviz graphs,  Up: Builtin Sphinx extensions

17.1.9 ‘sphinx.ext.ifconfig’ – Include content based on configuration
---------------------------------------------------------------------

This extension is quite simple, and features only one directive:

 -- reStructuredText Directive: .. ifconfig::

     Include content of the directive only if the Python expression
     given as an argument is ‘True’, evaluated in the namespace of the
     project’s configuration (that is, all registered variables from
     ‘conf.py’ are available).

     For example, one could write

          .. ifconfig:: releaselevel in ('alpha', 'beta', 'rc')

             This stuff is only included in the built docs for unstable versions.

     To make a custom config value known to Sphinx, use *note
     add_config_value(): 3d9. in the setup function in ‘conf.py’, e.g.:

          def setup(app):
              app.add_config_value('releaselevel', '', 'env')

     The second argument is the default value, the third should always
     be ‘'env'’ for such values (it selects if Sphinx re-reads the
     documents if the value changes).


File: sphinx.info,  Node: sphinx ext imgconverter – Convert images to appropriate format for builders,  Next: sphinx ext inheritance_diagram – Include inheritance diagrams,  Prev: sphinx ext ifconfig – Include content based on configuration,  Up: Builtin Sphinx extensions

17.1.10 ‘sphinx.ext.imgconverter’ – Convert images to appropriate format for builders
-------------------------------------------------------------------------------------

New in version 1.6.

This extension converts images in your document to appropriate format
for builders.  For example, it allows you to use SVG images with LaTeX
builder.  As a result, you don’t mind what image format the builder
supports.

Internally, this extension uses Imagemagick(1) to convert images.

* Menu:

* Configuration: Configuration<4>.

   ---------- Footnotes ----------

   (1) https://www.imagemagick.org/script/index.php


File: sphinx.info,  Node: Configuration<4>,  Up: sphinx ext imgconverter – Convert images to appropriate format for builders

17.1.10.1 Configuration
.......................

 -- Configuration Value: image_converter

     A path to ‘convert’ command.  By default, the imgconverter uses the
     command from search paths.

 -- Configuration Value: image_converter_args

     Additional command-line arguments to give to ‘convert’, as a list.
     The default is an empty list ‘[]’.


File: sphinx.info,  Node: sphinx ext inheritance_diagram – Include inheritance diagrams,  Next: sphinx ext intersphinx – Link to other projects’ documentation,  Prev: sphinx ext imgconverter – Convert images to appropriate format for builders,  Up: Builtin Sphinx extensions

17.1.11 ‘sphinx.ext.inheritance_diagram’ – Include inheritance diagrams
-----------------------------------------------------------------------

New in version 0.6.

This extension allows you to include inheritance diagrams, rendered via
the *note Graphviz extension: 1f.

It adds this directive:

 -- reStructuredText Directive: .. inheritance-diagram::

     This directive has one or more arguments, each giving a module or
     class name.  Class names can be unqualified; in that case they are
     taken to exist in the currently described module (see *note
     py;module: 111.).

     For each given class, and each class in each given module, the base
     classes are determined.  Then, from all classes and their base
     classes, a graph is generated which is then rendered via the
     graphviz extension to a directed graph.

     This directive supports an option called ‘parts’ that, if given,
     must be an integer, advising the directive to remove that many
     parts of module names from the displayed names.  (For example, if
     all your class names start with ‘lib.’, you can give ‘:parts: 1’ to
     remove that prefix from the displayed node names.)

     It also supports a ‘private-bases’ flag option; if given, private
     base classes (those whose name starts with ‘_’) will be included.

     You can use ‘caption’ option to give a caption to the diagram.

     Changed in version 1.1: Added ‘private-bases’ option; previously,
     all bases were always included.

     Changed in version 1.5: Added ‘caption’ option

     It also supports a ‘top-classes’ option which requires one or more
     class names separated by comma.  If specified inheritance traversal
     will stop at the specified class names.  Given the following Python
     module:

          """
                 A
                / \
               B   C
              / \ / \
             E   D   F
          """

          class A(object):
              pass

          class B(A):
              pass

          class C(A):
              pass

          class D(B, C):
              pass

          class E(B):
              pass

          class F(C):
              pass

     If you have specified a module in the inheritance diagram like
     this:

          .. inheritance-diagram:: dummy.test
             :top-classes: dummy.test.B, dummy.test.C

     any base classes which are ancestors to ‘top-classes’ and are also
     defined in the same module will be rendered as stand alone nodes.
     In this example class A will be rendered as stand alone node in the
     graph.  This is a known issue due to how this extension works
     internally.

     If you don’t want class A (or any other ancestors) to be visible
     then specify only the classes you would like to generate the
     diagram for like this:

          .. inheritance-diagram:: dummy.test.D dummy.test.E dummy.test.F
             :top-classes: dummy.test.B, dummy.test.C

     Changed in version 1.7: Added ‘top-classes’ option to limit the
     scope of inheritance graphs.

New config values are:

 -- Configuration Value: inheritance_graph_attrs

     A dictionary of graphviz graph attributes for inheritance diagrams.

     For example:

          inheritance_graph_attrs = dict(rankdir="LR", size='"6.0, 8.0"',
                                         fontsize=14, ratio='compress')

 -- Configuration Value: inheritance_node_attrs

     A dictionary of graphviz node attributes for inheritance diagrams.

     For example:

          inheritance_node_attrs = dict(shape='ellipse', fontsize=14, height=0.75,
                                        color='dodgerblue1', style='filled')

 -- Configuration Value: inheritance_edge_attrs

     A dictionary of graphviz edge attributes for inheritance diagrams.

 -- Configuration Value: inheritance_alias

     Allows mapping the full qualified name of the class to custom
     values (useful when exposing the underlying path of a class is not
     desirable, e.g.  it’s a private class and should not be
     instantiated by the user).

     For example:

          inheritance_alias = {'_pytest.Magic': 'pytest.Magic'}


File: sphinx.info,  Node: sphinx ext intersphinx – Link to other projects’ documentation,  Next: sphinx ext linkcode – Add external links to source code,  Prev: sphinx ext inheritance_diagram – Include inheritance diagrams,  Up: Builtin Sphinx extensions

17.1.12 ‘sphinx.ext.intersphinx’ – Link to other projects’ documentation
------------------------------------------------------------------------

New in version 0.5.

This extension can generate automatic links to the documentation of
objects in other projects.

Usage is simple: whenever Sphinx encounters a cross-reference that has
no matching target in the current documentation set, it looks for
targets in the documentation sets configured in *note
intersphinx_mapping: 5e.  A reference like ‘:py:class:`zipfile.ZipFile`’
can then link to the Python documentation for the ZipFile class, without
you having to specify where it is located exactly.

When using the “new” format (see below), you can even force lookup in a
foreign set by prefixing the link target appropriately.  A link like
‘:ref:`comparison manual <python:comparisons>`’ will then link to the
label “comparisons” in the doc set “python”, if it exists.

Behind the scenes, this works as follows:

   * Each Sphinx HTML build creates a file named ‘objects.inv’ that
     contains a mapping from object names to URIs relative to the HTML
     set’s root.

   * Projects using the Intersphinx extension can specify the location
     of such mapping files in the *note intersphinx_mapping: 5e. config
     value.  The mapping will then be used to resolve otherwise missing
     references to objects into links to the other documentation.

   * By default, the mapping file is assumed to be at the same location
     as the rest of the documentation; however, the location of the
     mapping file can also be specified individually, e.g.  if the docs
     should be buildable without Internet access.

* Menu:

* Configuring Intersphinx::
* Showing all links of an Intersphinx mapping file::


File: sphinx.info,  Node: Configuring Intersphinx,  Next: Showing all links of an Intersphinx mapping file,  Up: sphinx ext intersphinx – Link to other projects’ documentation

17.1.12.1 Configuring Intersphinx
.................................

To use Intersphinx linking, add ‘'sphinx.ext.intersphinx'’ to your *note
extensions: 5c. config value, and use these new config values to
activate linking:

 -- Configuration Value: intersphinx_mapping

     This config value contains the locations and names of other
     projects that should be linked to in this documentation.

     Relative local paths for target locations are taken as relative to
     the base of the built documentation, while relative local paths for
     inventory locations are taken as relative to the source directory.

     When fetching remote inventory files, proxy settings will be read
     from the ‘$HTTP_PROXY’ environment variable.

     `Old format for this config value'

     This is the format used before Sphinx 1.0.  It is still recognized.

     A dictionary mapping URIs to either ‘None’ or an URI. The keys are
     the base URI of the foreign Sphinx documentation sets and can be
     local paths or HTTP URIs.  The values indicate where the inventory
     file can be found: they can be ‘None’ (at the same location as the
     base URI) or another local or HTTP URI.

     `New format for this config value'

     New in version 1.0.

     A dictionary mapping unique identifiers to a tuple ‘(target,
     inventory)’.  Each ‘target’ is the base URI of a foreign Sphinx
     documentation set and can be a local path or an HTTP URI. The
     ‘inventory’ indicates where the inventory file can be found: it can
     be ‘None’ (at the same location as the base URI) or another local
     or HTTP URI.

     The unique identifier can be used to prefix cross-reference
     targets, so that it is clear which intersphinx set the target
     belongs to.  A link like ‘:ref:`comparison manual
     <python:comparisons>`’ will link to the label “comparisons” in the
     doc set “python”, if it exists.

     `Example'

     To add links to modules and objects in the Python standard library
     documentation, use:

          intersphinx_mapping = {'python': ('https://docs.python.org/3', None)}

     This will download the corresponding ‘objects.inv’ file from the
     Internet and generate links to the pages under the given URI. The
     downloaded inventory is cached in the Sphinx environment, so it
     must be re-downloaded whenever you do a full rebuild.

     A second example, showing the meaning of a non-‘None’ value of the
     second tuple item:

          intersphinx_mapping = {'python': ('https://docs.python.org/3',
                                            'python-inv.txt')}

     This will read the inventory from ‘python-inv.txt’ in the source
     directory, but still generate links to the pages under
     ‘https://docs.python.org/3’.  It is up to you to update the
     inventory file as new objects are added to the Python
     documentation.

     `Multiple target for the inventory'

     New in version 1.3.

     Alternative files can be specified for each inventory.  One can
     give a tuple for the second inventory tuple item as shown in the
     following example.  This will read the inventory iterating through
     the (second) tuple items until the first successful fetch.  The
     primary use case for this to specify mirror sites for server
     downtime of the primary inventory:

          intersphinx_mapping = {'python': ('https://docs.python.org/3',
                                            (None, 'python-inv.txt'))}

 -- Configuration Value: intersphinx_cache_limit

     The maximum number of days to cache remote inventories.  The
     default is ‘5’, meaning five days.  Set this to a negative value to
     cache inventories for unlimited time.

 -- Configuration Value: intersphinx_timeout

     The number of seconds for timeout.  The default is ‘None’, meaning
     do not timeout.

          Note: timeout is not a time limit on the entire response
          download; rather, an exception is raised if the server has not
          issued a response for timeout seconds.


File: sphinx.info,  Node: Showing all links of an Intersphinx mapping file,  Prev: Configuring Intersphinx,  Up: sphinx ext intersphinx – Link to other projects’ documentation

17.1.12.2 Showing all links of an Intersphinx mapping file
..........................................................

To show all Intersphinx links and their targets of an Intersphinx
mapping file, run ‘python -msphinx.ext.intersphinx url-or-path’.  This
is helpful when searching for the root cause of a broken Intersphinx
link in a documentation project.  The following example prints the
Intersphinx mapping of the Python 3 documentation:

     $ python -msphinx.ext.intersphinx https://docs.python.org/3/objects.inv


File: sphinx.info,  Node: sphinx ext linkcode – Add external links to source code,  Next: Math support in Sphinx,  Prev: sphinx ext intersphinx – Link to other projects’ documentation,  Up: Builtin Sphinx extensions

17.1.13 ‘sphinx.ext.linkcode’ – Add external links to source code
-----------------------------------------------------------------

`Module author: Pauli Virtanen'

New in version 1.2.

This extension looks at your object descriptions (‘.. class::’, ‘..
function::’ etc.)  and adds external links to code hosted somewhere on
the web.  The intent is similar to the ‘sphinx.ext.viewcode’ extension,
but assumes the source code can be found somewhere on the Internet.

In your configuration, you need to specify a *note linkcode_resolve:
3ef. function that returns an URL based on the object.

 -- Configuration Value: linkcode_resolve

     This is a function ‘linkcode_resolve(domain, info)’, which should
     return the URL to source code corresponding to the object in given
     domain with given information.

     The function should return ‘None’ if no link is to be added.

     The argument ‘domain’ specifies the language domain the object is
     in.  ‘info’ is a dictionary with the following keys guaranteed to
     be present (dependent on the domain):

        - ‘py’: ‘module’ (name of the module), ‘fullname’ (name of the
          object)

        - ‘c’: ‘names’ (list of names for the object)

        - ‘cpp’: ‘names’ (list of names for the object)

        - ‘javascript’: ‘object’ (name of the object), ‘fullname’ (name
          of the item)

     Example:

          def linkcode_resolve(domain, info):
              if domain != 'py':
                  return None
              if not info['module']:
                  return None
              filename = info['module'].replace('.', '/')
              return "https://somesite/sourcerepo/%s.py" % filename


File: sphinx.info,  Node: Math support in Sphinx,  Next: sphinx ext napoleon – Support for NumPy and Google style docstrings,  Prev: sphinx ext linkcode – Add external links to source code,  Up: Builtin Sphinx extensions

17.1.14 Math support in Sphinx
------------------------------

New in version 0.5.

Since mathematical notation isn’t natively supported by HTML in any way,
Sphinx supports math in documentation with several extensions.

The basic math support is contained in *note sphinx.ext.mathbase: 27.
Other math support extensions should, if possible, reuse that support
too.

     Note: *note mathbase: 27. is not meant to be added to the *note
     extensions: 5c. config value, instead, use either *note
     sphinx.ext.imgmath: 22. or *note sphinx.ext.mathjax: 28. as
     described below.

The input language for mathematics is LaTeX markup.  This is the
de-facto standard for plain-text math notation and has the added
advantage that no further translation is necessary when building LaTeX
output.

Keep in mind that when you put math markup in `Python docstrings' read
by *note autodoc: 18, you either have to double all backslashes, or use
Python raw strings (‘r"raw"’).

*note mathbase: 27. provides the following config values:

 -- Configuration Value: math_number_all

     Set this option to ‘True’ if you want all displayed math to be
     numbered.  The default is ‘False’.

 -- Configuration Value: math_eqref_format

     A string that are used for format of label of references to
     equations.  As a special character, ‘{number}’ will be replaced to
     equaition number.

     Example: ‘'Eq.{number}'’ is rendered as ‘Eq.10’

 -- Configuration Value: math_numfig

     If ‘True’, displayed math equations are numbered across pages when
     *note numfig: 146. is enabled.  The *note numfig_secnum_depth: 276.
     setting is respected.  The *note eq: 3f4, not *note numref: 144,
     role must be used to reference equation numbers.  Default is
     ‘True’.

     New in version 1.7.

*note mathbase: 27. defines these new markup elements:

 -- reStructuredText Role: :math:

     Role for inline math.  Use like this:

          Since Pythagoras, we know that :math:`a^2 + b^2 = c^2`.

 -- reStructuredText Directive: .. math::

     Directive for displayed math (math that takes the whole line for
     itself).

     The directive supports multiple equations, which should be
     separated by a blank line:

          .. math::

             (a + b)^2 = a^2 + 2ab + b^2

             (a - b)^2 = a^2 - 2ab + b^2

     In addition, each single equation is set within a ‘split’
     environment, which means that you can have multiple aligned lines
     in an equation, aligned at ‘&’ and separated by ‘\\’:

          .. math::

             (a + b)^2  &=  (a + b)(a + b) \\
                        &=  a^2 + 2ab + b^2

     For more details, look into the documentation of the AmSMath LaTeX
     package(1).

     When the math is only one line of text, it can also be given as a
     directive argument:

          .. math:: (a + b)^2 = a^2 + 2ab + b^2

     Normally, equations are not numbered.  If you want your equation to
     get a number, use the ‘label’ option.  When given, it selects an
     internal label for the equation, by which it can be
     cross-referenced, and causes an equation number to be issued.  See
     *note eq: 3f4. for an example.  The numbering style depends on the
     output format.

     There is also an option ‘nowrap’ that prevents any wrapping of the
     given math in a math environment.  When you give this option, you
     must make sure yourself that the math is properly set up.  For
     example:

          .. math::
             :nowrap:

             \begin{eqnarray}
                y    & = & ax^2 + bx + c \\
                f(x) & = & x^2 + 2xy + y^2
             \end{eqnarray}

 -- reStructuredText Role: :eq:

     Role for cross-referencing equations via their label.  Example:

          .. math:: e^{i\pi} + 1 = 0
             :label: euler

          Euler's identity, equation :eq:`euler`, was elected one of the most
          beautiful mathematical formulas.

* Menu:

* sphinx.ext.imgmath – Render math as images: sphinx ext imgmath – Render math as images.
* sphinx.ext.mathjax – Render math via JavaScript: sphinx ext mathjax – Render math via JavaScript.
* sphinx.ext.jsmath – Render math via JavaScript: sphinx ext jsmath – Render math via JavaScript.

   ---------- Footnotes ----------

   (1) https://www.ams.org/publications/authors/tex/amslatex


File: sphinx.info,  Node: sphinx ext imgmath – Render math as images,  Next: sphinx ext mathjax – Render math via JavaScript,  Up: Math support in Sphinx

17.1.14.1 ‘sphinx.ext.imgmath’ – Render math as images
......................................................

New in version 1.4.

This extension renders math via LaTeX and dvipng(1) or dvisvgm(2) into
PNG or SVG images.  This of course means that the computer where the
docs are built must have both programs available.

There are various config values you can set to influence how the images
are built:

 -- Configuration Value: imgmath_image_format

     The output image format.  The default is ‘'png'’.  It should be
     either ‘'png'’ or ‘'svg'’.

 -- Configuration Value: imgmath_latex

     The command name with which to invoke LaTeX. The default is
     ‘'latex'’; you may need to set this to a full path if ‘latex’ is
     not in the executable search path.

     Since this setting is not portable from system to system, it is
     normally not useful to set it in ‘conf.py’; rather, giving it on
     the ‘sphinx-build’ command line via the *note -D: b0. option should
     be preferable, like this:

          sphinx-build -b html -D imgmath_latex=C:\tex\latex.exe . _build/html

     This value should only contain the path to the latex executable,
     not further arguments; use *note imgmath_latex_args: 3fa. for that
     purpose.

 -- Configuration Value: imgmath_dvipng

     The command name with which to invoke ‘dvipng’.  The default is
     ‘'dvipng'’; you may need to set this to a full path if ‘dvipng’ is
     not in the executable search path.  This option is only used when
     ‘imgmath_image_format’ is set to ‘'png'’.

 -- Configuration Value: imgmath_dvisvgm

     The command name with which to invoke ‘dvisvgm’.  The default is
     ‘'dvisvgm'’; you may need to set this to a full path if ‘dvisvgm’
     is not in the executable search path.  This option is only used
     when ‘imgmath_image_format’ is ‘'svg'’.

 -- Configuration Value: imgmath_latex_args

     Additional arguments to give to latex, as a list.  The default is
     an empty list.

 -- Configuration Value: imgmath_latex_preamble

     Additional LaTeX code to put into the preamble of the short LaTeX
     files that are used to translate the math snippets.  This is empty
     by default.  Use it e.g.  to add more packages whose commands you
     want to use in the math.

 -- Configuration Value: imgmath_dvipng_args

     Additional arguments to give to dvipng, as a list.  The default
     value is ‘['-gamma', '1.5', '-D', '110', '-bg', 'Transparent']’
     which makes the image a bit darker and larger then it is by
     default, and produces PNGs with a transparent background.  This
     option is used only when ‘imgmath_image_format’ is ‘'png'’.

 -- Configuration Value: imgmath_dvisvgm_args

     Additional arguments to give to dvisvgm, as a list.  The default
     value is ‘['--no-fonts']’.  This option is used only when
     ‘imgmath_image_format’ is ‘'svg'’.

 -- Configuration Value: imgmath_use_preview

     ‘dvipng’ has the ability to determine the “depth” of the rendered
     text: for example, when typesetting a fraction inline, the baseline
     of surrounding text should not be flush with the bottom of the
     image, rather the image should extend a bit below the baseline.
     This is what TeX calls “depth”.  When this is enabled, the images
     put into the HTML document will get a ‘vertical-align’ style that
     correctly aligns the baselines.

     Unfortunately, this only works when the preview-latex package(3) is
     installed.  Therefore, the default for this option is ‘False’.

     Currently this option is only used when ‘imgmath_image_format’ is
     ‘'png'’.

 -- Configuration Value: imgmath_add_tooltips

     Default: ‘True’.  If false, do not add the LaTeX code as an “alt”
     attribute for math images.

 -- Configuration Value: imgmath_font_size

     The font size (in ‘pt’) of the displayed math.  The default value
     is ‘12’.  It must be a positive integer.

   ---------- Footnotes ----------

   (1) https://savannah.nongnu.org/projects/dvipng/

   (2) http://dvisvgm.bplaced.net/

   (3) https://www.gnu.org/software/auctex/preview-latex.html


File: sphinx.info,  Node: sphinx ext mathjax – Render math via JavaScript,  Next: sphinx ext jsmath – Render math via JavaScript,  Prev: sphinx ext imgmath – Render math as images,  Up: Math support in Sphinx

17.1.14.2 ‘sphinx.ext.mathjax’ – Render math via JavaScript
...........................................................

New in version 1.1.

This extension puts math as-is into the HTML files.  The JavaScript
package MathJax(1) is then loaded and transforms the LaTeX markup to
readable math live in the browser.

Because MathJax (and the necessary fonts) is very large, it is not
included in Sphinx.

 -- Configuration Value: mathjax_path

     The path to the JavaScript file to include in the HTML files in
     order to load MathJax.

     The default is the ‘https://’ URL that loads the JS files from the
     cdnjs(2) Content Delivery Network.  See the MathJax Getting Started
     page(3) for details.  If you want MathJax to be available offline,
     you have to download it and set this value to a different path.

     The path can be absolute or relative; if it is relative, it is
     relative to the ‘_static’ directory of the built docs.

     For example, if you put MathJax into the static path of the Sphinx
     docs, this value would be ‘MathJax/MathJax.js’.  If you host more
     than one Sphinx documentation set on one server, it is advisable to
     install MathJax in a shared location.

     You can also give a full ‘https://’ URL different from the CDN URL.

   ---------- Footnotes ----------

   (1) https://www.mathjax.org/

   (2) https://cdjns.com

   (3) https://docs.mathjax.org/en/latest/start.html


File: sphinx.info,  Node: sphinx ext jsmath – Render math via JavaScript,  Prev: sphinx ext mathjax – Render math via JavaScript,  Up: Math support in Sphinx

17.1.14.3 ‘sphinx.ext.jsmath’ – Render math via JavaScript
..........................................................

This extension works just as the MathJax extension does, but uses the
older package jsMath(1).  It provides this config value:

 -- Configuration Value: jsmath_path

     The path to the JavaScript file to include in the HTML files in
     order to load JSMath.  There is no default.

     The path can be absolute or relative; if it is relative, it is
     relative to the ‘_static’ directory of the built docs.

     For example, if you put JSMath into the static path of the Sphinx
     docs, this value would be ‘jsMath/easy/load.js’.  If you host more
     than one Sphinx documentation set on one server, it is advisable to
     install jsMath in a shared location.

   ---------- Footnotes ----------

   (1) http://www.math.union.edu/~dpvc/jsmath/


File: sphinx.info,  Node: sphinx ext napoleon – Support for NumPy and Google style docstrings,  Next: sphinx ext todo – Support for todo items,  Prev: Math support in Sphinx,  Up: Builtin Sphinx extensions

17.1.15 ‘sphinx.ext.napoleon’ – Support for NumPy and Google style docstrings
-----------------------------------------------------------------------------

`Module author: Rob Ruana'

New in version 1.3.

* Menu:

* Napoleon - Marching toward legible docstrings::
* Configuration: Configuration<5>.


File: sphinx.info,  Node: Napoleon - Marching toward legible docstrings,  Next: Configuration<5>,  Up: sphinx ext napoleon – Support for NumPy and Google style docstrings

17.1.15.1 Napoleon - `Marching toward legible docstrings'
.........................................................

Are you tired of writing docstrings that look like this:

     :param path: The path of the file to wrap
     :type path: str
     :param field_storage: The :class:`FileStorage` instance to wrap
     :type field_storage: FileStorage
     :param temporary: Whether or not to delete the file when the File
        instance is destructed
     :type temporary: bool
     :returns: A buffered writable file descriptor
     :rtype: BufferedFileStorage

ReStructuredText(1) is great, but it creates visually dense, hard to
read docstrings(2).  Compare the jumble above to the same thing
rewritten according to the Google Python Style Guide(3):

     Args:
         path (str): The path of the file to wrap
         field_storage (FileStorage): The :class:`FileStorage` instance to wrap
         temporary (bool): Whether or not to delete the file when the File
            instance is destructed

     Returns:
         BufferedFileStorage: A buffered writable file descriptor

Much more legible, no?

Napoleon is a *note Sphinx Extensions: 60. that enables Sphinx to parse
both NumPy(4) and Google(5) style docstrings - the style recommended by
Khan Academy(6).

Napoleon is a pre-processor that parses NumPy(7) and Google(8) style
docstrings and converts them to reStructuredText before Sphinx attempts
to parse them.  This happens in an intermediate step while Sphinx is
processing the documentation, so it doesn’t modify any of the docstrings
in your actual source code files.

* Menu:

* Getting Started: Getting Started<2>.
* Docstrings::
* Docstring Sections::
* Google vs NumPy::
* Type Annotations::

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/rst.html

   (2) https://www.python.org/dev/peps/pep-0287/

   (3) https://google.github.io/styleguide/pyguide.html

   (4) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

   (5) https://google.github.io/styleguide/pyguide.html#Comments

   (6) 
https://github.com/Khan/style-guides/blob/master/style/python.md#docstrings

   (7) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

   (8) https://google.github.io/styleguide/pyguide.html#Comments


File: sphinx.info,  Node: Getting Started<2>,  Next: Docstrings,  Up: Napoleon - Marching toward legible docstrings

17.1.15.2 Getting Started
.........................

  1. After *note setting up Sphinx: 41. to build your docs, enable
     napoleon in the Sphinx ‘conf.py’ file:

          # conf.py

          # Add napoleon to the extensions list
          extensions = ['sphinx.ext.napoleon']

  2. Use ‘sphinx-apidoc’ to build your API documentation:

          $ sphinx-apidoc -f -o docs/source projectdir


File: sphinx.info,  Node: Docstrings,  Next: Docstring Sections,  Prev: Getting Started<2>,  Up: Napoleon - Marching toward legible docstrings

17.1.15.3 Docstrings
....................

Napoleon interprets every docstring that *note autodoc: 18. can find,
including docstrings on: ‘modules’, ‘classes’, ‘attributes’, ‘methods’,
‘functions’, and ‘variables’.  Inside each docstring, specially
formatted *note Sections: 40e. are parsed and converted to
reStructuredText.

All standard reStructuredText formatting still works as expected.


File: sphinx.info,  Node: Docstring Sections,  Next: Google vs NumPy,  Prev: Docstrings,  Up: Napoleon - Marching toward legible docstrings

17.1.15.4 Docstring Sections
............................

All of the following section headers are supported:

        * ‘Args’ `(alias of Parameters)'

        * ‘Arguments’ `(alias of Parameters)'

        * ‘Attributes’

        * ‘Example’

        * ‘Examples’

        * ‘Keyword Args’ `(alias of Keyword Arguments)'

        * ‘Keyword Arguments’

        * ‘Methods’

        * ‘Note’

        * ‘Notes’

        * ‘Other Parameters’

        * ‘Parameters’

        * ‘Return’ `(alias of Returns)'

        * ‘Returns’

        * ‘Raises’

        * ‘References’

        * ‘See Also’

        * ‘Todo’

        * ‘Warning’

        * ‘Warnings’ `(alias of Warning)'

        * ‘Warns’

        * ‘Yield’ `(alias of Yields)'

        * ‘Yields’


File: sphinx.info,  Node: Google vs NumPy,  Next: Type Annotations,  Prev: Docstring Sections,  Up: Napoleon - Marching toward legible docstrings

17.1.15.5 Google vs NumPy
.........................

Napoleon supports two styles of docstrings: Google(1) and NumPy(2).  The
main difference between the two styles is that Google uses indention to
separate sections, whereas NumPy uses underlines.

Google style:

     def func(arg1, arg2):
         """Summary line.

         Extended description of function.

         Args:
             arg1 (int): Description of arg1
             arg2 (str): Description of arg2

         Returns:
             bool: Description of return value

         """
         return True

NumPy style:

     def func(arg1, arg2):
         """Summary line.

         Extended description of function.

         Parameters
         ----------
         arg1 : int
             Description of arg1
         arg2 : str
             Description of arg2

         Returns
         -------
         bool
             Description of return value

         """
         return True

NumPy style tends to require more vertical space, whereas Google style
tends to use more horizontal space.  Google style tends to be easier to
read for short and simple docstrings, whereas NumPy style tends be
easier to read for long and in-depth docstrings.

The Khan Academy(3) recommends using Google style.

The choice between styles is largely aesthetic, but the two styles
should not be mixed.  Choose one style for your project and be
consistent with it.

See also
........

For complete examples:

   * example_google

   * example_numpy

   ---------- Footnotes ----------

   (1) https://google.github.io/styleguide/pyguide.html#Comments

   (2) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

   (3) 
https://github.com/Khan/style-guides/blob/master/style/python.md#docstrings


File: sphinx.info,  Node: Type Annotations,  Prev: Google vs NumPy,  Up: Napoleon - Marching toward legible docstrings

17.1.15.6 Type Annotations
..........................

PEP 484(1) introduced a standard way to express types in Python code.
This is an alternative to expressing types directly in docstrings.  One
benefit of expressing types according to PEP 484(2) is that type
checkers and IDEs can take advantage of them for static code analysis.

Google style with Python 3 type annotations:

     def func(arg1: int, arg2: str) -> bool:
         """Summary line.

         Extended description of function.

         Args:
             arg1: Description of arg1
             arg2: Description of arg2

         Returns:
             Description of return value

         """
         return True

Google style with types in docstrings:

     def func(arg1, arg2):
         """Summary line.

         Extended description of function.

         Args:
             arg1 (int): Description of arg1
             arg2 (str): Description of arg2

         Returns:
             bool: Description of return value

         """
         return True

     Note: Python 2/3 compatible annotations(3) aren’t currently
     supported by Sphinx and won’t show up in the docs.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0484/

   (2) https://www.python.org/dev/peps/pep-0484/

   (3) 
https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code


File: sphinx.info,  Node: Configuration<5>,  Prev: Napoleon - Marching toward legible docstrings,  Up: sphinx ext napoleon – Support for NumPy and Google style docstrings

17.1.15.7 Configuration
.......................

Listed below are all the settings used by napoleon and their default
values.  These settings can be changed in the Sphinx ‘conf.py’ file.
Make sure that “sphinx.ext.napoleon” is enabled in ‘conf.py’:

     # conf.py

     # Add any Sphinx extension module names here, as strings
     extensions = ['sphinx.ext.napoleon']

     # Napoleon settings
     napoleon_google_docstring = True
     napoleon_numpy_docstring = True
     napoleon_include_init_with_doc = False
     napoleon_include_private_with_doc = False
     napoleon_include_special_with_doc = True
     napoleon_use_admonition_for_examples = False
     napoleon_use_admonition_for_notes = False
     napoleon_use_admonition_for_references = False
     napoleon_use_ivar = False
     napoleon_use_param = True
     napoleon_use_rtype = True

 -- Configuration Value: napoleon_google_docstring

     True to parse Google style(1) docstrings.  False to disable support
     for Google style docstrings.  `Defaults to True.'

 -- Configuration Value: napoleon_numpy_docstring

     True to parse NumPy style(2) docstrings.  False to disable support
     for NumPy style docstrings.  `Defaults to True.'

 -- Configuration Value: napoleon_include_init_with_doc

     True to list ‘__init___’ docstrings separately from the class
     docstring.  False to fall back to Sphinx’s default behavior, which
     considers the ‘__init___’ docstring as part of the class
     documentation.  `Defaults to False.'

     `If True':

          def __init__(self):
              \"\"\"
              This will be included in the docs because it has a docstring
              \"\"\"

          def __init__(self):
              # This will NOT be included in the docs

 -- Configuration Value: napoleon_include_private_with_doc

     True to include private members (like ‘_membername’) with
     docstrings in the documentation.  False to fall back to Sphinx’s
     default behavior.  `Defaults to False.'

     `If True':

          def _included(self):
              """
              This will be included in the docs because it has a docstring
              """
              pass

          def _skipped(self):
              # This will NOT be included in the docs
              pass

 -- Configuration Value: napoleon_include_special_with_doc

     True to include special members (like ‘__membername__’) with
     docstrings in the documentation.  False to fall back to Sphinx’s
     default behavior.  `Defaults to True.'

     `If True':

          def __str__(self):
              """
              This will be included in the docs because it has a docstring
              """
              return unicode(self).encode('utf-8')

          def __unicode__(self):
              # This will NOT be included in the docs
              return unicode(self.__class__.__name__)

 -- Configuration Value: napoleon_use_admonition_for_examples

     True to use the ‘.. admonition::’ directive for the `Example' and
     `Examples' sections.  False to use the ‘.. rubric::’ directive
     instead.  One may look better than the other depending on what HTML
     theme is used.  `Defaults to False.'

     This NumPy style(3) snippet will be converted as follows:

          Example
          -------
          This is just a quick example

     `If True':

          .. admonition:: Example

             This is just a quick example

     `If False':

          .. rubric:: Example

          This is just a quick example

 -- Configuration Value: napoleon_use_admonition_for_notes

     True to use the ‘.. admonition::’ directive for `Notes' sections.
     False to use the ‘.. rubric::’ directive instead.  `Defaults to
     False.'

          Note: The singular `Note' section will always be converted to
          a ‘.. note::’ directive.

     See also
     ........

     ‘napoleon_use_admonition_for_examples’

 -- Configuration Value: napoleon_use_admonition_for_references

     True to use the ‘.. admonition::’ directive for `References'
     sections.  False to use the ‘.. rubric::’ directive instead.
     `Defaults to False.'

     See also
     ........

     ‘napoleon_use_admonition_for_examples’

 -- Configuration Value: napoleon_use_ivar

     True to use the ‘:ivar:’ role for instance variables.  False to use
     the ‘.. attribute::’ directive instead.  `Defaults to False.'

     This NumPy style(4) snippet will be converted as follows:

          Attributes
          ----------
          attr1 : int
              Description of `attr1`

     `If True':

          :ivar attr1: Description of `attr1`
          :vartype attr1: int

     `If False':

          .. attribute:: attr1

             *int*

             Description of `attr1`

 -- Configuration Value: napoleon_use_param

     True to use a ‘:param:’ role for each function parameter.  False to
     use a single ‘:parameters:’ role for all the parameters.  `Defaults
     to True.'

     This NumPy style(5) snippet will be converted as follows:

          Parameters
          ----------
          arg1 : str
              Description of `arg1`
          arg2 : int, optional
              Description of `arg2`, defaults to 0

     `If True':

          :param arg1: Description of `arg1`
          :type arg1: str
          :param arg2: Description of `arg2`, defaults to 0
          :type arg2: int, optional

     `If False':

          :parameters: * **arg1** (*str*) --
                         Description of `arg1`
                       * **arg2** (*int, optional*) --
                         Description of `arg2`, defaults to 0

 -- Configuration Value: napoleon_use_keyword

     True to use a ‘:keyword:’ role for each function keyword argument.
     False to use a single ‘:keyword arguments:’ role for all the
     keywords.  `Defaults to True.'

     This behaves similarly to ‘napoleon_use_param’.  Note unlike
     docutils, ‘:keyword:’ and ‘:param:’ will not be treated the same
     way - there will be a separate “Keyword Arguments” section,
     rendered in the same fashion as “Parameters” section (type links
     created if possible)

     See also
     ........

     ‘napoleon_use_param’

 -- Configuration Value: napoleon_use_rtype

     True to use the ‘:rtype:’ role for the return type.  False to
     output the return type inline with the description.  `Defaults to
     True.'

     This NumPy style(6) snippet will be converted as follows:

          Returns
          -------
          bool
              True if successful, False otherwise

     `If True':

          :returns: True if successful, False otherwise
          :rtype: bool

     `If False':

          :returns: *bool* -- True if successful, False otherwise

   ---------- Footnotes ----------

   (1) https://google.github.io/styleguide/pyguide.html

   (2) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

   (3) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

   (4) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

   (5) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

   (6) 
https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt


File: sphinx.info,  Node: sphinx ext todo – Support for todo items,  Next: sphinx ext viewcode – Add links to highlighted source code,  Prev: sphinx ext napoleon – Support for NumPy and Google style docstrings,  Up: Builtin Sphinx extensions

17.1.16 ‘sphinx.ext.todo’ – Support for todo items
--------------------------------------------------

`Module author: Daniel Bültmann'

New in version 0.5.

There are two additional directives when using this extension:

 -- reStructuredText Directive: .. todo::

     Use this directive like, for example, *note note: 114.

     It will only show up in the output if *note todo_include_todos:
     423. is ‘True’.

     New in version 1.3.2: This directive supports an ‘class’ option
     that determines the class attribute for HTML output.  If not given,
     the class defaults to ‘admonition-todo’.

 -- reStructuredText Directive: .. todolist::

     This directive is replaced by a list of all todo directives in the
     whole documentation, if *note todo_include_todos: 423. is ‘True’.

There is also an additional config value:

 -- Configuration Value: todo_include_todos

     If this is ‘True’, *note todo: 422. and *note todolist: 424.
     produce output, else they produce nothing.  The default is ‘False’.

 -- Configuration Value: todo_emit_warnings

     If this is ‘True’, *note todo: 422. emits a warning for each TODO
     entries.  The default is ‘False’.

     New in version 1.5.

 -- Configuration Value: todo_link_only

     If this is ‘True’, *note todolist: 424. produce output without file
     path and line, The default is ‘False’.

     New in version 1.4.

autodoc provides the following an additional event:

 -- Event: todo-defined (app, node)

     New in version 1.5.

     Emitted when a todo is defined.  `node' is the defined
     ‘sphinx.ext.todo.todo_node’ node.


File: sphinx.info,  Node: sphinx ext viewcode – Add links to highlighted source code,  Prev: sphinx ext todo – Support for todo items,  Up: Builtin Sphinx extensions

17.1.17 ‘sphinx.ext.viewcode’ – Add links to highlighted source code
--------------------------------------------------------------------

`Module author: Georg Brandl'

New in version 1.0.

This extension looks at your Python object descriptions (‘.. class::’,
‘.. function::’ etc.)  and tries to find the source files where the
objects are contained.  When found, a separate HTML page will be output
for each module with a highlighted version of the source code, and a
link will be added to all object descriptions that leads to the source
code of the described object.  A link back from the source to the
description will also be inserted.

This extension works only on HTML related builders like ‘html’,
‘applehelp’, ‘devhelp’, ‘htmlhelp’, ‘qthelp’ and so on except
‘singlehtml’.  By default ‘epub’ builder doesn’t support this extension
(see *note viewcode_enable_epub: 429.).

There is an additional config value:

 -- Configuration Value: viewcode_import

     If this is ‘True’, viewcode extension will follow alias objects
     that imported from another module such as functions, classes and
     attributes.  As side effects, this option else they produce
     nothing.  The default is ‘True’.

          Warning: *note viewcode_import: 42a. `imports' the modules to
          be followed real location.  If any modules have side effects
          on import, these will be executed by ‘viewcode’ when
          ‘sphinx-build’ is run.

          If you document scripts (as opposed to library modules), make
          sure their main routine is protected by a ‘if __name__ ==
          '__main__'’ condition.

     New in version 1.3.

 -- Configuration Value: viewcode_enable_epub

     If this is ‘True’, viewcode extension is also enabled even if you
     use epub builders.  This extension generates pages outside toctree,
     but this is not preferred as epub format.

     Until 1.4.x, this extension is always enabled.  If you want to
     generate epub as same as 1.4.x, you should set ‘True’, but epub
     format checker’s score becomes worse.

     The default is ‘False’.

     New in version 1.5.

          Warning: Not all epub readers support pages generated by
          viewcode extension.  These readers ignore links to pages are
          not under toctree.

          Some reader’s rendering result are corrupted and
          epubcheck(1)’s score becomes worse even if the reader
          supports.

   ---------- Footnotes ----------

   (1) https://github.com/IDPF/epubcheck


File: sphinx.info,  Node: Third-party extensions,  Prev: Builtin Sphinx extensions,  Up: Sphinx Extensions

17.2 Third-party extensions
===========================

You can find several extensions contributed by users in the Sphinx
Contrib(1) repository.  It is open for anyone who wants to maintain an
extension publicly; just send a short message asking for write
permissions.

There are also several extensions hosted elsewhere.  The Sphinx
extension survey(2) and awesome-sphinxdoc(3) contains a comprehensive
list.

If you write an extension that you think others will find useful or you
think should be included as a part of Sphinx, please write to the
project mailing list (join here(4)).

* Menu:

* Where to put your own extensions?::

   ---------- Footnotes ----------

   (1) https://bitbucket.org/birkenfeld/sphinx-contrib

   (2) https://sphinxext-survey.readthedocs.io/

   (3) https://github.com/yoloseem/awesome-sphinxdoc

   (4) https://groups.google.com/forum/#!forum/sphinx-dev


File: sphinx.info,  Node: Where to put your own extensions?,  Up: Third-party extensions

17.2.1 Where to put your own extensions?
----------------------------------------

Extensions local to a project should be put within the project’s
directory structure.  Set Python’s module search path, ‘sys.path’,
accordingly so that Sphinx can find them.  E.g., if your extension
‘foo.py’ lies in the ‘exts’ subdirectory of the project root, put into
‘conf.py’:

     import sys, os

     sys.path.append(os.path.abspath('exts'))

     extensions = ['foo']

You can also install extensions anywhere else on ‘sys.path’, e.g.  in
the ‘site-packages’ directory.


File: sphinx.info,  Node: Developing extensions for Sphinx,  Next: Sphinx Web Support,  Prev: Sphinx Extensions,  Up: Top

18 Developing extensions for Sphinx
***********************************

Since many projects will need special features in their documentation,
Sphinx is designed to be extensible on several levels.

This is what you can do in an extension: First, you can add new *note
builder: 431.s to support new output formats or actions on the parsed
documents.  Then, it is possible to register custom reStructuredText
roles and directives, extending the markup.  And finally, there are
so-called “hook points” at strategic places throughout the build
process, where an extension can register a hook and run specialized
code.

An extension is simply a Python module.  When an extension is loaded,
Sphinx imports this module and executes its ‘setup()’ function, which in
turn notifies Sphinx of everything the extension offers – see the
extension tutorial for examples.

The configuration file itself can be treated as an extension if it
contains a ‘setup()’ function.  All other extensions to load must be
listed in the *note extensions: 5c. configuration value.

* Menu:

* Discovery of builders by entry point::
* Extension metadata::
* APIs used for writing extensions::
* Deprecated APIs::


File: sphinx.info,  Node: Discovery of builders by entry point,  Next: Extension metadata,  Up: Developing extensions for Sphinx

18.1 Discovery of builders by entry point
=========================================

New in version 1.6.

*note Builder: 431. extensions can be discovered by means of entry
points(1) so that they do not have to be listed in the *note extensions:
5c. configuration value.

Builder extensions should define an entry point in the ‘sphinx.builders’
group.  The name of the entry point needs to match your builder’s *note
name: 433. attribute, which is the name passed to the *note sphinx-build
-b: 52. option.  The entry point value should equal the dotted name of
the extension module.  Here is an example of how an entry point for
‘mybuilder’ can be defined in the extension’s ‘setup.py’:

     setup(
         # ...
         entry_points={
             'sphinx.builders': [
                 'mybuilder = my.extension.module',
             ],
         }
     )

Note that it is still necessary to register the builder using *note
add_builder(): 434. in the extension’s ‘setup()’ function.

   ---------- Footnotes ----------

   (1) 
https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins


File: sphinx.info,  Node: Extension metadata,  Next: APIs used for writing extensions,  Prev: Discovery of builders by entry point,  Up: Developing extensions for Sphinx

18.2 Extension metadata
=======================

New in version 1.3.

The ‘setup()’ function can return a dictionary.  This is treated by
Sphinx as metadata of the extension.  Metadata keys currently recognized
are:

   * ‘'version'’: a string that identifies the extension version.  It is
     used for extension version requirement checking (see *note
     needs_extensions: 274.) and informational purposes.  If not given,
     ‘"unknown version"’ is substituted.

   * ‘'env_version'’: an integer that identifies the version of env data
     structure if the extension stores any data to environment.  It is
     used to detect the data structure has been changed from last build.
     The extensions have to increment the version when data structure
     has changed.  If not given, Sphinx considers the extension does not
     stores any data to environment.

   * ‘'parallel_read_safe'’: a boolean that specifies if parallel
     reading of source files can be used when the extension is loaded.
     It defaults to ‘False’, i.e.  you have to explicitly specify your
     extension to be parallel-read-safe after checking that it is.

   * ‘'parallel_write_safe'’: a boolean that specifies if parallel
     writing of output files can be used when the extension is loaded.
     Since extensions usually don’t negatively influence the process,
     this defaults to ‘True’.


File: sphinx.info,  Node: APIs used for writing extensions,  Next: Deprecated APIs,  Prev: Extension metadata,  Up: Developing extensions for Sphinx

18.3 APIs used for writing extensions
=====================================

* Menu:

* Tutorial; Writing a simple extension: Tutorial Writing a simple extension.
* Application API::
* Build environment API::
* Builder API::
* Environment Collector API::
* Docutils markup API::
* Domain API::
* Parser API::
* Doctree node classes added by Sphinx::
* Logging API::
* i18n API::


File: sphinx.info,  Node: Tutorial Writing a simple extension,  Next: Application API,  Up: APIs used for writing extensions

18.3.1 Tutorial: Writing a simple extension
-------------------------------------------

This section is intended as a walkthrough for the creation of custom
extensions.  It covers the basics of writing and activating an
extension, as well as commonly used features of extensions.

As an example, we will cover a “todo” extension that adds capabilities
to include todo entries in the documentation, and to collect these in a
central place.  (A similar “todo” extension is distributed with Sphinx.)

* Menu:

* Important objects::
* Build Phases::
* Extension Design::
* The Setup Function::
* The Node Classes::
* The Directive Classes::
* The Event Handlers::


File: sphinx.info,  Node: Important objects,  Next: Build Phases,  Up: Tutorial Writing a simple extension

18.3.1.1 Important objects
..........................

There are several key objects whose API you will use while writing an
extension.  These are:

`Application'

     The application object (usually called ‘app’) is an instance of
     *note Sphinx: 43c.  It controls most high-level functionality, such
     as the setup of extensions, event dispatching and producing output
     (logging).

     If you have the environment object, the application is available as
     ‘env.app’.

`Environment'

     The build environment object (usually called ‘env’) is an instance
     of *note BuildEnvironment: 39f.  It is responsible for parsing the
     source documents, stores all metadata about the document collection
     and is serialized to disk after each build.

     Its API provides methods to do with access to metadata, resolving
     references, etc.  It can also be used by extensions to cache
     information that should persist for incremental rebuilds.

     If you have the application or builder object, the environment is
     available as ‘app.env’ or ‘builder.env’.

`Builder'

     The builder object (usually called ‘builder’) is an instance of a
     specific subclass of *note Builder: 43d.  Each builder class knows
     how to convert the parsed documents into an output format, or
     otherwise process them (e.g.  check external links).

     If you have the application object, the builder is available as
     ‘app.builder’.

`Config'

     The config object (usually called ‘config’) provides the values of
     configuration values set in ‘conf.py’ as attributes.  It is an
     instance of *note Config: 43e.

     The config is available as ‘app.config’ or ‘env.config’.


File: sphinx.info,  Node: Build Phases,  Next: Extension Design,  Prev: Important objects,  Up: Tutorial Writing a simple extension

18.3.1.2 Build Phases
.....................

One thing that is vital in order to understand extension mechanisms is
the way in which a Sphinx project is built: this works in several
phases.

`Phase 0: Initialization'

     In this phase, almost nothing of interest to us happens.  The
     source directory is searched for source files, and extensions are
     initialized.  Should a stored build environment exist, it is
     loaded, otherwise a new one is created.

`Phase 1: Reading'

     In Phase 1, all source files (and on subsequent builds, those that
     are new or changed) are read and parsed.  This is the phase where
     directives and roles are encountered by docutils, and the
     corresponding code is executed.  The output of this phase is a
     `doctree' for each source file; that is a tree of docutils nodes.
     For document elements that aren’t fully known until all existing
     files are read, temporary nodes are created.

     There are nodes provided by docutils, which are documented in the
     docutils documentation(1).  Additional nodes are provided by Sphinx
     and *note documented here: 440.

     During reading, the build environment is updated with all meta- and
     cross reference data of the read documents, such as labels, the
     names of headings, described Python objects and index entries.
     This will later be used to replace the temporary nodes.

     The parsed doctrees are stored on the disk, because it is not
     possible to hold all of them in memory.

`Phase 2: Consistency checks'

     Some checking is done to ensure no surprises in the built
     documents.

`Phase 3: Resolving'

     Now that the metadata and cross-reference data of all existing
     documents is known, all temporary nodes are replaced by nodes that
     can be converted into output using components called tranform.  For
     example, links are created for object references that exist, and
     simple literal nodes are created for those that don’t.

`Phase 4: Writing'

     This phase converts the resolved doctrees to the desired output
     format, such as HTML or LaTeX. This happens via a so-called
     docutils writer that visits the individual nodes of each doctree
     and produces some output in the process.

     Note: Some builders deviate from this general build plan, for
     example, the builder that checks external links does not need
     anything more than the parsed doctrees and therefore does not have
     phases 2–4.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/ref/doctree.html


File: sphinx.info,  Node: Extension Design,  Next: The Setup Function,  Prev: Build Phases,  Up: Tutorial Writing a simple extension

18.3.1.3 Extension Design
.........................

We want the extension to add the following to Sphinx:

   * A “todo” directive, containing some content that is marked with
     “TODO”, and only shown in the output if a new config value is set.
     (Todo entries should not be in the output by default.)

   * A “todolist” directive that creates a list of all todo entries
     throughout the documentation.

For that, we will need to add the following elements to Sphinx:

   * New directives, called ‘todo’ and ‘todolist’.

   * New document tree nodes to represent these directives,
     conventionally also called ‘todo’ and ‘todolist’.  We wouldn’t need
     new nodes if the new directives only produced some content
     representable by existing nodes.

   * A new config value ‘todo_include_todos’ (config value names should
     start with the extension name, in order to stay unique) that
     controls whether todo entries make it into the output.

   * New event handlers: one for the *note doctree-resolved: 442. event,
     to replace the todo and todolist nodes, and one for *note
     env-purge-doc: 443. (the reason for that will be covered later).


File: sphinx.info,  Node: The Setup Function,  Next: The Node Classes,  Prev: Extension Design,  Up: Tutorial Writing a simple extension

18.3.1.4 The Setup Function
...........................

The new elements are added in the extension’s setup function.  Let us
create a new Python module called ‘todo.py’ and add the setup function:

     def setup(app):
         app.add_config_value('todo_include_todos', False, 'html')

         app.add_node(todolist)
         app.add_node(todo,
                      html=(visit_todo_node, depart_todo_node),
                      latex=(visit_todo_node, depart_todo_node),
                      text=(visit_todo_node, depart_todo_node))

         app.add_directive('todo', TodoDirective)
         app.add_directive('todolist', TodolistDirective)
         app.connect('doctree-resolved', process_todo_nodes)
         app.connect('env-purge-doc', purge_todos)

         return {'version': '0.1'}   # identifies the version of our extension

The calls in this function refer to classes and functions not yet
written.  What the individual calls do is the following:

   * *note add_config_value(): 3d9. lets Sphinx know that it should
     recognize the new `config value' ‘todo_include_todos’, whose
     default value should be ‘False’ (this also tells Sphinx that it is
     a boolean value).

     If the third argument was ‘'html'’, HTML documents would be full
     rebuild if the config value changed its value.  This is needed for
     config values that influence reading (build phase 1).

   * *note add_node(): 445. adds a new `node class' to the build system.
     It also can specify visitor functions for each supported output
     format.  These visitor functions are needed when the new nodes stay
     until phase 4 – since the ‘todolist’ node is always replaced in
     phase 3, it doesn’t need any.

     We need to create the two node classes ‘todo’ and ‘todolist’ later.

   * *note add_directive(): 446. adds a new `directive', given by name
     and class.

     The handler functions are created later.

   * Finally, *note connect(): 447. adds an `event handler' to the event
     whose name is given by the first argument.  The event handler
     function is called with several arguments which are documented with
     the event.


File: sphinx.info,  Node: The Node Classes,  Next: The Directive Classes,  Prev: The Setup Function,  Up: Tutorial Writing a simple extension

18.3.1.5 The Node Classes
.........................

Let’s start with the node classes:

     from docutils import nodes

     class todo(nodes.Admonition, nodes.Element):
         pass

     class todolist(nodes.General, nodes.Element):
         pass

     def visit_todo_node(self, node):
         self.visit_admonition(node)

     def depart_todo_node(self, node):
         self.depart_admonition(node)

Node classes usually don’t have to do anything except inherit from the
standard docutils classes defined in ‘docutils.nodes’.  ‘todo’ inherits
from ‘Admonition’ because it should be handled like a note or warning,
‘todolist’ is just a “general” node.

     Note: Many extensions will not have to create their own node
     classes and work fine with the nodes already provided by
     docutils(1) and *note Sphinx: 440.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/ref/doctree.html


File: sphinx.info,  Node: The Directive Classes,  Next: The Event Handlers,  Prev: The Node Classes,  Up: Tutorial Writing a simple extension

18.3.1.6 The Directive Classes
..............................

A directive class is a class deriving usually from *note
docutils.parsers.rst.Directive: 44a.  The directive interface is also
covered in detail in the docutils documentation(1); the important thing
is that the class should have attributes that configure the allowed
markup, and a ‘run’ method that returns a list of nodes.

The ‘todolist’ directive is quite simple:

     from docutils.parsers.rst import Directive

     class TodolistDirective(Directive):

         def run(self):
             return [todolist('')]

An instance of our ‘todolist’ node class is created and returned.  The
todolist directive has neither content nor arguments that need to be
handled.

The ‘todo’ directive function looks like this:

     from sphinx.locale import _

     class TodoDirective(Directive):

         # this enables content in the directive
         has_content = True

         def run(self):
             env = self.state.document.settings.env

             targetid = "todo-%d" % env.new_serialno('todo')
             targetnode = nodes.target('', '', ids=[targetid])

             todo_node = todo('\n'.join(self.content))
             todo_node += nodes.title(_('Todo'), _('Todo'))
             self.state.nested_parse(self.content, self.content_offset, todo_node)

             if not hasattr(env, 'todo_all_todos'):
                 env.todo_all_todos = []
             env.todo_all_todos.append({
                 'docname': env.docname,
                 'lineno': self.lineno,
                 'todo': todo_node.deepcopy(),
                 'target': targetnode,
             })

             return [targetnode, todo_node]

Several important things are covered here.  First, as you can see, you
can refer to the build environment instance using
‘self.state.document.settings.env’.

Then, to act as a link target (from the todolist), the todo directive
needs to return a target node in addition to the todo node.  The target
ID (in HTML, this will be the anchor name) is generated by using
‘env.new_serialno’ which returns a new unique integer on each call and
therefore leads to unique target names.  The target node is instantiated
without any text (the first two arguments).

On creating admonition node, the content body of the directive are
parsed using ‘self.state.nested_parse’.  The first argument gives the
content body, and the second one gives content offset.  The third
argument gives the parent node of parsed result, in our case the ‘todo’
node.

Then, the todo node is added to the environment.  This is needed to be
able to create a list of all todo entries throughout the documentation,
in the place where the author puts a ‘todolist’ directive.  For this
case, the environment attribute ‘todo_all_todos’ is used (again, the
name should be unique, so it is prefixed by the extension name).  It
does not exist when a new environment is created, so the directive must
check and create it if necessary.  Various information about the todo
entry’s location are stored along with a copy of the node.

In the last line, the nodes that should be put into the doctree are
returned: the target node and the admonition node.

The node structure that the directive returns looks like this:

     +--------------------+
     | target node        |
     +--------------------+
     +--------------------+
     | todo node          |
     +--------------------+
       \__+--------------------+
          | admonition title   |
          +--------------------+
          | paragraph          |
          +--------------------+
          | ...                |
          +--------------------+

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/ref/rst/directives.html


File: sphinx.info,  Node: The Event Handlers,  Prev: The Directive Classes,  Up: Tutorial Writing a simple extension

18.3.1.7 The Event Handlers
...........................

Finally, let’s look at the event handlers.  First, the one for the *note
env-purge-doc: 443. event:

     def purge_todos(app, env, docname):
         if not hasattr(env, 'todo_all_todos'):
             return
         env.todo_all_todos = [todo for todo in env.todo_all_todos
                               if todo['docname'] != docname]

Since we store information from source files in the environment, which
is persistent, it may become out of date when the source file changes.
Therefore, before each source file is read, the environment’s records of
it are cleared, and the *note env-purge-doc: 443. event gives extensions
a chance to do the same.  Here we clear out all todos whose docname
matches the given one from the ‘todo_all_todos’ list.  If there are
todos left in the document, they will be added again during parsing.

The other handler belongs to the *note doctree-resolved: 442. event.
This event is emitted at the end of phase 3 and allows custom resolving
to be done:

     def process_todo_nodes(app, doctree, fromdocname):
         if not app.config.todo_include_todos:
             for node in doctree.traverse(todo):
                 node.parent.remove(node)

         # Replace all todolist nodes with a list of the collected todos.
         # Augment each todo with a backlink to the original location.
         env = app.builder.env

         for node in doctree.traverse(todolist):
             if not app.config.todo_include_todos:
                 node.replace_self([])
                 continue

             content = []

             for todo_info in env.todo_all_todos:
                 para = nodes.paragraph()
                 filename = env.doc2path(todo_info['docname'], base=None)
                 description = (
                     _('(The original entry is located in %s, line %d and can be found ') %
                     (filename, todo_info['lineno']))
                 para += nodes.Text(description, description)

                 # Create a reference
                 newnode = nodes.reference('', '')
                 innernode = nodes.emphasis(_('here'), _('here'))
                 newnode['refdocname'] = todo_info['docname']
                 newnode['refuri'] = app.builder.get_relative_uri(
                     fromdocname, todo_info['docname'])
                 newnode['refuri'] += '#' + todo_info['target']['refid']
                 newnode.append(innernode)
                 para += newnode
                 para += nodes.Text('.)', '.)')

                 # Insert into the todolist
                 content.append(todo_info['todo'])
                 content.append(para)

             node.replace_self(content)

It is a bit more involved.  If our new “todo_include_todos” config value
is false, all todo and todolist nodes are removed from the documents.

If not, todo nodes just stay where and how they are.  Todolist nodes are
replaced by a list of todo entries, complete with backlinks to the
location where they come from.  The list items are composed of the nodes
from the todo entry and docutils nodes created on the fly: a paragraph
for each entry, containing text that gives the location, and a link
(reference node containing an italic node) with the backreference.  The
reference URI is built by ‘app.builder.get_relative_uri’ which creates a
suitable URI depending on the used builder, and appending the todo
node’s (the target’s) ID as the anchor name.


File: sphinx.info,  Node: Application API,  Next: Build environment API,  Prev: Tutorial Writing a simple extension,  Up: APIs used for writing extensions

18.3.2 Application API
----------------------

Each Sphinx extension is a Python module with at least a ‘setup()’
function.  This function is called at initialization time with one
argument, the application object representing the Sphinx process.

 -- Class: sphinx.application.Sphinx

     This application object has the public API described in the
     following.

* Menu:

* Extension setup::
* Emitting events::
* Producing messages / logging::
* Sphinx runtime information::
* Sphinx core events::
* Checking the Sphinx version::
* The Config object::
* The template bridge::
* Exceptions::


File: sphinx.info,  Node: Extension setup,  Next: Emitting events,  Up: Application API

18.3.2.1 Extension setup
........................

These methods are usually called in an extension’s ‘setup()’ function.

Examples of using the Sphinx extension API can be seen in the
‘sphinx.ext’ package.

 -- Method: Sphinx.setup_extension (name)

     Import and setup a Sphinx extension module.  No-op if called twice.

 -- Method: Sphinx.require_sphinx (version)

 -- Method: Sphinx.connect (event, callback)

 -- Method: Sphinx.disconnect (listener_id)

 -- Method: Sphinx.add_builder (builder)

 -- Method: Sphinx.add_config_value (name, default, rebuild)

 -- Method: Sphinx.add_event (name)

 -- Method: Sphinx.set_translator (name, translator_class)

 -- Method: Sphinx.add_node (node, **kwds)

 -- Method: Sphinx.add_enumerable_node (node, figtype,
          title_getter=None, **kwds)

 -- Method: Sphinx.add_directive (name, func, content, arguments,
          **options)

 -- Method: Sphinx.add_directive (name, directiveclass)

 -- Method: Sphinx.add_role (name, role)

 -- Method: Sphinx.add_generic_role (name, nodeclass)

 -- Method: Sphinx.add_domain (domain)

 -- Method: Sphinx.override_domain (domain)

 -- Method: Sphinx.add_directive_to_domain (domain, name, func, content,
          arguments, **options)

 -- Method: Sphinx.add_directive_to_domain (domain, name,
          directiveclass)

 -- Method: Sphinx.add_role_to_domain (domain, name, role)

 -- Method: Sphinx.add_index_to_domain (domain, index)

 -- Method: Sphinx.add_object_type (directivename, rolename,
          indextemplate='', parse_node=None, ref_nodeclass=None,
          objname='', doc_field_types=[])

 -- Method: Sphinx.add_crossref_type (directivename, rolename,
          indextemplate='', ref_nodeclass=None, objname='')

 -- Method: Sphinx.add_transform (transform)

 -- Method: Sphinx.add_post_transform (transform)

 -- Method: Sphinx.add_javascript (filename)

 -- Method: Sphinx.add_stylesheet (filename, alternate=None, title=None)

 -- Method: Sphinx.add_latex_package (packagename, options=None)

 -- Method: Sphinx.add_lexer (alias, lexer)

 -- Method: Sphinx.add_autodocumenter (cls)

 -- Method: Sphinx.add_autodoc_attrgetter (type, getter)

 -- Method: Sphinx.add_search_language (cls)

 -- Method: Sphinx.add_source_parser (parser)

 -- Method: Sphinx.add_env_collector (collector)

 -- Method: Sphinx.add_html_theme (name, theme_path)

 -- Exception: sphinx.application.ExtensionError

     All these methods raise this exception if something went wrong with
     the extension API.


File: sphinx.info,  Node: Emitting events,  Next: Producing messages / logging,  Prev: Extension setup,  Up: Application API

18.3.2.2 Emitting events
........................

 -- Class: sphinx.application.Sphinx

      -- Method: emit (event, *arguments)

      -- Method: emit_firstresult (event, *arguments)


File: sphinx.info,  Node: Producing messages / logging,  Next: Sphinx runtime information,  Prev: Emitting events,  Up: Application API

18.3.2.3 Producing messages / logging
.....................................

The application object also provides support for emitting leveled
messages.

     Note: There is no “error” call: in Sphinx, errors are defined as
     things that stop the build; just raise an exception (*note
     sphinx.errors.SphinxError: 46e. or a custom subclass) to do that.

Deprecated since version 1.6: Please use *note Logging API: 46f.
instead.

 -- Method: Sphinx.warn (message, location=None, prefix=None, type=None,
          subtype=None, colorfunc=None)

     Emit a warning.

     If `location' is given, it should either be a tuple of (docname,
     lineno) or a string describing the location of the warning as well
     as possible.

     `prefix' usually should not be changed.

     `type' and `subtype' are used to suppress warnings with *note
     suppress_warnings: 272.

          Note: For warnings emitted during parsing, you should use
          *note BuildEnvironment.warn(): 471. since that will collect
          all warnings during parsing for later output.

 -- Method: Sphinx.info (message='', nonl=False)

     Emit an informational message.

     If `nonl' is true, don’t emit a newline at the end (which implies
     that more info output will follow soon.)

 -- Method: Sphinx.verbose (message, *args, **kwargs)

     Emit a verbose informational message.

 -- Method: Sphinx.debug (message, *args, **kwargs)

     Emit a debug-level informational message.

 -- Method: Sphinx.debug2 (message, *args, **kwargs)

     Emit a lowlevel debug-level informational message.


File: sphinx.info,  Node: Sphinx runtime information,  Next: Sphinx core events,  Prev: Producing messages / logging,  Up: Application API

18.3.2.4 Sphinx runtime information
...................................

The application object also provides runtime information as attributes.

 -- Attribute: sphinx.application.srcdir

     Source directory.

 -- Attribute: sphinx.application.confdir

     Directory containing ‘conf.py’.

 -- Attribute: sphinx.application.doctreedir

     Directory for storing pickled doctrees.

 -- Attribute: sphinx.application.outdir

     Directory for storing built document.


File: sphinx.info,  Node: Sphinx core events,  Next: Checking the Sphinx version,  Prev: Sphinx runtime information,  Up: Application API

18.3.2.5 Sphinx core events
...........................

These events are known to the core.  The arguments shown are given to
the registered event handlers.  Use *note connect(): 447. in an
extension’s ‘setup’ function (note that ‘conf.py’ can also have a
‘setup’ function) to connect handlers to the events.  Example:

     def source_read_handler(app, docname, source):
         print('do something here...')

     def setup(app):
         app.connect('source-read', source_read_handler)

 -- Event: builder-inited (app)

     Emitted when the builder object has been created.  It is available
     as ‘app.builder’.

 -- Event: config-inited (app, config)

     Emitted when the config object has been initialized.

     New in version 1.8.

 -- Event: env-get-outdated (app, env, added, changed, removed)

     Emitted when the environment determines which source files have
     changed and should be re-read.  `added', `changed' and `removed'
     are sets of docnames that the environment has determined.  You can
     return a list of docnames to re-read in addition to these.

     New in version 1.1.

 -- Event: env-purge-doc (app, env, docname)

     Emitted when all traces of a source file should be cleaned from the
     environment, that is, if the source file is removed or before it is
     freshly read.  This is for extensions that keep their own caches in
     attributes of the environment.

     For example, there is a cache of all modules on the environment.
     When a source file has been changed, the cache’s entries for the
     file are cleared, since the module declarations could have been
     removed from the file.

     New in version 0.5.

 -- Event: env-before-read-docs (app, env, docnames)

     Emitted after the environment has determined the list of all added
     and changed files and just before it reads them.  It allows
     extension authors to reorder the list of docnames (`inplace')
     before processing, or add more docnames that Sphinx did not
     consider changed (but never add any docnames that are not in
     ‘env.found_docs’).

     You can also remove document names; do this with caution since it
     will make Sphinx treat changed files as unchanged.

     New in version 1.3.

 -- Event: source-read (app, docname, source)

     Emitted when a source file has been read.  The `source' argument is
     a list whose single element is the contents of the source file.
     You can process the contents and replace this item to implement
     source-level transformations.

     For example, if you want to use ‘$’ signs to delimit inline math,
     like in LaTeX, you can use a regular expression to replace ‘$...$’
     by ‘:math:`...`’.

     New in version 0.5.

 -- Event: doctree-read (app, doctree)

     Emitted when a doctree has been parsed and read by the environment,
     and is about to be pickled.  The `doctree' can be modified
     in-place.

 -- Event: missing-reference (app, env, node, contnode)

     Emitted when a cross-reference to a Python module or object cannot
     be resolved.  If the event handler can resolve the reference, it
     should return a new docutils node to be inserted in the document
     tree in place of the node `node'.  Usually this node is a
     ‘reference’ node containing `contnode' as a child.


     Parameters:

        * ‘env’ – The build environment (‘app.builder.env’).

        * ‘node’ – The ‘pending_xref’ node to be resolved.  Its
          attributes ‘reftype’, ‘reftarget’, ‘modname’ and ‘classname’
          attributes determine the type and target of the reference.

        * ‘contnode’ – The node that carries the text and formatting
          inside the future reference and should be a child of the
          returned reference node.

     New in version 0.5.

 -- Event: doctree-resolved (app, doctree, docname)

     Emitted when a doctree has been “resolved” by the environment, that
     is, all references have been resolved and TOCs have been inserted.
     The `doctree' can be modified in place.

     Here is the place to replace custom nodes that don’t have visitor
     methods in the writers, so that they don’t cause errors when the
     writers encounter them.

 -- Event: env-merge-info (env, docnames, other)

     This event is only emitted when parallel reading of documents is
     enabled.  It is emitted once for every subprocess that has read
     some documents.

     You must handle this event in an extension that stores data in the
     environment in a custom location.  Otherwise the environment in the
     main process will not be aware of the information stored in the
     subprocess.

     `other' is the environment object from the subprocess, `env' is the
     environment from the main process.  `docnames' is a set of document
     names that have been read in the subprocess.

     For a sample of how to deal with this event, look at the standard
     ‘sphinx.ext.todo’ extension.  The implementation is often similar
     to that of *note env-purge-doc: 443, only that information is not
     removed, but added to the main environment from the other
     environment.

     New in version 1.3.

 -- Event: env-updated (app, env)

     Emitted when the ‘update()’ method of the build environment has
     completed, that is, the environment and all doctrees are now
     up-to-date.

     You can return an iterable of docnames from the handler.  These
     documents will then be considered updated, and will be (re-)written
     during the writing phase.

     New in version 0.5.

     Changed in version 1.3: The handlers’ return value is now used.

 -- Event: env-check-consistency (env)

     Emitted when Consistency checks phase.  You can check consistency
     of metadata for whole of documents.

     New in version 1.6: As a `experimental' event

 -- Event: html-collect-pages (app)

     Emitted when the HTML builder is starting to write non-document
     pages.  You can add pages to write by returning an iterable from
     this event consisting of ‘(pagename, context, templatename)’.

     New in version 1.0.

 -- Event: html-page-context (app, pagename, templatename, context,
          doctree)

     Emitted when the HTML builder has created a context dictionary to
     render a template with – this can be used to add custom elements to
     the context.

     The `pagename' argument is the canonical name of the page being
     rendered, that is, without ‘.html’ suffix and using slashes as path
     separators.  The `templatename' is the name of the template to
     render, this will be ‘'page.html'’ for all pages from reST
     documents.

     The `context' argument is a dictionary of values that are given to
     the template engine to render the page and can be modified to
     include custom values.  Keys must be strings.

     The `doctree' argument will be a doctree when the page is created
     from a reST documents; it will be ‘None’ when the page is created
     from an HTML template alone.

     You can return a string from the handler, it will then replace
     ‘'page.html'’ as the HTML template for this page.

     New in version 0.4.

     Changed in version 1.3: The return value can now specify a template
     name.

 -- Event: build-finished (app, exception)

     Emitted when a build has finished, before Sphinx exits, usually
     used for cleanup.  This event is emitted even when the build
     process raised an exception, given as the `exception' argument.
     The exception is reraised in the application after the event
     handlers have run.  If the build process raised no exception,
     `exception' will be ‘None’.  This allows to customize cleanup
     actions depending on the exception status.

     New in version 0.5.


File: sphinx.info,  Node: Checking the Sphinx version,  Next: The Config object,  Prev: Sphinx core events,  Up: Application API

18.3.2.6 Checking the Sphinx version
....................................

Use this to adapt your extension to API changes in Sphinx.

 -- Data: sphinx.version_info = (1, 6, 3, 'final', 0)

     tuple() -> empty tuple tuple(iterable) -> tuple initialized from
     iterable’s items

     If the argument is a tuple, the return value is the same object.


File: sphinx.info,  Node: The Config object,  Next: The template bridge,  Prev: Checking the Sphinx version,  Up: Application API

18.3.2.7 The Config object
..........................

 -- Class: sphinx.config.Config (dirname, filename, overrides, tags)

     Configuration file abstraction.


File: sphinx.info,  Node: The template bridge,  Next: Exceptions,  Prev: The Config object,  Up: Application API

18.3.2.8 The template bridge
............................

 -- Class: sphinx.application.TemplateBridge

     This class defines the interface for a “template bridge”, that is,
     a class that renders templates given a template name and a context.

      -- Method: init (builder, theme=None, dirs=None)

          Called by the builder to initialize the template system.

          `builder' is the builder object; you’ll probably want to look
          at the value of ‘builder.config.templates_path’.

          `theme' is a ‘sphinx.theming.Theme’ object or None; in the
          latter case, `dirs' can be list of fixed directories to look
          for templates.

      -- Method: newest_template_mtime ()

          Called by the builder to determine if output files are
          outdated because of template changes.  Return the mtime of the
          newest template file that was changed.  The default
          implementation returns ‘0’.

      -- Method: render (template, context)

          Called by the builder to render a template given as a filename
          with a specified context (a Python dictionary).

      -- Method: render_string (template, context)

          Called by the builder to render a template given as a string
          with a specified context (a Python dictionary).


File: sphinx.info,  Node: Exceptions,  Prev: The template bridge,  Up: Application API

18.3.2.9 Exceptions
...................

 -- Exception: sphinx.errors.SphinxError

     Base class for Sphinx errors that are shown to the user in a nicer
     way than normal exceptions.

 -- Exception: sphinx.errors.ConfigError

 -- Exception: sphinx.errors.ExtensionError (message, orig_exc=None)

     Raised if something’s wrong with the configuration.

 -- Exception: sphinx.errors.ThemeError

 -- Exception: sphinx.errors.VersionRequirementError


File: sphinx.info,  Node: Build environment API,  Next: Builder API,  Prev: Application API,  Up: APIs used for writing extensions

18.3.3 Build environment API
----------------------------

 -- Class: sphinx.environment.BuildEnvironment

     `Attributes'

      -- Attribute: app

          Reference to the *note Sphinx: 43c. (application) object.

      -- Attribute: config

          Reference to the *note Config: 43e. object.

      -- Attribute: srcdir

          Source directory.

      -- Attribute: doctreedir

          Directory for storing pickled doctrees.

      -- Attribute: found_docs

          A set of all existing docnames.

      -- Attribute: metadata

          Dictionary mapping docnames to “metadata” (see *note File-wide
          metadata: 10d.).

      -- Attribute: titles

          Dictionary mapping docnames to the docutils node for their
          main title.

      -- Attribute: docname

          Returns the docname of the document currently being parsed.

     `Utility methods'

      -- Method: warn (docname, msg, lineno=None, **kwargs)

          Emit a warning.

          This differs from using ‘app.warn()’ in that the warning may
          not be emitted instantly, but collected for emitting all
          warnings after the update of the environment.

      -- Method: warn_node (msg, node, **kwargs)

          Like *note warn(): 471, but with source information taken from
          `node'.

      -- Method: doc2path (docname, base=True, suffix=None)

          Return the filename for the document name.

          If `base' is True, return absolute path under self.srcdir.  If
          `base' is None, return relative path to self.srcdir.  If
          `base' is a path string, return absolute path under that.  If
          `suffix' is not None, add it instead of config.source_suffix.

      -- Method: relfn2path (filename, docname=None)

          Return paths to a file referenced from a document, relative to
          documentation root and absolute.

          In the input “filename”, absolute filenames are taken as
          relative to the source dir, while relative filenames are
          relative to the dir of the containing document.

      -- Method: note_dependency (filename)

          Add `filename' as a dependency of the current document.

          This means that the document will be rebuilt if this file
          changes.

          `filename' should be absolute or relative to the source
          directory.

      -- Method: new_serialno (category='')

          Return a serial number, e.g.  for index entry targets.

          The number is guaranteed to be unique in the current document.

      -- Method: note_reread ()

          Add the current document to the list of documents that will
          automatically be re-read at the next build.


File: sphinx.info,  Node: Builder API,  Next: Environment Collector API,  Prev: Build environment API,  Up: APIs used for writing extensions

18.3.4 Builder API
------------------

     Todo: Expand this.

 -- Class: sphinx.builders.Builder

     This is the base class for all builders.

     These attributes should be set on builder classes:

      -- Attribute: name = ''

          The builder’s name, for the -b command line option.

      -- Attribute: format = ''

          The builder’s output format, or ‘’ if no document output is
          produced.

      -- Attribute: supported_image_types = []

          The list of MIME types of image formats supported by the
          builder.  Image files are searched in the order in which they
          appear here.

      -- Attribute: supported_remote_images = False

      -- Attribute: supported_data_uri_images = False

      -- Attribute: default_translator_class = None

     These methods are predefined and will be called from the
     application:

      -- Method: get_relative_uri (from_, to, typ=None)

          Return a relative URI between two source filenames.

          May raise environment.NoUri if there’s no way to return a
          sensible URI.

      -- Method: build_all ()

          Build all source files.

      -- Method: build_specific (filenames)

          Only rebuild as much as needed for changes in the `filenames'.

      -- Method: build_update ()

          Only rebuild what was changed or added since last build.

      -- Method: build (docnames, summary=None, method='update')

          Main build method.

          First updates the environment, and then calls ‘write()’.

     These methods can be overridden in concrete builder classes:

      -- Method: init ()

          Load necessary templates and perform initialization.  The
          default implementation does nothing.

      -- Method: get_outdated_docs ()

          Return an iterable of output files that are outdated, or a
          string describing what an update build will build.

          If the builder does not output individual files corresponding
          to source files, return a string here.  If it does, return an
          iterable of those files that need to be written.

      -- Method: get_target_uri (docname, typ=None)

          Return the target URI for a document name.

          `typ' can be used to qualify the link characteristic for
          individual builders.

      -- Method: prepare_writing (docnames)

          A place where you can add logic before *note write_doc(): 4b9.
          is run

      -- Method: write_doc (docname, doctree)

          Where you actually write something to the filesystem.

      -- Method: finish ()

          Finish the building process.

          The default implementation does nothing.


File: sphinx.info,  Node: Environment Collector API,  Next: Docutils markup API,  Prev: Builder API,  Up: APIs used for writing extensions

18.3.5 Environment Collector API
--------------------------------

 -- Class: sphinx.environment.collectors.EnvironmentCollector

     An EnvironmentCollector is a specific data collector from each
     document.

     It gathers data and stores *note BuildEnvironment: 39f. as a
     database.  Examples of specific data would be images, download
     files, section titles, metadatas, index entries and toctrees, etc.

      -- Method: clear_doc (app, env, docname)

          Remove specified data of a document.

          This method is called on the removal of the document.

      -- Method: get_outdated_docs (app, env, added, changed, removed)

          Return a list of docnames to re-read.

          This methods is called before reading the documents.

      -- Method: get_updated_docs (app, env)

          Return a list of docnames to re-read.

          This methods is called after reading the whole of documents
          (experimental).

      -- Method: merge_other (app, env, docnames, other)

          Merge in specified data regarding docnames from a different
          ‘BuildEnvironment’ object which coming from a subprocess in
          parallel builds.

      -- Method: process_doc (app, doctree)

          Process a document and gather specific data from it.

          This method is called after the document is read.


File: sphinx.info,  Node: Docutils markup API,  Next: Domain API,  Prev: Environment Collector API,  Up: APIs used for writing extensions

18.3.6 Docutils markup API
--------------------------

This section describes the API for adding ReST markup elements (roles
and directives).

* Menu:

* Roles::
* Directives: Directives<4>.


File: sphinx.info,  Node: Roles,  Next: Directives<4>,  Up: Docutils markup API

18.3.6.1 Roles
..............


File: sphinx.info,  Node: Directives<4>,  Prev: Roles,  Up: Docutils markup API

18.3.6.2 Directives
...................

Directives are handled by classes derived from
‘docutils.parsers.rst.Directive’.  They have to be registered by an
extension using *note Sphinx.add_directive(): 446. or *note
Sphinx.add_directive_to_domain(): 459.

 -- Class: docutils.parsers.rst.Directive

     The markup syntax of the new directive is determined by the follow
     five class attributes:

      -- Attribute: required_arguments = 0

          Number of required directive arguments.

      -- Attribute: optional_arguments = 0

          Number of optional arguments after the required arguments.

      -- Attribute: final_argument_whitespace = False

          May the final argument contain whitespace?

      -- Attribute: option_spec = None

          Mapping of option names to validator functions.

          Option validator functions take a single parameter, the option
          argument (or ‘None’ if not given), and should validate it or
          convert it to the proper form.  They raise ‘ValueError’ or
          ‘TypeError’ to indicate failure.

          There are several predefined and possibly useful validators in
          the ‘docutils.parsers.rst.directives’ module.

      -- Attribute: has_content = False

          May the directive have content?

     New directives must implement the *note run(): 4cd. method:

      -- Method: run ()

          This method must process the directive arguments, options and
          content, and return a list of Docutils/Sphinx nodes that will
          be inserted into the document tree at the point where the
          directive was encountered.

     Instance attributes that are always set on the directive are:

      -- Attribute: name

          The directive name (useful when registering the same directive
          class under multiple names).

      -- Attribute: arguments

          The arguments given to the directive, as a list.

      -- Attribute: options

          The options given to the directive, as a dictionary mapping
          option names to validated/converted values.

      -- Attribute: content

          The directive content, if given, as a ‘ViewList’.

      -- Attribute: lineno

          The absolute line number on which the directive appeared.
          This is not always a useful value; use ‘srcline’ instead.

      -- Attribute: content_offset

          Internal offset of the directive content.  Used when calling
          ‘nested_parse’ (see below).

      -- Attribute: block_text

          The string containing the entire directive.

      -- Attribute: state
      -- Attribute: state_machine

          The state and state machine which controls the parsing.  Used
          for ‘nested_parse’.

* Menu:

* ViewLists::
* Parsing directive content as ReST::


File: sphinx.info,  Node: ViewLists,  Next: Parsing directive content as ReST,  Up: Directives<4>

18.3.6.3 ViewLists
..................

Docutils represents document source lines in a class
‘docutils.statemachine.ViewList’.  This is a list with extended
functionality – for one, slicing creates views of the original list, and
also the list contains information about the source line numbers.

The *note Directive.content: 4d1. attribute is a ViewList.  If you
generate content to be parsed as ReST, you have to create a ViewList
yourself.  Important for content generation are the following points:

   * The constructor takes a list of strings (lines) and a source
     (document) name.

   * The ‘.append()’ method takes a line and a source name as well.


File: sphinx.info,  Node: Parsing directive content as ReST,  Prev: ViewLists,  Up: Directives<4>

18.3.6.4 Parsing directive content as ReST
..........................................

Many directives will contain more markup that must be parsed.  To do
this, use one of the following APIs from the *note Directive.run(): 4cd.
method:

   * ‘self.state.nested_parse’

   * ‘sphinx.util.nodes.nested_parse_with_titles()’ – this allows titles
     in the parsed content.

Both APIs parse the content into a given node.  They are used like this:

     node = docutils.nodes.paragraph()
     # either
     nested_parse_with_titles(self.state, self.result, node)
     # or
     self.state.nested_parse(self.result, 0, node)

     Note: ‘sphinx.util.docutils.switch_source_input()’ allows to change
     a target file during nested_parse.  It is useful to mixed contents.
     For example, ‘sphinx. ext.autodoc’ uses it to parse docstrings:

          from sphinx.util.docutils import switch_source_input

          # Switch source_input between parsing content.
          # Inside this context, all parsing errors and warnings are reported as
          # happened in new source_input (in this case, ``self.result``).
          with switch_source_input(self.state, self.result):
              node = docutils.nodes.paragraph()
              self.state.nested_parse(self.result, 0, node)

     Deprecated since version 1.7: Until Sphinx-1.6,
     ‘sphinx.ext.autodoc.AutodocReporter’ is used for this purpose.  For
     now, it is replaced by ‘switch_source_input()’.

If you don’t need the wrapping node, you can use any concrete node type
and return ‘node.children’ from the Directive.

See also
........

Creating directives(1)

     HOWTO of the Docutils documentation

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/howto/rst-directives.html


File: sphinx.info,  Node: Domain API,  Next: Parser API,  Prev: Docutils markup API,  Up: APIs used for writing extensions

18.3.7 Domain API
-----------------

 -- Class: sphinx.domains.Domain (env)

     A Domain is meant to be a group of “object” description directives
     for objects of a similar nature, and corresponding roles to create
     references to them.  Examples would be Python modules, classes,
     functions etc., elements of a templating language, Sphinx roles and
     directives, etc.

     Each domain has a separate storage for information about existing
     objects and how to reference them in ‘self.data’, which must be a
     dictionary.  It also must implement several functions that expose
     the object information in a uniform way to parts of Sphinx that
     allow the user to reference or search for objects in a
     domain-agnostic way.

     About ‘self.data’: since all object and cross-referencing
     information is stored on a BuildEnvironment instance, the
     ‘domain.data’ object is also stored in the ‘env.domaindata’ dict
     under the key ‘domain.name’.  Before the build process starts,
     every active domain is instantiated and given the environment
     object; the ‘domaindata’ dict must then either be nonexistent or a
     dictionary whose ‘version’ key is equal to the domain class’ *note
     data_version: 4dc. attribute.  Otherwise, ‘IOError’ is raised and
     the pickled environment is discarded.

      -- Method: check_consistency ()

          Do consistency checks (`experimental').

      -- Method: clear_doc (docname)

          Remove traces of a document in the domain-specific
          inventories.

      -- Method: directive (name)

          Return a directive adapter class that always gives the
          registered directive its full name (‘domain:name’) as
          ‘self.name’.

      -- Method: get_full_qualified_name (node)

          Return full qualified name for given node.

      -- Method: get_objects ()

          Return an iterable of “object descriptions”, which are tuples
          with five items:

             * ‘name’ – fully qualified name

             * ‘dispname’ – name to display when searching/linking

             * ‘type’ – object type, a key in ‘self.object_types’

             * ‘docname’ – the document where it is to be found

             * ‘anchor’ – the anchor name for the object

             * ‘priority’ – how “important” the object is (determines
               placement in search results)

                  - 1: default priority (placed before full-text
                    matches)

                  - 0: object is important (placed before
                    default-priority objects)

                  - 2: object is unimportant (placed after full-text
                    matches)

                  - -1: object should not show up in search at all

      -- Method: get_type_name (type, primary=False)

          Return full name for given ObjType.

      -- Method: merge_domaindata (docnames, otherdata)

          Merge in data regarding `docnames' from a different domaindata
          inventory (coming from a subprocess in parallel builds).

      -- Method: process_doc (env, docname, document)

          Process a document after it is read by the environment.

      -- Method: process_field_xref (pnode)

          Process a pending xref created in a doc field.  For example,
          attach information about the current scope.

      -- Method: resolve_any_xref (env, fromdocname, builder, target,
               node, contnode)

          Resolve the pending_xref `node' with the given `target'.

          The reference comes from an “any” or similar role, which means
          that we don’t know the type.  Otherwise, the arguments are the
          same as for *note resolve_xref(): 4e7.

          The method must return a list (potentially empty) of tuples
          ‘('domain:role', newnode)’, where ‘'domain:role'’ is the name
          of a role that could have created the same reference, e.g.
          ‘'py:func'’.  ‘newnode’ is what *note resolve_xref(): 4e7.
          would return.

          New in version 1.3.

      -- Method: resolve_xref (env, fromdocname, builder, typ, target,
               node, contnode)

          Resolve the pending_xref `node' with the given `typ' and
          `target'.

          This method should return a new node, to replace the xref
          node, containing the `contnode' which is the markup content of
          the cross-reference.

          If no resolution can be found, None can be returned; the xref
          node will then given to the ‘missing-reference’ event, and if
          that yields no resolution, replaced by `contnode'.

          The method can also raise ‘sphinx.environment.NoUri’ to
          suppress the ‘missing-reference’ event being emitted.

      -- Method: role (name)

          Return a role adapter function that always gives the
          registered role its full name (‘domain:name’) as the first
          argument.

      -- Attribute: dangling_warnings = {}

          role name -> a warning message if reference is missing

      -- Attribute: data = None

          data value

      -- Attribute: data_version = 0

          data version, bump this when the format of ‘self.data’ changes

      -- Attribute: directives = {}

          directive name -> directive class

      -- Attribute: indices = []

          a list of Index subclasses

      -- Attribute: initial_data = {}

          data value for a fresh environment

      -- Attribute: label = ''

          domain label: longer, more descriptive (used in messages)

      -- Attribute: name = ''

          domain name: should be short, but unique

      -- Attribute: object_types = {}

          type (usually directive) name -> ObjType instance

      -- Attribute: roles = {}

          role name -> role callable

 -- Class: sphinx.domains.ObjType (lname, *roles, **attrs)

     An ObjType is the description for a type of object that a domain
     can document.  In the object_types attribute of Domain subclasses,
     object type names are mapped to instances of this class.

     Constructor arguments:

        - `lname': localized name of the type (do not include domain
          name)

        - `roles': all the roles that can refer to an object of this
          type

        - `attrs': object attributes – currently only “searchprio” is
          known, which defines the object’s priority in the full-text
          search index, see *note Domain.get_objects(): 4e1.

 -- Class: sphinx.domains.Index (domain)

     An Index is the description for a domain-specific index.  To add an
     index to a domain, subclass Index, overriding the three name
     attributes:

        * ‘name’ is an identifier used for generating file names.

        * ‘localname’ is the section title for the index.

        * ‘shortname’ is a short name for the index, for use in the
          relation bar in HTML output.  Can be empty to disable entries
          in the relation bar.

     and providing a *note generate(): 4f4. method.  Then, add the index
     class to your domain’s ‘indices’ list.  Extensions can add indices
     to existing domains using *note add_index_to_domain(): 45b.

      -- Method: generate (docnames=None)

          Return entries for the index given by `name'.  If `docnames'
          is given, restrict to entries referring to these docnames.

          The return value is a tuple of ‘(content, collapse)’, where
          `collapse' is a boolean that determines if sub-entries should
          start collapsed (for output formats that support collapsing
          sub-entries).

          `content' is a sequence of ‘(letter, entries)’ tuples, where
          `letter' is the “heading” for the given `entries', usually the
          starting letter.

          `entries' is a sequence of single entries, where a single
          entry is a sequence ‘[name, subtype, docname, anchor, extra,
          qualifier, descr]’.  The items in this sequence have the
          following meaning:

             - ‘name’ – the name of the index entry to be displayed

             - ‘subtype’ – sub-entry related type: 0 – normal entry 1 –
               entry with sub-entries 2 – sub-entry

             - ‘docname’ – docname where the entry is located

             - ‘anchor’ – anchor for the entry within ‘docname’

             - ‘extra’ – extra info for the entry

             - ‘qualifier’ – qualifier for the description

             - ‘descr’ – description for the entry

          Qualifier and description are not rendered e.g.  in LaTeX
          output.


File: sphinx.info,  Node: Parser API,  Next: Doctree node classes added by Sphinx,  Prev: Domain API,  Up: APIs used for writing extensions

18.3.8 Parser API
-----------------

The docutils documentation describes(1) parsers as follows:

     The Parser analyzes the input document and creates a node tree
     representation.

In Sphinx, the parser modules works as same as docutils.  The parsers
are registered to Sphinx by extensions using Application APIs;
‘Sphinx.add_source_suffix()’ and ‘Sphinx.add_source_parsers()’.

The `source suffix' is a mapping from file suffix to file type.  For
example, ‘.rst’ file is mapped to ‘'restructuredtext'’ type.  Sphinx
uses the file type to looking for parsers from registered list.  On
searching, Sphinx refers to the ‘Parser.supported’ attribute and picks
up a parser which contains the file type in the attribute.

The users can override the source suffix mappings using *note
source_suffix: 88. like following:

     # a mapping from file suffix to file types
     source_suffix = {
         '.rst': 'restructuredtext',
         '.md': 'markdown',
     }

You should indicate file types your parser supports.  This will allow
users to configure their settings appropriately.

 -- Class: sphinx.parsers.Parser

     A base class of source parsers.  The additonal parsers should
     inherits this class instead of ‘docutils.parsers.Parser’.  Compared
     with ‘docutils.parsers.Parser’, this class improves accessibility
     to Sphinx APIs.

     The subclasses can access following objects and functions:

     self.app

          The application object (*note sphinx.application.Sphinx: 43c.)

     self.config

          The config object (*note sphinx.config.Config: 43e.)

     self.env

          The environment object (*note
          sphinx.environment.BuildEnvironment: 39f.)

     self.warn()

          Emit a warning.  (Same as *note
          sphinx.application.Sphinx.warn(): 470.)

     self.info()

          Emit a informational message.  (Same as *note
          sphinx.application.Sphinx.info(): 472.)

   ---------- Footnotes ----------

   (1) 
http://docutils.sourceforge.net/docs/dev/hacking.html#parsing-the-document


File: sphinx.info,  Node: Doctree node classes added by Sphinx,  Next: Logging API,  Prev: Parser API,  Up: APIs used for writing extensions

18.3.9 Doctree node classes added by Sphinx
-------------------------------------------

* Menu:

* Nodes for domain-specific object descriptions::
* New admonition-like constructs::
* Other paragraph-level nodes::
* New inline nodes::
* Special nodes::


File: sphinx.info,  Node: Nodes for domain-specific object descriptions,  Next: New admonition-like constructs,  Up: Doctree node classes added by Sphinx

18.3.9.1 Nodes for domain-specific object descriptions
......................................................

 -- Class: sphinx.addnodes.desc (rawsource='', *children, **attributes)

     Node for object descriptions.

     This node is similar to a “definition list” with one definition.
     It contains one or more ‘desc_signature’ and a ‘desc_content’.

 -- Class: sphinx.addnodes.desc_signature (rawsource='', text='',
          *children, **attributes)

     Node for object signatures.

     The “term” part of the custom Sphinx definition list.

     As default the signature is a single line signature, but set
     ‘is_multiline = True’ to describe a multi-line signature.  In that
     case all child nodes must be ‘desc_signature_line’ nodes.

 -- Class: sphinx.addnodes.desc_signature_line (rawsource='', text='',
          *children, **attributes)

     Node for a line in a multi-line object signatures.

     It should only be used in a ‘desc_signature’ with ‘is_multiline’
     set.  Set ‘add_permalink = True’ for the line that should get the
     permalink.

 -- Class: sphinx.addnodes.desc_addname (rawsource='', text='',
          *children, **attributes)

     Node for additional name parts (module name, class name).

 -- Class: sphinx.addnodes.desc_type (rawsource='', text='', *children,
          **attributes)

     Node for return types or object type names.

 -- Class: sphinx.addnodes.desc_returns (rawsource='', text='',
          *children, **attributes)

     Node for a “returns” annotation (a la -> in Python).

 -- Class: sphinx.addnodes.desc_name (rawsource='', text='', *children,
          **attributes)

     Node for the main object name.

 -- Class: sphinx.addnodes.desc_parameterlist (rawsource='', text='',
          *children, **attributes)

     Node for a general parameter list.

 -- Class: sphinx.addnodes.desc_parameter (rawsource='', text='',
          *children, **attributes)

     Node for a single parameter.

 -- Class: sphinx.addnodes.desc_optional (rawsource='', text='',
          *children, **attributes)

     Node for marking optional parts of the parameter list.

 -- Class: sphinx.addnodes.desc_annotation (rawsource='', text='',
          *children, **attributes)

     Node for signature annotations (not Python 3-style annotations).

 -- Class: sphinx.addnodes.desc_content (rawsource='', *children,
          **attributes)

     Node for object description content.

     This is the “definition” part of the custom Sphinx definition list.


File: sphinx.info,  Node: New admonition-like constructs,  Next: Other paragraph-level nodes,  Prev: Nodes for domain-specific object descriptions,  Up: Doctree node classes added by Sphinx

18.3.9.2 New admonition-like constructs
.......................................

 -- Class: sphinx.addnodes.versionmodified (rawsource='', text='',
          *children, **attributes)

     Node for version change entries.

     Currently used for “versionadded”, “versionchanged” and
     “deprecated” directives.

 -- Class: sphinx.addnodes.seealso (rawsource='', *children,
          **attributes)

     Custom “see also” admonition.


File: sphinx.info,  Node: Other paragraph-level nodes,  Next: New inline nodes,  Prev: New admonition-like constructs,  Up: Doctree node classes added by Sphinx

18.3.9.3 Other paragraph-level nodes
....................................

 -- Class: sphinx.addnodes.compact_paragraph (rawsource='', text='',
          *children, **attributes)

     Node for a compact paragraph (which never makes a <p> node).


File: sphinx.info,  Node: New inline nodes,  Next: Special nodes,  Prev: Other paragraph-level nodes,  Up: Doctree node classes added by Sphinx

18.3.9.4 New inline nodes
.........................

 -- Class: sphinx.addnodes.index (rawsource='', text='', *children,
          **attributes)

     Node for index entries.

     This node is created by the ‘index’ directive and has one
     attribute, ‘entries’.  Its value is a list of 5-tuples of
     ‘(entrytype, entryname, target, ignored, key)’.

     `entrytype' is one of “single”, “pair”, “double”, “triple”.

     `key' is categolziation characters (usually it is single character)
     for general index page.  For the detail of this, please see also:
     *note glossary: 120. and issue #2320.

 -- Class: sphinx.addnodes.pending_xref (rawsource='', *children,
          **attributes)

     Node for cross-references that cannot be resolved without complete
     information about all documents.

     These nodes are resolved before writing output, in
     BuildEnvironment.resolve_references.

 -- Class: sphinx.addnodes.literal_emphasis (rawsource='', text='',
          *children, **attributes)

     Node that behaves like ‘emphasis’, but further text processors are
     not applied (e.g.  smartypants for HTML output).

 -- Class: sphinx.addnodes.abbreviation (rawsource='', text='',
          *children, **attributes)

     Node for abbreviations with explanations.

 -- Class: sphinx.addnodes.download_reference (rawsource='', text='',
          *children, **attributes)

     Node for download references, similar to pending_xref.


File: sphinx.info,  Node: Special nodes,  Prev: New inline nodes,  Up: Doctree node classes added by Sphinx

18.3.9.5 Special nodes
......................

 -- Class: sphinx.addnodes.only (rawsource='', *children, **attributes)

     Node for “only” directives (conditional inclusion based on tags).

 -- Class: sphinx.addnodes.meta (rawsource='', *children, **attributes)

     Node for meta directive – same as docutils’ standard meta node, but
     pickleable.

 -- Class: sphinx.addnodes.highlightlang (rawsource='', *children,
          **attributes)

     Inserted to set the highlight language and line number options for
     subsequent code blocks.

You should not need to generate the nodes below in extensions.

 -- Class: sphinx.addnodes.glossary (rawsource='', *children,
          **attributes)

     Node to insert a glossary.

 -- Class: sphinx.addnodes.toctree (rawsource='', *children,
          **attributes)

     Node for inserting a “TOC tree”.

 -- Class: sphinx.addnodes.start_of_file (rawsource='', *children,
          **attributes)

     Node to mark start of a new file, used in the LaTeX builder only.

 -- Class: sphinx.addnodes.productionlist (rawsource='', *children,
          **attributes)

     Node for grammar production lists.

     Contains ‘production’ nodes.

 -- Class: sphinx.addnodes.production (rawsource='', text='', *children,
          **attributes)

     Node for a single grammar production rule.


File: sphinx.info,  Node: Logging API,  Next: i18n API,  Prev: Doctree node classes added by Sphinx,  Up: APIs used for writing extensions

18.3.10 Logging API
-------------------

 -- Function: sphinx.util.logging.getLogger (name)

     Get logger wrapped by SphinxLoggerAdapter.

 -- Class: sphinx.util.logging.SphinxLoggerAdapter
          (logging.LoggerAdapter)

     LoggerAdapter allowing ‘type’ and ‘subtype’ keywords.

      -- Method: error (level, msg, *args, **kwargs)

      -- Method: critical (level, msg, *args, **kwargs)

      -- Method: warning (level, msg, *args, **kwargs)

          Logs a message on this logger with the specified level.
          Basically, the arguments are as with python’s logging module.

          In addition, Sphinx logger supports following keyword
          arguments:

          `type', `*subtype*'

               Categories of warning logs.  It is used to suppress
               warnings by *note suppress_warnings: 272. setting.

          `location'

               Where the warning happened.  It is used to include the
               path and line number in each log.  It allows docname,
               tuple of docname and line number and nodes:

                    logger = sphinx.util.logging.getLogger(__name__)
                    logger.warning('Warning happened!', location='index')
                    logger.warning('Warning happened!', location=('chapter1/index', 10))
                    logger.warning('Warning happened!', location=some_node)

          `color'

               The color of logs.  By default, warning level logs are
               colored as ‘"darkred"’.  The others are not colored.

      -- Method: log (level, msg, *args, **kwargs)

      -- Method: info (level, msg, *args, **kwargs)

      -- Method: verbose (level, msg, *args, **kwargs)

      -- Method: debug (level, msg, *args, **kwargs)

          Logs a message to this logger with the specified level.
          Basically, the arguments are as with python’s logging module.

          In addition, Sphinx logger supports following keyword
          arguments:

          `nonl'

               If true, the logger does not fold lines at the end of the
               log message.  The default is ‘False’.

          `color'

               The color of logs.  By default, debug level logs are
               colored as ‘"darkgray"’, and debug2 level ones are
               ‘"lightgray"’.  The others are not colored.

 -- Function: sphinx.util.logging.pending_logging ()

     contextmanager to pend logging all logs temporary.

 -- Function: sphinx.util.logging.pending_warnings ()

     contextmanager to pend logging warnings temporary.


File: sphinx.info,  Node: i18n API,  Prev: Logging API,  Up: APIs used for writing extensions

18.3.11 i18n API
----------------

 -- Function: sphinx.locale.init (locale_dirs, language,
          catalog='sphinx')

     Look for message catalogs in ‘locale_dirs’ and `ensure' that there
     is at least a NullTranslations catalog set in ‘translators’.  If
     called multiple times or if several ‘.mo’ files are found, their
     contents are merged together (thus making ‘init’ reentrable).

 -- Function: sphinx.locale._ (message)

 -- Function: sphinx.locale.__ (message)

     A dummy wrapper to i18n’ize exceptions and command line messages.

     In future, the messages are translated using LC_MESSAGES or any
     other locale settings.


File: sphinx.info,  Node: Deprecated APIs,  Prev: APIs used for writing extensions,  Up: Developing extensions for Sphinx

18.4 Deprecated APIs
====================

On developing Sphinx, we are always careful to the compatibility of our
APIs.  But, sometimes, the change of interface are needed for some
reasons.  In such cases, we’ve marked thme as deprecated.  And they are
kept during the two major versions (for more details, please see
deprecation-policy).

The following is a list of deprecated interface.  deprecated APIs

Target                        Deprecated                    (will be) Removed             Alternatives
                                                                                          
------------------------------------------------------------------------------------------------------------------------
                                                                                          
*note source_parsers: 268.    1.8                           3.0                           *note add_source_parser(): 466.
                                                                                          
                                                                                          
‘Sphinx.import_object()’      1.8                           3.0                           ‘sphinx.util.import_object()’
                                                                                          
                                                                                          
‘suffix’ argument of          1.8                           3.0                           ‘add_source_suffix()’
*note add_source_parser(): 466.                                                           

‘sphinx.util.docutils.directive_helper()’1.8                3.0                           ‘Directive’ class of
                                                                                          docutils
                                                                                          
                                                                                          
‘sphinx.cmdline’              1.8                           3.0                           ‘sphinx.cmd.build’
                                                                                          
                                                                                          
‘BuildEnvironment.update()’   1.8                           3.0                           ‘Builder.read()’
                                                                                          
                                                                                          
‘BuildEnvironment._read_serial()’1.8                        3.0                           ‘Builder.read()’
                                                                                          
                                                                                          
‘BuildEnvironment._read_parallel()’1.8                      3.0                           ‘Builder.read()’
                                                                                          
                                                                                          
‘sphinx.locale.l_()’          1.8                           3.0                           *note sphinx.locale._(): 52c.
                                                                                          
                                                                                          
‘sphinx.locale.lazy_gettext()’1.8                           3.0                           *note sphinx.locale._(): 52c.
                                                                                          
                                                                                          
‘sphinx.locale.mygettext()’   1.8                           3.0                           *note sphinx.locale._(): 52c.
                                                                                          
                                                                                          
‘sphinx.util.copy_static_entry()’1.5                        3.0                           ‘sphinx.util.fileutil.copy_asset()’
                                                                                          
                                                                                          
‘sphinx.build_main()’         1.7                           2.0                           ‘sphinx.cmd.build.build_main()’
                                                                                          
                                                                                          
‘sphinx.ext.intersphinx.debug()’1.7                         2.0                           ‘sphinx.ext.intersphinx.inspect_main()’
                                                                                          
                                                                                          
‘sphinx.ext.autodoc.format_annotation()’1.7                 2.0                           ‘sphinx.util.inspect.Signature’
                                                                                          
                                                                                          
‘sphinx.ext.autodoc.formatargspec()’1.7                     2.0                           ‘sphinx.util.inspect.Signature’
                                                                                          
                                                                                          
‘sphinx.ext.autodoc.AutodocReporter’1.7                     2.0                           ‘sphinx.util.docutils.switch_source_input()’
                                                                                          
                                                                                          
‘sphinx.ext.autodoc.add_documenter()’1.7                    2.0                           *note add_autodocumenter(): 463.
                                                                                          
                                                                                          
‘sphinx.ext.autodoc.AutoDirective._register’1.7             2.0                           *note add_autodocumenter(): 463.
                                                                                          
                                                                                          
‘AutoDirective._special_attrgetters’1.7                     2.0                           *note add_autodoc_attrgetter(): 464.
                                                                                          
                                                                                          
‘Sphinx.warn()’,              1.6                           2.0                           *note Logging API: 46f.
‘Sphinx.info()’                                                                           

‘BuildEnvironment.set_warnfunc()’1.6                        2.0                           *note Logging API: 46f.
                                                                                          
                                                                                          
‘BuildEnvironment.note_toctree()’1.6                        2.0                           ‘Toctree.note()’ (in
                                                                                          ‘sphinx.environment.adapters.toctree’)
                                                                                          
                                                                                          
‘BuildEnvironment.get_toc_for()’1.6                         2.0                           ‘Toctree.get_toc_for()’ (in
                                                                                          ‘sphinx.environment.adapters.toctree’)
                                                                                          
                                                                                          
‘BuildEnvironment.get_toctree_for()’1.6                     2.0                           ‘Toctree.get_toctree_for()’
                                                                                          (in
                                                                                          ‘sphinx.environment.adapters.toctree’)
                                                                                          
                                                                                          
‘BuildEnvironment.create_index()’1.6                        2.0                           ‘IndexEntries.create_index()’
                                                                                          (in
                                                                                          ‘sphinx.environment.adapters.indexentries’)
                                                                                          
                                                                                          
‘sphinx.websupport’           1.6                           2.0                           sphinxcontrib-websupport(1)
                                                                                          
                                                                                          
‘StandaloneHTMLBuilder.css_files’1.6                        2.0                           *note add_stylesheet(): 460.
                                                                                          
                                                                                          
‘Sphinx.status_iterator()’    1.6                           1.7                           ‘sphinx.util.status_iterator()’
                                                                                          
                                                                                          
‘Sphinx.old_status_iterator()’1.6                           1.7                           ‘sphinx.util.old_status_iterator()’
                                                                                          
                                                                                          
‘Sphinx._directive_helper()’  1.6                           1.7                           ‘sphinx.util.docutils.directive_helper()’
                                                                                          
                                                                                          
‘sphinx.util.compat.Directive’1.6                           1.7                           ‘docutils.parsers.rst.Directive’
                                                                                          
                                                                                          
‘sphinx.util.compat.docutils_version’1.6                    1.7                           ‘sphinx.util.docutils.__version_info__’
                                                                                          

     Note: On deprecating on public APIs (internal functions and
     classes), we also follow the policy as much as possible.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/sphinxcontrib-websupport


File: sphinx.info,  Node: Sphinx Web Support,  Next: Sphinx FAQ,  Prev: Developing extensions for Sphinx,  Up: Top

19 Sphinx Web Support
*********************

New in version 1.1.

Sphinx provides a Python API to easily integrate Sphinx documentation
into your web application.  To learn more read the *note Web Support
Quick Start: 532.

* Menu:

* Web Support Quick Start::
* The WebSupport Class::
* Search Adapters::
* Storage Backends::


File: sphinx.info,  Node: Web Support Quick Start,  Next: The WebSupport Class,  Up: Sphinx Web Support

19.1 Web Support Quick Start
============================

* Menu:

* Building Documentation Data::
* Integrating Sphinx Documents Into Your Webapp::
* Performing Searches::
* Comments & Proposals::
* Comment Moderation::


File: sphinx.info,  Node: Building Documentation Data,  Next: Integrating Sphinx Documents Into Your Webapp,  Up: Web Support Quick Start

19.1.1 Building Documentation Data
----------------------------------

To make use of the web support package in your application you’ll need
to build the data it uses.  This data includes pickle files representing
documents, search indices, and node data that is used to track where
comments and other things are in a document.  To do this you will need
to create an instance of the *note WebSupport: 536. class and call its
*note build(): 537. method:

     from sphinxcontrib.websupport import WebSupport

     support = WebSupport(srcdir='/path/to/rst/sources/',
                          builddir='/path/to/build/outdir',
                          search='xapian')

     support.build()

This will read reStructuredText sources from ‘srcdir’ and place the
necessary data in ‘builddir’.  The ‘builddir’ will contain two
sub-directories: one named “data” that contains all the data needed to
display documents, search through documents, and add comments to
documents.  The other directory will be called “static” and contains
static files that should be served from “/static”.

     Note: If you wish to serve static files from a path other than
     “/static”, you can do so by providing the `staticdir' keyword
     argument when creating the *note WebSupport: 536. object.


File: sphinx.info,  Node: Integrating Sphinx Documents Into Your Webapp,  Next: Performing Searches,  Prev: Building Documentation Data,  Up: Web Support Quick Start

19.1.2 Integrating Sphinx Documents Into Your Webapp
----------------------------------------------------

Now that the data is built, it’s time to do something useful with it.
Start off by creating a *note WebSupport: 536. object for your
application:

     from sphinxcontrib.websupport import WebSupport

     support = WebSupport(datadir='/path/to/the/data',
                          search='xapian')

You’ll only need one of these for each set of documentation you will be
working with.  You can then call its *note get_document(): 539. method
to access individual documents:

     contents = support.get_document('contents')

This will return a dictionary containing the following items:

   * `body': The main body of the document as HTML

   * `sidebar': The sidebar of the document as HTML

   * `relbar': A div containing links to related documents

   * `title': The title of the document

   * `css': Links to CSS files used by Sphinx

   * `script': JavaScript containing comment options

This dict can then be used as context for templates.  The goal is to be
easy to integrate with your existing templating system.  An example
using Jinja2(1) is:

     {%- extends "layout.html" %}

     {%- block title %}
         {{ document.title }}
     {%- endblock %}

     {% block css %}
         {{ super() }}
         {{ document.css|safe }}
         <link rel="stylesheet" href="/static/websupport-custom.css" type="text/css">
     {% endblock %}

     {%- block script %}
         {{ super() }}
         {{ document.script|safe }}
     {%- endblock %}

     {%- block relbar %}
         {{ document.relbar|safe }}
     {%- endblock %}

     {%- block body %}
         {{ document.body|safe }}
     {%- endblock %}

     {%- block sidebar %}
         {{ document.sidebar|safe }}
     {%- endblock %}

* Menu:

* Authentication::

   ---------- Footnotes ----------

   (1) http://jinja.pocoo.org/


File: sphinx.info,  Node: Authentication,  Up: Integrating Sphinx Documents Into Your Webapp

19.1.2.1 Authentication
.......................

To use certain features such as voting, it must be possible to
authenticate users.  The details of the authentication are left to your
application.  Once a user has been authenticated you can pass the user’s
details to certain *note WebSupport: 536. methods using the `username'
and `moderator' keyword arguments.  The web support package will store
the username with comments and votes.  The only caveat is that if you
allow users to change their username you must update the websupport
package’s data:

     support.update_username(old_username, new_username)

`username' should be a unique string which identifies a user, and
`moderator' should be a boolean representing whether the user has
moderation privileges.  The default value for `moderator' is ‘False’.

An example Flask(1) function that checks whether a user is logged in and
then retrieves a document is:

     from sphinxcontrib.websupport.errors import *

     @app.route('/<path:docname>')
     def doc(docname):
         username = g.user.name if g.user else ''
         moderator = g.user.moderator if g.user else False
         try:
             document = support.get_document(docname, username, moderator)
         except DocumentNotFoundError:
             abort(404)
         return render_template('doc.html', document=document)

The first thing to notice is that the `docname' is just the request
path.  This makes accessing the correct document easy from a single
view.  If the user is authenticated, then the username and moderation
status are passed along with the docname to *note get_document(): 539.
The web support package will then add this data to the ‘COMMENT_OPTIONS’
that are used in the template.

     Note: This only works if your documentation is served from your
     document root.  If it is served from another directory, you will
     need to prefix the url route with that directory, and give the
     ‘docroot’ keyword argument when creating the web support object:

          support = WebSupport(..., docroot='docs')

          @app.route('/docs/<path:docname>')

   ---------- Footnotes ----------

   (1) http://flask.pocoo.org/


File: sphinx.info,  Node: Performing Searches,  Next: Comments & Proposals,  Prev: Integrating Sphinx Documents Into Your Webapp,  Up: Web Support Quick Start

19.1.3 Performing Searches
--------------------------

To use the search form built-in to the Sphinx sidebar, create a function
to handle requests to the url ‘search’ relative to the documentation
root.  The user’s search query will be in the GET parameters, with the
key ‘q’.  Then use the *note get_search_results(): 53c. method to
retrieve search results.  In Flask(1) that would be like this:

     @app.route('/search')
     def search():
         q = request.args.get('q')
         document = support.get_search_results(q)
         return render_template('doc.html', document=document)

Note that we used the same template to render our search results as we
did to render our documents.  That’s because *note get_search_results():
53c. returns a context dict in the same format that *note
get_document(): 539. does.

   ---------- Footnotes ----------

   (1) http://flask.pocoo.org/


File: sphinx.info,  Node: Comments & Proposals,  Next: Comment Moderation,  Prev: Performing Searches,  Up: Web Support Quick Start

19.1.4 Comments & Proposals
---------------------------

Now that this is done it’s time to define the functions that handle the
AJAX calls from the script.  You will need three functions.  The first
function is used to add a new comment, and will call the web support
method *note add_comment(): 53e.:

     @app.route('/docs/add_comment', methods=['POST'])
     def add_comment():
         parent_id = request.form.get('parent', '')
         node_id = request.form.get('node', '')
         text = request.form.get('text', '')
         proposal = request.form.get('proposal', '')
         username = g.user.name if g.user is not None else 'Anonymous'
         comment = support.add_comment(text, node_id='node_id',
                                       parent_id='parent_id',
                                       username=username, proposal=proposal)
         return jsonify(comment=comment)

You’ll notice that both a ‘parent_id’ and ‘node_id’ are sent with the
request.  If the comment is being attached directly to a node,
‘parent_id’ will be empty.  If the comment is a child of another
comment, then ‘node_id’ will be empty.  Then next function handles the
retrieval of comments for a specific node, and is aptly named *note
get_data(): 53f.:

     @app.route('/docs/get_comments')
     def get_comments():
         username = g.user.name if g.user else None
         moderator = g.user.moderator if g.user else False
         node_id = request.args.get('node', '')
         data = support.get_data(node_id, username, moderator)
         return jsonify(**data)

The final function that is needed will call *note process_vote(): 540,
and will handle user votes on comments:

     @app.route('/docs/process_vote', methods=['POST'])
     def process_vote():
         if g.user is None:
             abort(401)
         comment_id = request.form.get('comment_id')
         value = request.form.get('value')
         if value is None or comment_id is None:
             abort(400)
         support.process_vote(comment_id, g.user.id, value)
         return "success"


File: sphinx.info,  Node: Comment Moderation,  Prev: Comments & Proposals,  Up: Web Support Quick Start

19.1.5 Comment Moderation
-------------------------

By default, all comments added through *note add_comment(): 53e. are
automatically displayed.  If you wish to have some form of moderation,
you can pass the ‘displayed’ keyword argument:

     comment = support.add_comment(text, node_id='node_id',
                                   parent_id='parent_id',
                                   username=username, proposal=proposal,
                                   displayed=False)

You can then create a new view to handle the moderation of comments.  It
will be called when a moderator decides a comment should be accepted and
displayed:

     @app.route('/docs/accept_comment', methods=['POST'])
     def accept_comment():
         moderator = g.user.moderator if g.user else False
         comment_id = request.form.get('id')
         support.accept_comment(comment_id, moderator=moderator)
         return 'OK'

Rejecting comments happens via comment deletion.

To perform a custom action (such as emailing a moderator) when a new
comment is added but not displayed, you can pass callable to the *note
WebSupport: 536. class when instantiating your support object:

     def moderation_callback(comment):
         """Do something..."""

     support = WebSupport(..., moderation_callback=moderation_callback)

The moderation callback must take one argument, which will be the same
comment dict that is returned by ‘add_comment()’.


File: sphinx.info,  Node: The WebSupport Class,  Next: Search Adapters,  Prev: Web Support Quick Start,  Up: Sphinx Web Support

19.2 The WebSupport Class
=========================

 -- Class: sphinxcontrib.websupport.WebSupport

     The main API class for the web support package.  All interactions
     with the web support package should occur through this class.

     The class takes the following keyword arguments:

     srcdir

          The directory containing reStructuredText source files.

     builddir

          The directory that build data and static files should be
          placed in.  This should be used when creating a *note
          WebSupport: 536. object that will be used to build data.

     datadir

          The directory that the web support data is in.  This should be
          used when creating a *note WebSupport: 536. object that will
          be used to retrieve data.

     search

          This may contain either a string (e.g.  ‘xapian’) referencing
          a built-in search adapter to use, or an instance of a subclass
          of *note BaseSearch: 545.

     storage

          This may contain either a string representing a database uri,
          or an instance of a subclass of *note StorageBackend: 546.  If
          this is not provided, a new sqlite database will be created.

     moderation_callback

          A callable to be called when a new comment is added that is
          not displayed.  It must accept one argument: a dictionary
          representing the comment that was added.

     staticdir

          If static files are served from a location besides
          ‘'/static'’, this should be a string with the name of that
          location (e.g.  ‘'/static_files'’).

     docroot

          If the documentation is not served from the base path of a
          URL, this should be a string specifying that path (e.g.
          ‘'docs'’).

Changed in version 1.6: WebSupport class is moved to
sphinxcontrib.websupport from sphinx.websupport.  Please add
‘sphinxcontrib-websupport’ package in your dependency and use moved
class instead.

* Menu:

* Methods::


File: sphinx.info,  Node: Methods,  Up: The WebSupport Class

19.2.1 Methods
--------------

 -- Method: WebSupport.build ()

     Build the documentation.  Places the data into the ‘outdir’
     directory.  Use it like this:

          support = WebSupport(srcdir, builddir, search='xapian')
          support.build()

     This will read reStructured text files from ‘srcdir’.  Then it will
     build the pickles and search index, placing them into ‘builddir’.
     It will also save node data to the database.

 -- Method: WebSupport.get_document (docname, username='',
          moderator=False)

     Load and return a document from a pickle.  The document will be a
     dict object which can be used to render a template:

          support = WebSupport(datadir=datadir)
          support.get_document('index', username, moderator)

     In most cases ‘docname’ will be taken from the request path and
     passed directly to this function.  In Flask, that would be
     something like this:

          @app.route('/<path:docname>')
          def index(docname):
              username = g.user.name if g.user else ''
              moderator = g.user.moderator if g.user else False
              try:
                  document = support.get_document(docname, username,
                                                  moderator)
              except DocumentNotFoundError:
                  abort(404)
              render_template('doc.html', document=document)

     The document dict that is returned contains the following items to
     be used during template rendering.

        * `body': The main body of the document as HTML

        * `sidebar': The sidebar of the document as HTML

        * `relbar': A div containing links to related documents

        * `title': The title of the document

        * `css': Links to css files used by Sphinx

        * `script': Javascript containing comment options

     This raises ‘DocumentNotFoundError’ if a document matching
     ‘docname’ is not found.


     Parameters: ‘docname’ – the name of the document to load.

 -- Method: WebSupport.get_data (node_id, username=None,
          moderator=False)

     Get the comments and source associated with ‘node_id’.  If
     ‘username’ is given vote information will be included with the
     returned comments.  The default CommentBackend returns a dict with
     two keys, `source', and `comments'.  `source' is raw source of the
     node and is used as the starting point for proposals a user can
     add.  `comments' is a list of dicts that represent a comment, each
     having the following items:

     Key               Contents
                       
     ------------------------------------------------------------------------------
                       
     text              The comment text.
                       
                       
     username          The username that was stored with the comment.
                       
                       
     id                The comment’s unique identifier.
                       
                       
     rating            The comment’s current rating.
                       
                       
     age               The time in seconds since the comment was added.
                       
                       
     time              A dict containing time information.  It contains the
                       following keys: year, month, day, hour, minute, second,
                       iso, and delta.  ‘iso’ is the time formatted in ISO 8601
                       format.  ‘delta’ is a printable form of how old the
                       comment is (e.g.  “3 hours ago”).
                       
                       
     vote              If ‘user_id’ was given, this will be an integer
                       representing the vote.  1 for an upvote, -1 for a
                       downvote, or 0 if unvoted.
                       
                       
     node              The id of the node that the comment is attached to.  If
                       the comment’s parent is another comment rather than a
                       node, this will be null.
                       
                       
     parent            The id of the comment that this comment is attached to if
                       it is not attached to a node.
                       
                       
     children          A list of all children, in this format.
                       
                       
     proposal_diff     An HTML representation of the differences between the the
                       current source and the user’s proposed source.
                       


     Parameters:

        * ‘node_id’ – the id of the node to get comments for.

        * ‘username’ – the username of the user viewing the comments.

        * ‘moderator’ – whether the user is a moderator.

 -- Method: WebSupport.add_comment (text, node_id='', parent_id='',
          displayed=True, username=None, time=None, proposal=None,
          moderator=False)

     Add a comment to a node or another comment.  Returns the comment in
     the same format as ‘get_comments()’.  If the comment is being
     attached to a node, pass in the node’s id (as a string) with the
     node keyword argument:

          comment = support.add_comment(text, node_id=node_id)

     If the comment is the child of another comment, provide the
     parent’s id (as a string) with the parent keyword argument:

          comment = support.add_comment(text, parent_id=parent_id)

     If you would like to store a username with the comment, pass in the
     optional ‘username’ keyword argument:

          comment = support.add_comment(text, node=node_id,
                                        username=username)


     Parameters:

        * ‘parent_id’ – the prefixed id of the comment’s parent.

        * ‘text’ – the text of the comment.

        * ‘displayed’ – for moderation purposes

        * ‘username’ – the username of the user making the comment.

        * ‘time’ – the time the comment was created, defaults to now.

 -- Method: WebSupport.process_vote (comment_id, username, value)

     Process a user’s vote.  The web support package relies on the API
     user to perform authentication.  The API user will typically
     receive a comment_id and value from a form, and then make sure the
     user is authenticated.  A unique username must be passed in, which
     will also be used to retrieve the user’s past voting data.  An
     example, once again in Flask:

          @app.route('/docs/process_vote', methods=['POST'])
          def process_vote():
              if g.user is None:
                  abort(401)
              comment_id = request.form.get('comment_id')
              value = request.form.get('value')
              if value is None or comment_id is None:
                  abort(400)
              support.process_vote(comment_id, g.user.name, value)
              return "success"


     Parameters:

        * ‘comment_id’ – the comment being voted on

        * ‘username’ – the unique username of the user voting

        * ‘value’ – 1 for an upvote, -1 for a downvote, 0 for an unvote.

 -- Method: WebSupport.get_search_results (q)

     Perform a search for the query ‘q’, and create a set of search
     results.  Then render the search results as html and return a
     context dict like the one created by *note get_document(): 539.:

          document = support.get_search_results(q)


     Parameters: ‘q’ – the search query


File: sphinx.info,  Node: Search Adapters,  Next: Storage Backends,  Prev: The WebSupport Class,  Up: Sphinx Web Support

19.3 Search Adapters
====================

To create a custom search adapter you will need to subclass the *note
BaseSearch: 545. class.  Then create an instance of the new class and
pass that as the ‘search’ keyword argument when you create the *note
WebSupport: 536. object:

     support = WebSupport(srcdir=srcdir,
                          builddir=builddir,
                          search=MySearch())

For more information about creating a custom search adapter, please see
the documentation of the *note BaseSearch: 545. class below.

 -- Class: sphinxcontrib.websupport.search.BaseSearch

     Defines an interface for search adapters.

Changed in version 1.6: BaseSearch class is moved to
sphinxcontrib.websupport.search from sphinx.websupport.search.

* Menu:

* BaseSearch Methods::


File: sphinx.info,  Node: BaseSearch Methods,  Up: Search Adapters

19.3.1 BaseSearch Methods
-------------------------

     The following methods are defined in the BaseSearch class.  Some
     methods do not need to be overridden, but some (*note
     add_document(): 54c. and *note handle_query(): 54d.) must be
     overridden in your subclass.  For a working example, look at the
     built-in adapter for whoosh.

 -- Method: BaseSearch.init_indexing (changed=[])

     Called by the builder to initialize the search indexer.  ‘changed’
     is a list of pagenames that will be reindexed.  You may want to
     remove these from the search index before indexing begins.


     Parameters: ‘changed’ – a list of pagenames that will be re-indexed

 -- Method: BaseSearch.finish_indexing ()

     Called by the builder when writing has been completed.  Use this to
     perform any finalization or cleanup actions after indexing is
     complete.

 -- Method: BaseSearch.feed (pagename, filename, title, doctree)

     Called by the builder to add a doctree to the index.  Converts the
     ‘doctree’ to text and passes it to *note add_document(): 54c.  You
     probably won’t want to override this unless you need access to the
     ‘doctree’.  Override *note add_document(): 54c. instead.


     Parameters:

        * ‘pagename’ – the name of the page to be indexed

        * ‘filename’ – the name of the original source file

        * ‘title’ – the title of the page to be indexed

        * ‘doctree’ – is the docutils doctree representation of the page

 -- Method: BaseSearch.add_document (pagename, filename, title, text)

     Called by *note feed(): 550. to add a document to the search index.
     This method should should do everything necessary to add a single
     document to the search index.

     ‘pagename’ is name of the page being indexed.  It is the
     combination of the source files relative path and filename, minus
     the extension.  For example, if the source file is
     “ext/builders.rst”, the ‘pagename’ would be “ext/builders”.  This
     will need to be returned with search results when processing a
     query.


     Parameters:

        * ‘pagename’ – the name of the page being indexed

        * ‘filename’ – the name of the original source file

        * ‘title’ – the page’s title

        * ‘text’ – the full text of the page

 -- Method: BaseSearch.query (q)

     Called by the web support api to get search results.  This method
     compiles the regular expression to be used when *note extracting
     context: 552, then calls *note handle_query(): 54d.  You won’t want
     to override this unless you don’t want to use the included *note
     extract_context(): 552. method.  Override *note handle_query():
     54d. instead.


     Parameters: ‘q’ – the search query string.

 -- Method: BaseSearch.handle_query (q)

     Called by *note query(): 551. to retrieve search results for a
     search query ‘q’.  This should return an iterable containing tuples
     of the following format:

          (<path>, <title>, <context>)

     ‘path’ and ‘title’ are the same values that were passed to *note
     add_document(): 54c, and ‘context’ should be a short text snippet
     of the text surrounding the search query in the document.

     The *note extract_context(): 552. method is provided as a simple
     way to create the ‘context’.


     Parameters: ‘q’ – the search query

 -- Method: BaseSearch.extract_context (text, length=240)

     Extract the context for the search query from the document’s full
     ‘text’.


     Parameters:

        * ‘text’ – the full text of the document to create the context
          for

        * ‘length’ – the length of the context snippet to return.


File: sphinx.info,  Node: Storage Backends,  Prev: Search Adapters,  Up: Sphinx Web Support

19.4 Storage Backends
=====================

To create a custom storage backend you will need to subclass the *note
StorageBackend: 546. class.  Then create an instance of the new class
and pass that as the ‘storage’ keyword argument when you create the
*note WebSupport: 536. object:

     support = WebSupport(srcdir=srcdir,
                          builddir=builddir,
                          storage=MyStorage())

For more information about creating a custom storage backend, please see
the documentation of the *note StorageBackend: 546. class below.

 -- Class: sphinxcontrib.websupport.storage.StorageBackend

     Defines an interface for storage backends.

Changed in version 1.6: StorageBackend class is moved to
sphinxcontrib.websupport.storage from sphinx.websupport.storage.

* Menu:

* StorageBackend Methods::


File: sphinx.info,  Node: StorageBackend Methods,  Up: Storage Backends

19.4.1 StorageBackend Methods
-----------------------------

 -- Method: StorageBackend.pre_build ()

     Called immediately before the build process begins.  Use this to
     prepare the StorageBackend for the addition of nodes.

 -- Method: StorageBackend.add_node (id, document, source)

     Add a node to the StorageBackend.


     Parameters:

        * ‘id’ – a unique id for the comment.

        * ‘document’ – the name of the document the node belongs to.

        * ‘source’ – the source files name.

 -- Method: StorageBackend.post_build ()

     Called after a build has completed.  Use this to finalize the
     addition of nodes if needed.

 -- Method: StorageBackend.add_comment (text, displayed, username, time,
          proposal, node_id, parent_id, moderator)

     Called when a comment is being added.


     Parameters:

        * ‘text’ – the text of the comment

        * ‘displayed’ – whether the comment should be displayed

        * ‘username’ – the name of the user adding the comment

        * ‘time’ – a date object with the time the comment was added

        * ‘proposal’ – the text of the proposal the user made

        * ‘node_id’ – the id of the node that the comment is being added
          to

        * ‘parent_id’ – the id of the comment’s parent comment.

        * ‘moderator’ – whether the user adding the comment is a
          moderator

 -- Method: StorageBackend.delete_comment (comment_id, username,
          moderator)

     Delete a comment.

     Raises ‘UserNotAuthorizedError’ if moderator is False and
     ‘username’ doesn’t match the username on the comment.


     Parameters:

        * ‘comment_id’ – The id of the comment being deleted.

        * ‘username’ – The username of the user requesting the deletion.

        * ‘moderator’ – Whether the user is a moderator.

 -- Method: StorageBackend.get_data (node_id, username, moderator)

     Called to retrieve all data for a node.  This should return a dict
     with two keys, `source' and `comments' as described by *note
     WebSupport: 536.’s *note get_data(): 53f. method.


     Parameters:

        * ‘node_id’ – The id of the node to get data for.

        * ‘username’ – The name of the user requesting the data.

        * ‘moderator’ – Whether the requestor is a moderator.

 -- Method: StorageBackend.process_vote (comment_id, username, value)

     Process a vote that is being cast.  ‘value’ will be either -1, 0,
     or 1.


     Parameters:

        * ‘comment_id’ – The id of the comment being voted on.

        * ‘username’ – The username of the user casting the vote.

        * ‘value’ – The value of the vote being cast.

 -- Method: StorageBackend.update_username (old_username, new_username)

     If a user is allowed to change their username this method should be
     called so that there is not stagnate data in the storage system.


     Parameters:

        * ‘old_username’ – The username being changed.

        * ‘new_username’ – What the username is being changed to.

 -- Method: StorageBackend.accept_comment (comment_id)

     Called when a moderator accepts a comment.  After the method is
     called the comment should be displayed to all users.


     Parameters: ‘comment_id’ – The id of the comment being accepted.


File: sphinx.info,  Node: Sphinx FAQ,  Next: Glossary<2>,  Prev: Sphinx Web Support,  Up: Top

20 Sphinx FAQ
*************

This is a list of Frequently Asked Questions about Sphinx.  Feel free to
suggest new entries!

* Menu:

* How do I…::
* Using Sphinx with…::
* Epub info::
* Texinfo info::


File: sphinx.info,  Node: How do I…,  Next: Using Sphinx with…,  Up: Sphinx FAQ

20.1 How do I…
==============

… create PDF files without LaTeX?

     rinohtype(1) provides a PDF builder that can be used as a drop-in
     replacement for the LaTeX builder.

… get section numbers?

     They are automatic in LaTeX output; for HTML, give a ‘:numbered:’
     option to the *note toctree: 10a. directive where you want to start
     numbering.

… customize the look of the built HTML files?

     Use themes, see *note HTML theming support: 64.

… add global substitutions or includes?

     Add them in the *note rst_epilog: 270. config value.

… display the whole TOC tree in the sidebar?

     Use the *note toctree: 370. callable in a custom layout template,
     probably in the ‘sidebartoc’ block.

… write my own extension?

     See the *note extension tutorial: 439.

… convert from my existing docs using MoinMoin markup?

     The easiest way is to convert to xhtml, then convert xhtml to
     reST(2). You’ll still need to mark up classes and such, but the
     headings and code examples come through cleanly.

… create HTML slides from Sphinx documents?

     See the “Hieroglyph” package at
     ‘https://github.com/nyergler/hieroglyph’.

For many more extensions and other contributed stuff, see the
sphinx-contrib(3) repository.

   ---------- Footnotes ----------

   (1) https://github.com/brechtm/rinohtype

   (2) http://docutils.sourceforge.net/sandbox/xhtml2rest/xhtml2rest.py

   (3) https://bitbucket.org/birkenfeld/sphinx-contrib/


File: sphinx.info,  Node: Using Sphinx with…,  Next: Epub info,  Prev: How do I…,  Up: Sphinx FAQ

20.2 Using Sphinx with…
=======================

Read the Docs

     ‘https://readthedocs.org’ is a documentation hosting service based
     around Sphinx.  They will host sphinx documentation, along with
     supporting a number of other features including version support,
     PDF generation, and more.  The Getting Started(1) guide is a good
     place to start.

Epydoc

     There’s a third-party extension providing an api role(2) which
     refers to Epydoc’s API docs for a given identifier.

Doxygen

     Michael Jones is developing a reST/Sphinx bridge to doxygen called
     breathe(3).

SCons

     Glenn Hutchings has written a SCons build script to build Sphinx
     documentation; it is hosted here:
     ‘https://bitbucket.org/zondo/sphinx-scons’

PyPI

     Jannis Leidel wrote a setuptools command(4) that automatically
     uploads Sphinx documentation to the PyPI package documentation area
     at ‘https://pythonhosted.org/’.

GitHub Pages

     Directories starting with underscores are ignored by default which
     breaks static files in Sphinx.  GitHub’s preprocessor can be
     disabled(5) to support Sphinx HTML output properly.

MediaWiki

     See ‘https://bitbucket.org/kevindunn/sphinx-wiki/wiki/Home’, a
     project by Kevin Dunn.

Google Analytics

     You can use a custom ‘layout.html’ template, like this:

          {% extends "!layout.html" %}

          {%- block extrahead %}
          {{ super() }}
          <script type="text/javascript">
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'XXX account number XXX']);
            _gaq.push(['_trackPageview']);
          </script>
          {% endblock %}

          {% block footer %}
          {{ super() }}
          <div class="footer">This page uses <a href="https://analytics.google.com/">
          Google Analytics</a> to collect statistics. You can disable it by blocking
          the JavaScript coming from www.google-analytics.com.
          <script type="text/javascript">
            (function() {
              var ga = document.createElement('script');
              ga.src = ('https:' == document.location.protocol ?
                        'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
              ga.setAttribute('async', 'true');
              document.documentElement.firstChild.appendChild(ga);
            })();
          </script>
          </div>
          {% endblock %}

   ---------- Footnotes ----------

   (1) 
https://read-the-docs.readthedocs.io/en/latest/getting_started.html

   (2) 
https://git.savannah.gnu.org/cgit/kenozooid.git/tree/doc/extapi.py

   (3) https://github.com/michaeljones/breathe/tree/master

   (4) https://pypi.python.org/pypi/Sphinx-PyPI-upload

   (5) https://github.com/blog/572-bypassing-jekyll-on-github-pages


File: sphinx.info,  Node: Epub info,  Next: Texinfo info,  Prev: Using Sphinx with…,  Up: Sphinx FAQ

20.3 Epub info
==============

The following list gives some hints for the creation of epub files:

   * Split the text into several files.  The longer the individual HTML
     files are, the longer it takes the ebook reader to render them.  In
     extreme cases, the rendering can take up to one minute.

   * Try to minimize the markup.  This also pays in rendering time.

   * For some readers you can use embedded or external fonts using the
     CSS ‘@font-face’ directive.  This is `extremely' useful for code
     listings which are often cut at the right margin.  The default
     Courier font (or variant) is quite wide and you can only display up
     to 60 characters on a line.  If you replace it with a narrower
     font, you can get more characters on a line.  You may even use
     FontForge(1) and create narrow variants of some free font.  In my
     case I get up to 70 characters on a line.

     You may have to experiment a little until you get reasonable
     results.

   * Test the created epubs.  You can use several alternatives.  The
     ones I am aware of are Epubcheck(2), Calibre(3), FBreader(4)
     (although it does not render the CSS), and Bookworm(5).  For
     Bookworm, you can download the source from
     ‘https://code.google.com/archive/p/threepress’ and run your own
     local server.

   * Large floating divs are not displayed properly.  If they cover more
     than one page, the div is only shown on the first page.  In that
     case you can copy the ‘epub.css’ from the
     ‘sphinx/themes/epub/static/’ directory to your local ‘_static/’
     directory and remove the float settings.

   * Files that are inserted outside of the ‘toctree’ directive must be
     manually included.  This sometimes applies to appendixes, e.g.  the
     glossary or the indices.  You can add them with the *note
     epub_post_files: 2e2. option.

   * The handling of the epub cover page differs from the
     reStructuredText procedure which automatically resolves image paths
     and puts the images into the ‘_images’ directory.  For the epub
     cover page put the image in the *note html_static_path: 26b.
     directory and reference it with its full path in the *note
     epub_cover: 2df. config option.

   * kindlegen(6) command can convert from epub3 resulting file to
     ‘.mobi’ file for Kindle.  You can get ‘yourdoc.mobi’ under
     ‘_build/epub’ after the following command:

          $ make epub
          $ kindlegen _build/epub/yourdoc.epub

     The kindlegen command doesn’t accept documents that have section
     titles surrounding ‘toctree’ directive:

          Section Title
          =============

          .. toctree::

             subdocument

          Section After Toc Tree
          ======================

     kindlegen assumes all documents order in line, but the resulting
     document has complicated order for kindlegen:

          ``parent.xhtml`` -> ``child.xhtml`` -> ``parent.xhtml``

     If you get the following error, fix your document structure:

          Error(prcgen):E24011: TOC section scope is not included in the parent chapter:(title)
          Error(prcgen):E24001: The table of content could not be built.

   ---------- Footnotes ----------

   (1) https://fontforge.github.io/

   (2) https://github.com/IDPF/epubcheck

   (3) https://calibre-ebook.com/

   (4) https://fbreader.org/

   (5) http://www.oreilly.com/bookworm/index.html

   (6) https://www.amazon.com/gp/feature.html?docId=1000765211


File: sphinx.info,  Node: Texinfo info,  Prev: Epub info,  Up: Sphinx FAQ

20.4 Texinfo info
=================

There are two main programs for reading Info files, ‘info’ and GNU
Emacs.  The ‘info’ program has less features but is available in most
Unix environments and can be quickly accessed from the terminal.  Emacs
provides better font and color display and supports extensive
customization (of course).

* Menu:

* Displaying Links::
* Notes::


File: sphinx.info,  Node: Displaying Links,  Next: Notes,  Up: Texinfo info

20.4.1 Displaying Links
-----------------------

One noticeable problem you may encounter with the generated Info files
is how references are displayed.  If you read the source of an Info
file, a reference to this section would look like:

     * note Displaying Links: target-id

In the stand-alone reader, ‘info’, references are displayed just as they
appear in the source.  Emacs, on the other-hand, will by default replace
‘*note:’ with ‘see’ and hide the ‘target-id’.  For example:

     *note Displaying Links: 567.

The exact behavior of how Emacs displays references is dependent on the
variable ‘Info-hide-note-references’.  If set to the value of ‘hide’,
Emacs will hide both the ‘*note:’ part and the ‘target-id’.  This is
generally the best way to view Sphinx-based documents since they often
make frequent use of links and do not take this limitation into account.
However, changing this variable affects how all Info documents are
displayed and most do take this behavior into account.

If you want Emacs to display Info files produced by Sphinx using the
value ‘hide’ for ‘Info-hide-note-references’ and the default value for
all other Info files, try adding the following Emacs Lisp code to your
start-up file, ‘~/.emacs.d/init.el’.

     (defadvice info-insert-file-contents (after
                                           sphinx-info-insert-file-contents
                                           activate)
       "Hack to make `Info-hide-note-references' buffer-local and
     automatically set to `hide' iff it can be determined that this file
     was created from a Texinfo file generated by Docutils or Sphinx."
       (set (make-local-variable 'Info-hide-note-references)
            (default-value 'Info-hide-note-references))
       (save-excursion
         (save-restriction
           (widen) (goto-char (point-min))
           (when (re-search-forward
                  "^Generated by \\(Sphinx\\|Docutils\\)"
                  (save-excursion (search-forward "\x1f" nil t)) t)
             (set (make-local-variable 'Info-hide-note-references)
                  'hide)))))


File: sphinx.info,  Node: Notes,  Prev: Displaying Links,  Up: Texinfo info

20.4.2 Notes
------------

The following notes may be helpful if you want to create Texinfo files:

   - Each section corresponds to a different ‘node’ in the Info file.

   - Colons (‘:’) cannot be properly escaped in menu entries and xrefs.
     They will be replaced with semicolons (‘;’).

   - Links to external Info files can be created using the somewhat
     official URI scheme ‘info’.  For example:

          info:Texinfo#makeinfo_options

   - Inline markup

     The standard formatting for ‘*strong*’ and ‘_emphasis_’ can result
     in ambiguous output when used to markup parameter names and other
     values.  Since this is a fairly common practice, the default
     formatting has been changed so that ‘emphasis’ and ‘strong’ are now
     displayed like ‘`literal'’s.

     The standard formatting can be re-enabled by adding the following
     to your ‘conf.py’:

          texinfo_elements = {'preamble': """
          @definfoenclose strong,*,*
          @definfoenclose emph,_,_
          """}


File: sphinx.info,  Node: Glossary<2>,  Next: Changes in Sphinx,  Prev: Sphinx FAQ,  Up: Top

21 Glossary
***********

builder

     A class (inheriting from *note Builder: 43d.) that takes parsed
     documents and performs an action on them.  Normally, builders
     translate the documents to an output format, but it is also
     possible to use the builder builders that e.g.  check for broken
     links in the documentation, or build coverage information.

     See *note Available builders: a3. for an overview over Sphinx’s
     built-in builders.

configuration directory

     The directory containing ‘conf.py’.  By default, this is the same
     as the *note source directory: 46, but can be set differently with
     the `-c' command-line option.

directive

     A reStructuredText markup element that allows marking a block of
     content with special meaning.  Directives are supplied not only by
     docutils, but Sphinx and custom extensions can add their own.  The
     basic directive syntax looks like this:

          .. directivename:: argument ...
             :option: value

             Content of the directive.

     See *note Directives: f3. for more information.

document name

     Since reST source files can have different extensions (some people
     like ‘.txt’, some like ‘.rst’ – the extension can be configured
     with *note source_suffix: 88.) and different OSes have different
     path separators, Sphinx abstracts them: `document names' are always
     relative to the *note source directory: 46, the extension is
     stripped, and path separators are converted to slashes.  All
     values, parameters and such referring to “documents” expect such
     document names.

     Examples for document names are ‘index’, ‘library/zipfile’, or
     ‘reference/datamodel/types’.  Note that there is no leading or
     trailing slash.

domain

     A domain is a collection of markup (reStructuredText *note
     directive: 175.s and *note role: 176.s) to describe and link to
     *note object: 177.s belonging together, e.g.  elements of a
     programming language.  Directive and role names in a domain have
     names like ‘domain:name’, e.g.  ‘py:function’.

     Having domains means that there are no naming problems when one set
     of documentation wants to refer to e.g.  C++ and Python classes.
     It also means that extensions that support the documentation of
     whole new languages are much easier to write.  For more information
     about domains, see the chapter *note Sphinx Domains: 58.

environment

     A structure where information about all documents under the root is
     saved, and used for cross-referencing.  The environment is pickled
     after the parsing stage, so that successive runs only need to read
     and parse new and changed documents.

master document

     The document that contains the root *note toctree: 10a. directive.

object

     The basic building block of Sphinx documentation.  Every “object
     directive” (e.g.  ‘function’ or *note object: 1e8.) creates such a
     block; and most objects can be cross-referenced to.

RemoveInSphinxXXXWarning

     The feature which is warned will be removed in Sphinx-XXX version.
     It usually caused from Sphinx extensions which is using deprecated.
     See also *note Deprecation Warnings: bf.

role

     A reStructuredText markup element that allows marking a piece of
     text.  Like directives, roles are extensible.  The basic syntax
     looks like this: ‘:rolename:`content`’.  See *note Inline markup:
     ed. for details.

source directory

     The directory which, including its subdirectories, contains all
     source files for one Sphinx project.

reStructuredText

     An easy-to-read, what-you-see-is-what-you-get plaintext markup
     syntax and parser system.


File: sphinx.info,  Node: Changes in Sphinx,  Next: Sphinx authors,  Prev: Glossary<2>,  Up: Top

22 Changes in Sphinx
********************


File: sphinx.info,  Node: Sphinx authors,  Next: Python Module Index,  Prev: Changes in Sphinx,  Up: Top

23 Sphinx authors
*****************


File: sphinx.info,  Node: Python Module Index,  Next: Index,  Prev: Sphinx authors,  Up: Top

Python Module Index
*******************

* Menu:

* sphinx.addnodes: 0.
* sphinx.application: 1. Application class and extensibility interface.
* sphinx.builders: 2. Available built-in builder classes.
* sphinx.builders.applehelp: 3.
* sphinx.builders.changes: 4.
* sphinx.builders.devhelp: 5.
* sphinx.builders.dummy: 6.
* sphinx.builders.epub3: 7.
* sphinx.builders.gettext: 8.
* sphinx.builders.html: 9.
* sphinx.builders.htmlhelp: a.
* sphinx.builders.latex: b.
* sphinx.builders.linkcheck: c.
* sphinx.builders.manpage: d.
* sphinx.builders.qthelp: e.
* sphinx.builders.texinfo: f.
* sphinx.builders.text: 10.
* sphinx.builders.xml: 11.
* conf: 12. Build configuration file.
* docutils.parsers.rst: 13.
* sphinx.domains: 14.
* sphinx.environment: 15.
* sphinx.environment.collectors: 16.
* sphinx.errors: 17.
* sphinx.ext.autodoc: 18. Include documentation from docstrings.
* sphinx.ext.autosectionlabel: 19. Allow reference section its title.
* sphinx.ext.autosummary: 1a. Generate autodoc summaries
* sphinx.ext.coverage: 1b. Check Python modules and C API for coverage in the
                        documentation.
* sphinx.ext.doctest: 1c. Test snippets in the documentation.
* sphinx.ext.extlinks: 1d. Allow inserting external links with common base URLs
                        easily.
* sphinx.ext.githubpages: 1e. Publish HTML docs in GitHub Pages
* sphinx.ext.graphviz: 1f. Support for Graphviz graphs.
* sphinx.ext.ifconfig: 20. Include documentation content based on configuration
                        values.
* sphinx.ext.imgconverter: 21. Convert images to appropriate format for builders
* sphinx.ext.imgmath: 22. Render math as PNG or SVG images.
* sphinx.ext.inheritance_diagram: 23. Support for displaying inheritance diagrams
                                  via graphviz.
* sphinx.ext.intersphinx: 24. Link to other Sphinx documentation.
* sphinx.ext.jsmath: 25. Render math using JavaScript via JSMath.
* sphinx.ext.linkcode: 26. Add external links to source code.
* sphinx.ext.mathbase: 27. Common math support for imgmath and mathjax / jsmath.
* sphinx.ext.mathjax: 28. Render math using JavaScript via MathJax.
* sphinx.ext.napoleon: 29. Support for NumPy and Google style docstrings
* sphinx.ext.todo: 2a. Allow inserting todo items into documents.
* sphinx.ext.viewcode: 2b. Add links to a highlighted version of the source code.
* latex: 2c. LaTeX specifics.
* sphinx.parsers: 2d.


File: sphinx.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* $.getJSON() ($ method):                The JavaScript Domain.
                                                              (line  47)
* _() (in module sphinx.locale):         i18n API.            (line  14)
* __() (in module sphinx.locale):        i18n API.            (line  16)
* a (C++ member):                        Inline Expressions and Tpes.
                                                              (line  20)
* abbr (role):                           Other semantic markup.
                                                              (line   9)
* abbreviation (class in sphinx.addnodes): New inline nodes.  (line  36)
* accept_comment() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line 113)
* add_autodocumenter() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  79)
* add_autodoc_attrgetter() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  81)
* add_builder() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  21)
* add_comment() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  29)
* add_comment() (sphinxcontrib.websupport.WebSupport method): Methods.
                                                              (line 130)
* add_config_value() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  23)
* add_crossref_type() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  63)
* add_directive() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  34)
* add_directive() (sphinx.application.Sphinx method) <1>: Extension setup.
                                                              (line  37)
* add_directive_to_domain() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  47)
* add_directive_to_domain() (sphinx.application.Sphinx method) <1>: Extension setup.
                                                              (line  50)
* add_document() (sphinxcontrib.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  45)
* add_domain() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  43)
* add_enumerable_node() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  31)
* add_env_collector() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  87)
* add_event() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  25)
* add_function_parentheses; configuration value: Project information.
                                                              (line  82)
* add_generic_role() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  41)
* add_html_theme() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  89)
* add_index_to_domain() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  55)
* add_javascript() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  71)
* add_latex_package() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  75)
* add_lexer() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  77)
* add_module_names; configuration value: Project information. (line  88)
* add_node() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  29)
* add_node() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  11)
* add_object_type() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  57)
* add_post_transform() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  69)
* add_role() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  39)
* add_role_to_domain() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  53)
* add_search_language() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  83)
* add_source_parser() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  85)
* add_stylesheet() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  73)
* add_transform() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  67)
* advance (C++ function):                Template Introductions.
                                                              (line  19)
* all-files; configuration value:        Options for setuptools integration.
                                                              (line  15)
* any (role):                            Cross-referencing anything.
                                                              (line   6)
* app (sphinx.environment.BuildEnvironment attribute): Build environment API.
                                                              (line  10)
* AppleHelpBuilder (class in sphinx.builders.applehelp): Available builders.
                                                              (line  88)
* applehelp_bundle_id; configuration value: Options for Apple Help output.
                                                              (line  25)
* applehelp_bundle_name; configuration value: Options for Apple Help output.
                                                              (line  20)
* applehelp_bundle_version; configuration value: Options for Apple Help output.
                                                              (line  37)
* applehelp_codesign_flags; configuration value: Options for Apple Help output.
                                                              (line 146)
* applehelp_codesign_identity; configuration value: Options for Apple Help output.
                                                              (line 137)
* applehelp_codesign_path; configuration value: Options for Apple Help output.
                                                              (line 159)
* applehelp_dev_region; configuration value: Options for Apple Help output.
                                                              (line  32)
* applehelp_disable_external_tools; configuration value: Options for Apple Help output.
                                                              (line 164)
* applehelp_icon; configuration value:   Options for Apple Help output.
                                                              (line  41)
* applehelp_indexer_path; configuration value: Options for Apple Help output.
                                                              (line 155)
* applehelp_index_anchors; configuration value: Options for Apple Help output.
                                                              (line  77)
* applehelp_kb_product; configuration value: Options for Apple Help output.
                                                              (line  48)
* applehelp_kb_url; configuration value: Options for Apple Help output.
                                                              (line  53)
* applehelp_locale; configuration value: Options for Apple Help output.
                                                              (line 125)
* applehelp_min_term_length; configuration value: Options for Apple Help output.
                                                              (line  85)
* applehelp_remote_url; configuration value: Options for Apple Help output.
                                                              (line  64)
* applehelp_stopwords; configuration value: Options for Apple Help output.
                                                              (line  90)
* applehelp_title; configuration value:  Options for Apple Help output.
                                                              (line 133)
* arguments (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  60)
* attributes (built-in variable):        Customizing templates.
                                                              (line  86)
* author; configuration value:           Project information. (line  10)
* autoattribute (directive):             sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 219)
* autoclass (directive):                 sphinx ext autodoc – Include documentation from docstrings.
                                                              (line  45)
* autoclass_content; configuration value: sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 292)
* autodata (directive):                  sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 219)
* autodoc-process-docstring; event:      Docstring preprocessing.
                                                              (line   8)
* autodoc-process-signature; event:      Docstring preprocessing.
                                                              (line  38)
* autodoc-skip-member; event:            Skipping members.    (line  10)
* autodoc_default_flags; configuration value: sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 335)
* autodoc_docstring_signature; configuration value: sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 356)
* autodoc_inherit_docstrings; configuration value: sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 393)
* autodoc_member_order; configuration value: sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 321)
* autodoc_mock_imports; configuration value: sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 370)
* autodoc_warningiserror; configuration value: sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 386)
* autoexception (directive):             sphinx ext autodoc – Include documentation from docstrings.
                                                              (line  45)
* autofunction (directive):              sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 219)
* automatic; documentation:              sphinx ext autodoc – Include documentation from docstrings.
                                                              (line   6)
* automatic; linking:                    sphinx ext intersphinx – Link to other projects’ documentation.
                                                              (line   6)
* automatic; testing:                    sphinx ext doctest – Test snippets in the documentation.
                                                              (line   6)
* automethod (directive):                sphinx ext autodoc – Include documentation from docstrings.
                                                              (line 219)
* automodule (directive):                sphinx ext autodoc – Include documentation from docstrings.
                                                              (line  45)
* autosectionlabel_prefix_document; configuration value: Configuration<2>.
                                                              (line   6)
* autosummary (directive):               sphinx ext autosummary – Generate autodoc summaries.
                                                              (line  27)
* autosummary_generate; configuration value: Generating stub pages automatically.
                                                              (line   9)
* bar (directive):                       The reStructuredText domain.
                                                              (line  29)
* BaseSearch (class in sphinxcontrib.websupport.search): Search Adapters.
                                                              (line  18)
* between() (in module sphinx.ext.autodoc): Docstring preprocessing.
                                                              (line  91)
* block_text (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  83)
* body (built-in variable):              Global Variables.    (line 123)
* build() (sphinx.builders.Builder method): Builder API.      (line  57)
* build() (sphinxcontrib.websupport.WebSupport method): Methods.
                                                              (line   6)
* build-dir; configuration value:        Options for setuptools integration.
                                                              (line  36)
* build-finished; event:                 Sphinx core events.  (line 198)
* BuildEnvironment (class in sphinx.environment): Build environment API.
                                                              (line   6)
* builder:                               Glossary<2>.         (line   6)
* builder (built-in variable):           Global Variables.    (line  10)
* Builder (class in sphinx.builders):    Builder API.         (line   8)
* builder-inited; event:                 Sphinx core events.  (line  17)
* builder; configuration value:          Options for setuptools integration.
                                                              (line  54)
* build_all() (sphinx.builders.Builder method): Builder API.  (line  45)
* build_specific() (sphinx.builders.Builder method): Builder API.
                                                              (line  49)
* build_update() (sphinx.builders.Builder method): Builder API.
                                                              (line  53)
* c;data (role):                         Cross-referencing C constructs.
                                                              (line  26)
* c;func (role):                         Cross-referencing C constructs.
                                                              (line   9)
* c;function (directive):                The C Domain.        (line   8)
* c;macro (directive):                   The C Domain.        (line  33)
* c;macro (role):                        Cross-referencing C constructs.
                                                              (line  18)
* c;member (directive):                  The C Domain.        (line  22)
* c;member (role):                       Cross-referencing C constructs.
                                                              (line  14)
* c;type (directive):                    The C Domain.        (line  41)
* c;type (role):                         Cross-referencing C constructs.
                                                              (line  22)
* c;var (directive):                     The C Domain.        (line  46)
* centered (directive):                  Paragraph-level markup.
                                                              (line 105)
* changes; in version:                   Paragraph-level markup.
                                                              (line   6)
* ChangesBuilder (class in sphinx.builders.changes): Available builders.
                                                              (line 369)
* CheckExternalLinksBuilder (class in sphinx.builders.linkcheck): Available builders.
                                                              (line 393)
* check_consistency() (sphinx.domains.Domain method): Domain API.
                                                              (line  31)
* class (built-in variable):             Customizing templates.
                                                              (line  50)
* classes (built-in variable):           Customizing templates.
                                                              (line  71)
* clear_doc() (sphinx.domains.Domain method): Domain API.     (line  35)
* clear_doc() (sphinx.environment.collectors.EnvironmentCollector method): Environment Collector API.
                                                              (line  15)
* code-block (directive):                Showing code examples.
                                                              (line  49)
* code; examples:                        Showing code examples.
                                                              (line   6)
* codeauthor (directive):                Meta-information markup.
                                                              (line  20)
* command (role):                        Other semantic markup.
                                                              (line  19)
* compact_paragraph (class in sphinx.addnodes): Other paragraph-level nodes.
                                                              (line   6)
* compile() (built-in function):         Python Signatures.   (line  20)
* conf (module):                         The build configuration file.
                                                              (line   6)
* confdir (in module sphinx.application): Sphinx runtime information.
                                                              (line  12)
* Config (class in sphinx.config):       The Config object.   (line   6)
* config (sphinx.environment.BuildEnvironment attribute): Build environment API.
                                                              (line  14)
* config-dir; configuration value:       Options for setuptools integration.
                                                              (line  42)
* config-inited; event:                  Sphinx core events.  (line  22)
* ConfigError:                           Exceptions.          (line  11)
* configuration directory:               Glossary<2>.         (line  15)
* connect() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  17)
* content (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  69)
* content_offset (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  78)
* copyright (built-in variable):         Global Variables.    (line  14)
* copyright; configuration value:        Project information. (line  15)
* copyright; configuration value <1>:    Options for setuptools integration.
                                                              (line 112)
* CoverageBuilder (class in sphinx.ext.coverage): sphinx ext coverage – Collect doc coverage stats.
                                                              (line   9)
* coverage_c_path; configuration value:  sphinx ext coverage – Collect doc coverage stats.
                                                              (line  25)
* coverage_c_regexes; configuration value: sphinx ext coverage – Collect doc coverage stats.
                                                              (line  27)
* coverage_ignore_classes; configuration value: sphinx ext coverage – Collect doc coverage stats.
                                                              (line  23)
* coverage_ignore_c_items; configuration value: sphinx ext coverage – Collect doc coverage stats.
                                                              (line  29)
* coverage_ignore_functions; configuration value: sphinx ext coverage – Collect doc coverage stats.
                                                              (line  21)
* coverage_ignore_modules; configuration value: sphinx ext coverage – Collect doc coverage stats.
                                                              (line  19)
* coverage_skip_undoc_in_source; configuration value: sphinx ext coverage – Collect doc coverage stats.
                                                              (line  37)
* coverage_write_headline; configuration value: sphinx ext coverage – Collect doc coverage stats.
                                                              (line  31)
* cpp;any (role):                        Cross-referencing.   (line   8)
* cpp;class (directive):                 Directives<2>.       (line   9)
* cpp;class (role):                      Cross-referencing.   (line   8)
* cpp;concept (directive):               Directives<2>.       (line 175)
* cpp;concept (role):                    Cross-referencing.   (line   8)
* cpp;enum (directive):                  Directives<2>.       (line 138)
* cpp;enum (role):                       Cross-referencing.   (line   8)
* cpp;enum-class (directive):            Directives<2>.       (line 138)
* cpp;enum-struct (directive):           Directives<2>.       (line 138)
* cpp;enumerator (directive):            Directives<2>.       (line 165)
* cpp;enumerator (role):                 Cross-referencing.   (line   8)
* cpp;expr (role):                       Inline Expressions and Tpes.
                                                              (line   6)
* cpp;func (role):                       Cross-referencing.   (line   8)
* cpp;function (directive):              Directives<2>.       (line  37)
* cpp;member (directive):                Directives<2>.       (line  76)
* cpp;member (role):                     Cross-referencing.   (line   8)
* cpp;namespace (directive):             Namespacing.         (line  14)
* cpp;namespace-pop (directive):         Namespacing.         (line  64)
* cpp;namespace-push (directive):        Namespacing.         (line  52)
* cpp;type (directive):                  Directives<2>.       (line  94)
* cpp;type (role):                       Cross-referencing.   (line   8)
* cpp;var (directive):                   Directives<2>.       (line  76)
* cpp;var (role):                        Cross-referencing.   (line   8)
* cpp_id_attributes; configuration value: Options for the C++ domain.
                                                              (line  13)
* cpp_index_common_prefix; configuration value: Options for the C++ domain.
                                                              (line   6)
* cpp_paren_attributes; configuration value: Options for the C++ domain.
                                                              (line  21)
* critical() (sphinx.util.logging.SphinxLoggerAdapter method): Logging API.
                                                              (line  17)
* cut_lines() (in module sphinx.ext.autodoc): Docstring preprocessing.
                                                              (line  78)
* dangling_warnings (sphinx.domains.Domain attribute): Domain API.
                                                              (line 137)
* data (sphinx.domains.Domain attribute): Domain API.         (line 141)
* data_version (sphinx.domains.Domain attribute): Domain API. (line 145)
* debug() (sphinx.application.Sphinx method): Producing messages / logging.
                                                              (line  45)
* debug() (sphinx.util.logging.SphinxLoggerAdapter method): Logging API.
                                                              (line  54)
* debug2() (sphinx.application.Sphinx method): Producing messages / logging.
                                                              (line  49)
* default-domain (directive):            Basic Markup.        (line  46)
* default; domain:                       General configuration.
                                                              (line 156)
* default; role:                         General configuration.
                                                              (line 168)
* default_role; configuration value:     General configuration.
                                                              (line 166)
* default_translator_class (sphinx.builders.Builder attribute): Builder API.
                                                              (line  33)
* delete_comment() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  55)
* deprecated (directive):                Paragraph-level markup.
                                                              (line  57)
* desc (class in sphinx.addnodes):       Nodes for domain-specific object descriptions.
                                                              (line   6)
* describe (directive):                  The Standard Domain. (line  75)
* desc_addname (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  33)
* desc_annotation (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  68)
* desc_content (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  73)
* desc_name (class in sphinx.addnodes):  Nodes for domain-specific object descriptions.
                                                              (line  48)
* desc_optional (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  63)
* desc_parameter (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  58)
* desc_parameterlist (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  53)
* desc_returns (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  43)
* desc_signature (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  13)
* desc_signature_line (class in sphinx.addnodes): Nodes for domain-specific object descriptions.
                                                              (line  24)
* desc_type (class in sphinx.addnodes):  Nodes for domain-specific object descriptions.
                                                              (line  38)
* DevhelpBuilder (class in sphinx.builders.devhelp): Available builders.
                                                              (line 114)
* dfn (role):                            Other semantic markup.
                                                              (line  23)
* digraph (directive):                   sphinx ext graphviz – Add Graphviz graphs.
                                                              (line  54)
* directive:                             Glossary<2>.         (line  21)
* Directive (class in docutils.parsers.rst): Directives<4>.   (line  11)
* directive() (sphinx.domains.Domain method): Domain API.     (line  40)
* directives (sphinx.domains.Domain attribute): Domain API.   (line 149)
* DirectoryHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line  27)
* disconnect() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  19)
* display_toc (built-in variable):       Global Variables.    (line 128)
* doc (role):                            Cross-referencing documents.
                                                              (line  10)
* doc2path() (sphinx.environment.BuildEnvironment method): Build environment API.
                                                              (line  59)
* docname (sphinx.environment.BuildEnvironment attribute): Build environment API.
                                                              (line  40)
* docstitle (built-in variable):         Global Variables.    (line  18)
* docstring:                             sphinx ext autodoc – Include documentation from docstrings.
                                                              (line   6)
* doctest:                               sphinx ext doctest – Test snippets in the documentation.
                                                              (line   6)
* doctest (directive):                   Directives<3>.       (line  25)
* doctest_default_flags; configuration value: Configuration<3>.
                                                              (line   8)
* doctest_global_cleanup; configuration value: Configuration<3>.
                                                              (line  39)
* doctest_global_setup; configuration value: Configuration<3>.
                                                              (line  30)
* doctest_path; configuration value:     Configuration<3>.    (line  25)
* doctest_test_doctest_blocks; configuration value: Configuration<3>.
                                                              (line  48)
* doctree-read; event:                   Sphinx core events.  (line  78)
* doctree-resolved; event:               Sphinx core events.  (line 107)
* doctreedir (in module sphinx.application): Sphinx runtime information.
                                                              (line  16)
* doctreedir (sphinx.environment.BuildEnvironment attribute): Build environment API.
                                                              (line  22)
* document name:                         Glossary<2>.         (line  35)
* docutils.parsers.rst (module):         Directives<4>.       (line   9)
* domain:                                Glossary<2>.         (line  50)
* Domain (class in sphinx.domains):      Domain API.          (line   6)
* download (role):                       Referencing downloadable files.
                                                              (line   8)
* download_reference (class in sphinx.addnodes): New inline nodes.
                                                              (line  41)
* DummyBuilder (class in sphinx.builders.dummy): Available builders.
                                                              (line 382)
* embedded (built-in variable):          Global Variables.    (line  24)
* emit() (sphinx.application.Sphinx method): Emitting events. (line   8)
* emit_firstresult() (sphinx.application.Sphinx method): Emitting events.
                                                              (line  10)
* enumerate() (built-in function):       Documenting objects. (line  22)
* env-before-read-docs; event:           Sphinx core events.  (line  51)
* env-check-consistency; event:          Sphinx core events.  (line 154)
* env-get-outdated; event:               Sphinx core events.  (line  28)
* env-merge-info; event:                 Sphinx core events.  (line 117)
* env-purge-doc; event:                  Sphinx core events.  (line  37)
* env-updated; event:                    Sphinx core events.  (line 140)
* environment:                           Glossary<2>.         (line  64)
* environment variable; SPHINX_APIDOC_OPTIONS: Environment.   (line   6)
* EnvironmentCollector (class in sphinx.environment.collectors): Environment Collector API.
                                                              (line   6)
* envvar (directive):                    The Standard Domain. (line  36)
* envvar (role):                         Cross-referencing other items of interest.
                                                              (line   9)
* Epub3Builder (class in sphinx.builders.epub3): Available builders.
                                                              (line 127)
* epub_author; configuration value:      Options for epub output.
                                                              (line  44)
* epub_basename; configuration value:    Options for epub output.
                                                              (line  11)
* epub_contributor; configuration value: Options for epub output.
                                                              (line  49)
* epub_copyright; configuration value:   Options for epub output.
                                                              (line  71)
* epub_cover; configuration value:       Options for epub output.
                                                              (line  97)
* epub_description; configuration value: Options for epub output.
                                                              (line  36)
* epub_exclude_files; configuration value: Options for epub output.
                                                              (line 149)
* epub_fix_images; configuration value:  Options for epub output.
                                                              (line 182)
* epub_guide; configuration value:       Options for epub output.
                                                              (line 114)
* epub_identifier; configuration value:  Options for epub output.
                                                              (line  76)
* epub_language; configuration value:    Options for epub output.
                                                              (line  59)
* epub_max_image_width; configuration value: Options for epub output.
                                                              (line 193)
* epub_post_files; configuration value:  Options for epub output.
                                                              (line 141)
* epub_pre_files; configuration value:   Options for epub output.
                                                              (line 128)
* epub_publisher; configuration value:   Options for epub output.
                                                              (line  65)
* epub_scheme; configuration value:      Options for epub output.
                                                              (line  83)
* epub_show_urls; configuration value:   Options for epub output.
                                                              (line 203)
* epub_theme; configuration value:       Options for epub output.
                                                              (line  16)
* epub_theme_options; configuration value: Options for epub output.
                                                              (line  23)
* epub_title; configuration value:       Options for epub output.
                                                              (line  31)
* epub_tocdepth; configuration value:    Options for epub output.
                                                              (line 155)
* epub_tocdup; configuration value:      Options for epub output.
                                                              (line 162)
* epub_tocscope; configuration value:    Options for epub output.
                                                              (line 170)
* epub_uid; configuration value:         Options for epub output.
                                                              (line  90)
* epub_use_index; configuration value:   Options for epub output.
                                                              (line 220)
* epub_writing_mode; configuration value: Options for epub output.
                                                              (line 228)
* eq (role):                             Math support in Sphinx.
                                                              (line 113)
* error() (sphinx.util.logging.SphinxLoggerAdapter method): Logging API.
                                                              (line  15)
* escape() (built-in function):          Customizing templates.
                                                              (line  93)
* exceptions (built-in variable):        Customizing templates.
                                                              (line  76)
* exclude_patterns; configuration value: General configuration.
                                                              (line  92)
* ExtensionError:                        Extension setup.     (line  91)
* ExtensionError <1>:                    Exceptions.          (line  13)
* extensions; configuration value:       General configuration.
                                                              (line   6)
* extlinks; configuration value:         sphinx ext extlinks – Markup to shorten external links.
                                                              (line  23)
* extract_context() (sphinxcontrib.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  99)
* f (C++ function):                      Inline Expressions and Tpes.
                                                              (line  22)
* favicon (built-in variable):           Global Variables.    (line  31)
* feed() (sphinxcontrib.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  27)
* figure_language_filename; configuration value: Options for internationalization.
                                                              (line 194)
* file (role):                           Other semantic markup.
                                                              (line  28)
* file_suffix (built-in variable):       Global Variables.    (line  35)
* final_argument_whitespace (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  24)
* finish() (sphinx.builders.Builder method): Builder API.     (line  95)
* finish_indexing() (sphinxcontrib.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  21)
* foo (directive):                       The reStructuredText domain.
                                                              (line  25)
* foo (role):                            The reStructuredText domain.
                                                              (line  43)
* format (sphinx.builders.applehelp.AppleHelpBuilder attribute): Available builders.
                                                              (line 107)
* format (sphinx.builders.Builder attribute): Builder API.    (line  18)
* format (sphinx.builders.changes.ChangesBuilder attribute): Available builders.
                                                              (line 378)
* format (sphinx.builders.devhelp.DevhelpBuilder attribute): Available builders.
                                                              (line 122)
* format (sphinx.builders.epub3.Epub3Builder attribute): Available builders.
                                                              (line 138)
* format (sphinx.builders.gettext.MessageCatalogBuilder attribute): Available builders.
                                                              (line 363)
* format (sphinx.builders.html.DirectoryHTMLBuilder attribute): Available builders.
                                                              (line  39)
* format (sphinx.builders.html.JSONHTMLBuilder attribute): Available builders.
                                                              (line 342)
* format (sphinx.builders.html.PickleHTMLBuilder attribute): Available builders.
                                                              (line 322)
* format (sphinx.builders.html.SingleFileHTMLBuilder attribute): Available builders.
                                                              (line  55)
* format (sphinx.builders.html.StandaloneHTMLBuilder attribute): Available builders.
                                                              (line  22)
* format (sphinx.builders.htmlhelp.HTMLHelpBuilder attribute): Available builders.
                                                              (line  70)
* format (sphinx.builders.latex.LaTeXBuilder attribute): Available builders.
                                                              (line 203)
* format (sphinx.builders.linkcheck.CheckExternalLinksBuilder attribute): Available builders.
                                                              (line 402)
* format (sphinx.builders.manpage.ManualPageBuilder attribute): Available builders.
                                                              (line 234)
* format (sphinx.builders.qthelp.QtHelpBuilder attribute): Available builders.
                                                              (line  83)
* format (sphinx.builders.texinfo.TexinfoBuilder attribute): Available builders.
                                                              (line 255)
* format (sphinx.builders.text.TextBuilder attribute): Available builders.
                                                              (line 220)
* format (sphinx.builders.xml.PseudoXMLBuilder attribute): Available builders.
                                                              (line 434)
* format (sphinx.builders.xml.XMLBuilder attribute): Available builders.
                                                              (line 417)
* found_docs (sphinx.environment.BuildEnvironment attribute): Build environment API.
                                                              (line  26)
* fresh-env; configuration value:        Options for setuptools integration.
                                                              (line   6)
* fullname (built-in variable):          Customizing templates.
                                                              (line  41)
* functions (built-in variable):         Customizing templates.
                                                              (line  65)
* generate() (sphinx.domains.Index method): Domain API.       (line 213)
* getLogger() (in module sphinx.util.logging): Logging API.   (line   6)
* gettext_additional_targets; configuration value: Options for internationalization.
                                                              (line 167)
* gettext_auto_build; configuration value: Options for internationalization.
                                                              (line 159)
* gettext_compact; configuration value:  Options for internationalization.
                                                              (line 122)
* gettext_location; configuration value: Options for internationalization.
                                                              (line 150)
* gettext_uuid; configuration value:     Options for internationalization.
                                                              (line 132)
* get_data() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  72)
* get_data() (sphinxcontrib.websupport.WebSupport method): Methods.
                                                              (line  63)
* get_document() (sphinxcontrib.websupport.WebSupport method): Methods.
                                                              (line  18)
* get_full_qualified_name() (sphinx.domains.Domain method): Domain API.
                                                              (line  46)
* get_objects() (sphinx.domains.Domain method): Domain API.   (line  50)
* get_outdated_docs() (sphinx.builders.Builder method): Builder API.
                                                              (line  70)
* get_outdated_docs() (sphinx.environment.collectors.EnvironmentCollector method): Environment Collector API.
                                                              (line  21)
* get_relative_uri() (sphinx.builders.Builder method): Builder API.
                                                              (line  38)
* get_search_results() (sphinxcontrib.websupport.WebSupport method): Methods.
                                                              (line 194)
* get_target_uri() (sphinx.builders.Builder method): Builder API.
                                                              (line  79)
* get_type_name() (sphinx.domains.Domain method): Domain API. (line  79)
* get_updated_docs() (sphinx.environment.collectors.EnvironmentCollector method): Environment Collector API.
                                                              (line  27)
* global; substitutions:                 General configuration.
                                                              (line 137)
* globalcontext_filename (sphinx.builders.html.SerializingHTMLBuilder attribute): Available builders.
                                                              (line 293)
* glossary (class in sphinx.addnodes):   Special nodes.       (line  23)
* glossary (directive):                  Glossary.            (line   6)
* graph (directive):                     sphinx ext graphviz – Add Graphviz graphs.
                                                              (line  37)
* graphviz (directive):                  sphinx ext graphviz – Add Graphviz graphs.
                                                              (line  12)
* graphviz_dot; configuration value:     sphinx ext graphviz – Add Graphviz graphs.
                                                              (line  86)
* graphviz_dot_args; configuration value: sphinx ext graphviz – Add Graphviz graphs.
                                                              (line  99)
* graphviz_output_format; configuration value: sphinx ext graphviz – Add Graphviz graphs.
                                                              (line 106)
* guilabel (role):                       Other semantic markup.
                                                              (line  38)
* handle_query() (sphinxcontrib.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  81)
* hasdoc() (built-in function):          Helper Functions.    (line  19)
* has_content (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  40)
* has_source (built-in variable):        Global Variables.    (line  41)
* highlight (directive):                 Showing code examples.
                                                              (line  36)
* highlightlang (class in sphinx.addnodes): Special nodes.    (line  15)
* highlight_language; configuration value: Project information.
                                                              (line  50)
* highlight_options; configuration value: Project information.
                                                              (line  64)
* hlist (directive):                     Paragraph-level markup.
                                                              (line 116)
* html-collect-pages; event:             Sphinx core events.  (line 161)
* html-page-context; event:              Sphinx core events.  (line 169)
* HTMLHelpBuilder (class in sphinx.builders.htmlhelp): Available builders.
                                                              (line  62)
* htmlhelp_basename; configuration value: Options for HTML help output.
                                                              (line   6)
* html_additional_pages; configuration value: Options for HTML output.
                                                              (line 214)
* html_add_permalinks; configuration value: Options for HTML output.
                                                              (line 134)
* html_compact_lists; configuration value: Options for HTML output.
                                                              (line 326)
* html_context; configuration value:     Options for HTML output.
                                                              (line  56)
* html_copy_source; configuration value: Options for HTML output.
                                                              (line 255)
* html_domain_indices; configuration value: Options for HTML output.
                                                              (line 228)
* html_experimental_html5_writer; configuration value: Options for HTML output.
                                                              (line 495)
* html_extra_path; configuration value:  Options for HTML output.
                                                              (line 101)
* html_favicon; configuration value:     Options for HTML output.
                                                              (line  75)
* html_file_suffix; configuration value: Options for HTML output.
                                                              (line 289)
* html_last_updated_fmt; configuration value: Options for HTML output.
                                                              (line 119)
* html_link_suffix; configuration value: Options for HTML output.
                                                              (line 296)
* html_logo; configuration value:        Options for HTML output.
                                                              (line  64)
* html_output_encoding; configuration value: Options for HTML output.
                                                              (line 318)
* html_scaled_image_link; configuration value: Options for HTML output.
                                                              (line 487)
* html_search_language; configuration value: Options for HTML output.
                                                              (line 342)
* html_search_options; configuration value: Options for HTML output.
                                                              (line 398)
* html_search_scorer; configuration value: Options for HTML output.
                                                              (line 479)
* html_secnumber_suffix; configuration value: Options for HTML output.
                                                              (line 335)
* html_short_title; configuration value: Options for HTML output.
                                                              (line  48)
* html_show_copyright; configuration value: Options for HTML output.
                                                              (line 304)
* html_show_sourcelink; configuration value: Options for HTML output.
                                                              (line 264)
* html_show_sphinx; configuration value: Options for HTML output.
                                                              (line 311)
* html_sidebars; configuration value:    Options for HTML output.
                                                              (line 149)
* html_sourcelink_suffix; configuration value: Options for HTML output.
                                                              (line 272)
* html_split_index; configuration value: Options for HTML output.
                                                              (line 247)
* html_static_path; configuration value: Options for HTML output.
                                                              (line  87)
* html_style; configuration value:       Options for HTML output.
                                                              (line  32)
* html_theme; configuration value:       Options for HTML output.
                                                              (line   9)
* html_theme_options; configuration value: Options for HTML output.
                                                              (line  16)
* html_theme_path; configuration value:  Options for HTML output.
                                                              (line  24)
* html_title; configuration value:       Options for HTML output.
                                                              (line  41)
* html_use_index; configuration value:   Options for HTML output.
                                                              (line 241)
* html_use_opensearch; configuration value: Options for HTML output.
                                                              (line 280)
* html_use_smartypants; configuration value: Options for HTML output.
                                                              (line 126)
* ifconfig (directive):                  sphinx ext ifconfig – Include content based on configuration.
                                                              (line   8)
* image_converter; configuration value:  Configuration<4>.    (line   6)
* image_converter_args; configuration value: Configuration<4>.
                                                              (line  11)
* imgmath_add_tooltips; configuration value: sphinx ext imgmath – Render math as images.
                                                              (line  93)
* imgmath_dvipng; configuration value:   sphinx ext imgmath – Render math as images.
                                                              (line  37)
* imgmath_dvipng_args; configuration value: sphinx ext imgmath – Render math as images.
                                                              (line  63)
* imgmath_dvisvgm; configuration value:  sphinx ext imgmath – Render math as images.
                                                              (line  44)
* imgmath_dvisvgm_args; configuration value: sphinx ext imgmath – Render math as images.
                                                              (line  71)
* imgmath_font_size; configuration value: sphinx ext imgmath – Render math as images.
                                                              (line  98)
* imgmath_image_format; configuration value: sphinx ext imgmath – Render math as images.
                                                              (line  15)
* imgmath_latex; configuration value:    sphinx ext imgmath – Render math as images.
                                                              (line  20)
* imgmath_latex_args; configuration value: sphinx ext imgmath – Render math as images.
                                                              (line  51)
* imgmath_latex_preamble; configuration value: sphinx ext imgmath – Render math as images.
                                                              (line  56)
* imgmath_use_preview; configuration value: sphinx ext imgmath – Render math as images.
                                                              (line  77)
* implementation (sphinx.builders.html.SerializingHTMLBuilder attribute): Available builders.
                                                              (line 281)
* index (class in sphinx.addnodes):      New inline nodes.    (line   6)
* Index (class in sphinx.domains):       Domain API.          (line 195)
* index (directive):                     Index-generating markup.
                                                              (line  15)
* index (role):                          Index-generating markup.
                                                              (line 100)
* indices (sphinx.domains.Domain attribute): Domain API.      (line 153)
* info() (sphinx.application.Sphinx method): Producing messages / logging.
                                                              (line  34)
* info() (sphinx.util.logging.SphinxLoggerAdapter method): Logging API.
                                                              (line  50)
* inheritance-diagram (directive):       sphinx ext inheritance_diagram – Include inheritance diagrams.
                                                              (line  13)
* inheritance_alias; configuration value: sphinx ext inheritance_diagram – Include inheritance diagrams.
                                                              (line 118)
* inheritance_edge_attrs; configuration value: sphinx ext inheritance_diagram – Include inheritance diagrams.
                                                              (line 114)
* inheritance_graph_attrs; configuration value: sphinx ext inheritance_diagram – Include inheritance diagrams.
                                                              (line  96)
* inheritance_node_attrs; configuration value: sphinx ext inheritance_diagram – Include inheritance diagrams.
                                                              (line 105)
* init() (in module sphinx.locale):      i18n API.            (line   6)
* init() (sphinx.application.TemplateBridge method): The template bridge.
                                                              (line  11)
* init() (sphinx.builders.Builder method): Builder API.       (line  65)
* initial_data (sphinx.domains.Domain attribute): Domain API. (line 157)
* init_indexing() (sphinxcontrib.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  12)
* intersphinx_cache_limit; configuration value: Configuring Intersphinx.
                                                              (line  87)
* intersphinx_mapping; configuration value: Configuring Intersphinx.
                                                              (line  10)
* intersphinx_timeout; configuration value: Configuring Intersphinx.
                                                              (line  93)
* js;attr (role):                        The JavaScript Domain.
                                                              (line 104)
* js;attribute (directive):              The JavaScript Domain.
                                                              (line  99)
* js;class (directive):                  The JavaScript Domain.
                                                              (line  74)
* js;class (role):                       The JavaScript Domain.
                                                              (line 104)
* js;data (directive):                   The JavaScript Domain.
                                                              (line  95)
* js;data (role):                        The JavaScript Domain.
                                                              (line 104)
* js;func (role):                        The JavaScript Domain.
                                                              (line 104)
* js;function (directive):               The JavaScript Domain.
                                                              (line  25)
* js;meth (role):                        The JavaScript Domain.
                                                              (line 104)
* js;method (directive):                 The JavaScript Domain.
                                                              (line  66)
* js;mod (role):                         The JavaScript Domain.
                                                              (line 104)
* js;module (directive):                 The JavaScript Domain.
                                                              (line   8)
* jsmath_path; configuration value:      sphinx ext jsmath – Render math via JavaScript.
                                                              (line   9)
* JSONHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line 330)
* kbd (role):                            Other semantic markup.
                                                              (line  52)
* keep_warnings; configuration value:    General configuration.
                                                              (line 179)
* keyword (role):                        Cross-referencing other items of interest.
                                                              (line  20)
* label (sphinx.domains.Domain attribute): Domain API.        (line 161)
* language (built-in variable):          Global Variables.    (line  46)
* language; configuration value:         Options for internationalization.
                                                              (line   9)
* last_updated (built-in variable):      Global Variables.    (line  50)
* latex (module):                        LaTeX customization. (line   6)
* LaTeXBuilder (class in sphinx.builders.latex): Available builders.
                                                              (line 148)
* latex_additional_files; configuration value: Options for LaTeX output.
                                                              (line 469)
* latex_appendices; configuration value: Options for LaTeX output.
                                                              (line 112)
* latex_docclass; configuration value:   Options for LaTeX output.
                                                              (line 456)
* latex_documents; configuration value:  Options for LaTeX output.
                                                              (line  43)
* latex_domain_indices; configuration value: Options for LaTeX output.
                                                              (line 116)
* latex_elements; configuration value:   Options for LaTeX output.
                                                              (line 168)
* latex_engine; configuration value:     Options for LaTeX output.
                                                              (line   9)
* latex_logo; configuration value:       Options for LaTeX output.
                                                              (line  91)
* latex_show_pagerefs; configuration value: Options for LaTeX output.
                                                              (line 127)
* latex_show_urls; configuration value:  Options for LaTeX output.
                                                              (line 134)
* latex_toplevel_sectioning; configuration value: Options for LaTeX output.
                                                              (line  97)
* latex_use_latex_multicolumn; configuration value: Options for LaTeX output.
                                                              (line 152)
* lineno (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  73)
* link-index; configuration value:       Options for setuptools integration.
                                                              (line 101)
* linkcheck_anchors; configuration value: Options for the linkcheck builder.
                                                              (line  36)
* linkcheck_anchors_ignore; configuration value: Options for the linkcheck builder.
                                                              (line  44)
* linkcheck_ignore; configuration value: Options for the linkcheck builder.
                                                              (line   6)
* linkcheck_retries; configuration value: Options for the linkcheck builder.
                                                              (line  15)
* linkcheck_timeout; configuration value: Options for the linkcheck builder.
                                                              (line  22)
* linkcheck_workers; configuration value: Options for the linkcheck builder.
                                                              (line  29)
* linkcode_resolve; configuration value: sphinx ext linkcode – Add external links to source code.
                                                              (line  18)
* literalinclude (directive):            Includes.            (line   6)
* literal_emphasis (class in sphinx.addnodes): New inline nodes.
                                                              (line  30)
* locale_dirs; configuration value:      Options for internationalization.
                                                              (line 103)
* log() (sphinx.util.logging.SphinxLoggerAdapter method): Logging API.
                                                              (line  48)
* logo (built-in variable):              Global Variables.    (line  54)
* mailheader (role):                     Other semantic markup.
                                                              (line  63)
* makevar (role):                        Other semantic markup.
                                                              (line  74)
* manpage (role):                        Other semantic markup.
                                                              (line  78)
* manpages_url; configuration value:     General configuration.
                                                              (line 270)
* ManualPageBuilder (class in sphinx.builders.manpage): Available builders.
                                                              (line 226)
* man_pages; configuration value:        Options for manual page output.
                                                              (line   8)
* man_show_urls; configuration value:    Options for manual page output.
                                                              (line  36)
* master document:                       Glossary<2>.         (line  71)
* master_doc (built-in variable):        Global Variables.    (line  58)
* master_doc; configuration value:       General configuration.
                                                              (line  86)
* math (directive):                      Math support in Sphinx.
                                                              (line  62)
* math (role):                           Math support in Sphinx.
                                                              (line  56)
* mathjax_path; configuration value:     sphinx ext mathjax – Render math via JavaScript.
                                                              (line  15)
* math_eqref_format; configuration value: Math support in Sphinx.
                                                              (line  36)
* math_number_all; configuration value:  Math support in Sphinx.
                                                              (line  31)
* math_numfig; configuration value:      Math support in Sphinx.
                                                              (line  44)
* members (built-in variable):           Customizing templates.
                                                              (line  60)
* menuselection (role):                  Other semantic markup.
                                                              (line  84)
* merge_domaindata() (sphinx.domains.Domain method): Domain API.
                                                              (line  83)
* merge_other() (sphinx.environment.collectors.EnvironmentCollector method): Environment Collector API.
                                                              (line  34)
* MessageCatalogBuilder (class in sphinx.builders.gettext): Available builders.
                                                              (line 352)
* meta (built-in variable):              Global Variables.    (line 132)
* meta (class in sphinx.addnodes):       Special nodes.       (line  10)
* metadata (sphinx.environment.BuildEnvironment attribute): Build environment API.
                                                              (line  30)
* metatags (built-in variable):          Global Variables.    (line 137)
* methods (built-in variable):           Customizing templates.
                                                              (line  81)
* mimetype (role):                       Other semantic markup.
                                                              (line 105)
* missing-reference; event:              Sphinx core events.  (line  84)
* modindex_common_prefix; configuration value: Project information.
                                                              (line 101)
* module (built-in variable):            Customizing templates.
                                                              (line  46)
* MyAnimal() (class):                    The JavaScript Domain.
                                                              (line  86)
* MyContainer (C++ type):                Directives<2>.       (line 135)
* MyContainer;;const_iterator (C++ type): Directives<2>.      (line 127)
* MyList (C++ type):                     Directives<2>.       (line 123)
* MySortedContainer (C++ class):         Template Introductions.
                                                              (line  24)
* MyType (C++ type):                     Directives<2>.       (line 131)
* name (built-in variable):              Customizing templates.
                                                              (line  32)
* name (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  55)
* name (sphinx.builders.applehelp.AppleHelpBuilder attribute): Available builders.
                                                              (line 105)
* name (sphinx.builders.Builder attribute): Builder API.      (line  14)
* name (sphinx.builders.changes.ChangesBuilder attribute): Available builders.
                                                              (line 376)
* name (sphinx.builders.devhelp.DevhelpBuilder attribute): Available builders.
                                                              (line 120)
* name (sphinx.builders.dummy.DummyBuilder attribute): Available builders.
                                                              (line 387)
* name (sphinx.builders.epub3.Epub3Builder attribute): Available builders.
                                                              (line 136)
* name (sphinx.builders.gettext.MessageCatalogBuilder attribute): Available builders.
                                                              (line 361)
* name (sphinx.builders.html.DirectoryHTMLBuilder attribute): Available builders.
                                                              (line  37)
* name (sphinx.builders.html.JSONHTMLBuilder attribute): Available builders.
                                                              (line 340)
* name (sphinx.builders.html.PickleHTMLBuilder attribute): Available builders.
                                                              (line 318)
* name (sphinx.builders.html.SingleFileHTMLBuilder attribute): Available builders.
                                                              (line  53)
* name (sphinx.builders.html.StandaloneHTMLBuilder attribute): Available builders.
                                                              (line  20)
* name (sphinx.builders.htmlhelp.HTMLHelpBuilder attribute): Available builders.
                                                              (line  68)
* name (sphinx.builders.latex.LaTeXBuilder attribute): Available builders.
                                                              (line 201)
* name (sphinx.builders.linkcheck.CheckExternalLinksBuilder attribute): Available builders.
                                                              (line 400)
* name (sphinx.builders.manpage.ManualPageBuilder attribute): Available builders.
                                                              (line 232)
* name (sphinx.builders.qthelp.QtHelpBuilder attribute): Available builders.
                                                              (line  81)
* name (sphinx.builders.texinfo.TexinfoBuilder attribute): Available builders.
                                                              (line 253)
* name (sphinx.builders.text.TextBuilder attribute): Available builders.
                                                              (line 218)
* name (sphinx.builders.xml.PseudoXMLBuilder attribute): Available builders.
                                                              (line 432)
* name (sphinx.builders.xml.XMLBuilder attribute): Available builders.
                                                              (line 415)
* name (sphinx.domains.Domain attribute): Domain API.         (line 165)
* napoleon_google_docstring; configuration value: Configuration<5>.
                                                              (line  28)
* napoleon_include_init_with_doc; configuration value: Configuration<5>.
                                                              (line  38)
* napoleon_include_private_with_doc; configuration value: Configuration<5>.
                                                              (line  55)
* napoleon_include_special_with_doc; configuration value: Configuration<5>.
                                                              (line  73)
* napoleon_numpy_docstring; configuration value: Configuration<5>.
                                                              (line  33)
* napoleon_use_admonition_for_examples; configuration value: Configuration<5>.
                                                              (line  91)
* napoleon_use_admonition_for_notes; configuration value: Configuration<5>.
                                                              (line 116)
* napoleon_use_admonition_for_references; configuration value: Configuration<5>.
                                                              (line 130)
* napoleon_use_ivar; configuration value: Configuration<5>.   (line 141)
* napoleon_use_keyword; configuration value: Configuration<5>.
                                                              (line 195)
* napoleon_use_param; configuration value: Configuration<5>.  (line 166)
* napoleon_use_rtype; configuration value: Configuration<5>.  (line 212)
* needs_extensions; configuration value: General configuration.
                                                              (line 256)
* needs_sphinx; configuration value:     General configuration.
                                                              (line 246)
* newest_template_mtime() (sphinx.application.TemplateBridge method): The template bridge.
                                                              (line  22)
* newsgroup (role):                      Other semantic markup.
                                                              (line 110)
* new_serialno() (sphinx.environment.BuildEnvironment method): Build environment API.
                                                              (line  87)
* next (built-in variable):              Global Variables.    (line 141)
* nitpicky; configuration value:         General configuration.
                                                              (line 292)
* nitpick_ignore; configuration value:   General configuration.
                                                              (line 300)
* note:                                  Paragraph-level markup.
                                                              (line   6)
* note (directive):                      Paragraph-level markup.
                                                              (line   9)
* note_dependency() (sphinx.environment.BuildEnvironment method): Build environment API.
                                                              (line  77)
* note_reread() (sphinx.environment.BuildEnvironment method): Build environment API.
                                                              (line  93)
* numfig; configuration value:           General configuration.
                                                              (line 309)
* numfig_format; configuration value:    General configuration.
                                                              (line 320)
* numfig_secnum_depth; configuration value: General configuration.
                                                              (line 332)
* numref (role):                         Cross-referencing figures by figure number.
                                                              (line  11)
* object:                                Glossary<2>.         (line  75)
* object (directive):                    The Standard Domain. (line  75)
* object_types (sphinx.domains.Domain attribute): Domain API. (line 169)
* objname (built-in variable):           Customizing templates.
                                                              (line  37)
* ObjType (class in sphinx.domains):     Domain API.          (line 177)
* only (class in sphinx.addnodes):       Special nodes.       (line   6)
* only (directive):                      Including content based on tags.
                                                              (line   6)
* option (directive):                    The Standard Domain. (line  15)
* option (role):                         Cross-referencing other items of interest.
                                                              (line  25)
* optional_arguments (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  20)
* options (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  64)
* option_spec (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  28)
* outdir (in module sphinx.application): Sphinx runtime information.
                                                              (line  20)
* Outer (C++ class):                     Full Template Specialisations.
                                                              (line   8)
* Outer;;Inner (C++ class):              Full Template Specialisations.
                                                              (line  10)
* Outer<int> (C++ class):                Full Template Specialisations.
                                                              (line  12)
* Outer<int>;;Inner (C++ class):         Full Template Specialisations.
                                                              (line  14)
* Outer<int>;;Inner<bool> (C++ class):   Full Template Specialisations.
                                                              (line  16)
* Outer<T *> (C++ class):                Partial Template Specialisations.
                                                              (line   8)
* out_suffix (sphinx.builders.html.SerializingHTMLBuilder attribute): Available builders.
                                                              (line 289)
* override_domain() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  45)
* pagename (built-in variable):          Global Variables.    (line  63)
* page_source_suffix (built-in variable): Global Variables.   (line 152)
* parents (built-in variable):           Global Variables.    (line 158)
* Parser (class in sphinx.parsers):      Parser API.          (line  33)
* pathto() (built-in function):          Helper Functions.    (line   9)
* pathto() (built-in function) <1>:      Helper Functions.    (line  14)
* pdb; configuration value:              Options for setuptools integration.
                                                              (line 118)
* pending_logging() (in module sphinx.util.logging): Logging API.
                                                              (line  73)
* pending_warnings() (in module sphinx.util.logging): Logging API.
                                                              (line  77)
* pending_xref (class in sphinx.addnodes): New inline nodes.  (line  21)
* pep (role):                            Other semantic markup.
                                                              (line 138)
* PickleHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line 308)
* post_build() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  24)
* prepare_writing() (sphinx.builders.Builder method): Builder API.
                                                              (line  86)
* prev (built-in variable):              Global Variables.    (line 163)
* pre_build() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line   6)
* primary; domain:                       General configuration.
                                                              (line 156)
* primary_domain; configuration value:   General configuration.
                                                              (line 154)
* process_doc() (sphinx.domains.Domain method): Domain API.   (line  88)
* process_doc() (sphinx.environment.collectors.EnvironmentCollector method): Environment Collector API.
                                                              (line  40)
* process_field_xref() (sphinx.domains.Domain method): Domain API.
                                                              (line  92)
* process_vote() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  87)
* process_vote() (sphinxcontrib.websupport.WebSupport method): Methods.
                                                              (line 165)
* production (class in sphinx.addnodes): Special nodes.       (line  45)
* productionlist (class in sphinx.addnodes): Special nodes.   (line  38)
* productionlist (directive):            Grammar production displays.
                                                              (line  13)
* program (directive):                   The Standard Domain. (line  41)
* program (role):                        Other semantic markup.
                                                              (line 114)
* project (built-in variable):           Global Variables.    (line  70)
* project; configuration value:          Project information. (line   6)
* project; configuration value <1>:      Options for setuptools integration.
                                                              (line  76)
* PseudoXMLBuilder (class in sphinx.builders.xml): Available builders.
                                                              (line 423)
* py;attr (role):                        Cross-referencing Python objects.
                                                              (line  42)
* py;attribute (directive):              The Python Domain.   (line 100)
* py;class (directive):                  The Python Domain.   (line  75)
* py;class (role):                       Cross-referencing Python objects.
                                                              (line  31)
* py;classmethod (directive):            The Python Domain.   (line 120)
* py;const (role):                       Cross-referencing Python objects.
                                                              (line  26)
* py;currentmodule (directive):          The Python Domain.   (line  33)
* py;data (directive):                   The Python Domain.   (line  64)
* py;data (role):                        Cross-referencing Python objects.
                                                              (line  22)
* py;decorator (directive):              The Python Domain.   (line 127)
* py;decoratormethod (directive):        The Python Domain.   (line 159)
* py;exc (role):                         Cross-referencing Python objects.
                                                              (line  46)
* py;exception (directive):              The Python Domain.   (line  70)
* py;func (role):                        Cross-referencing Python objects.
                                                              (line  14)
* py;function (directive):               The Python Domain.   (line  46)
* py;meth (role):                        Cross-referencing Python objects.
                                                              (line  35)
* py;method (directive):                 The Python Domain.   (line 106)
* py;mod (role):                         Cross-referencing Python objects.
                                                              (line   9)
* py;module (directive):                 The Python Domain.   (line   9)
* py;obj (role):                         Cross-referencing Python objects.
                                                              (line  50)
* py;staticmethod (directive):           The Python Domain.   (line 113)
* pygments_style; configuration value:   Project information. (line  73)
* Python Enhancement Proposals; PEP 420: Options<3>.          (line  61)
* QtHelpBuilder (class in sphinx.builders.qthelp): Available builders.
                                                              (line  75)
* qthelp_basename; configuration value:  Options for QtHelp output.
                                                              (line   9)
* qthelp_namespace; configuration value: Options for QtHelp output.
                                                              (line  14)
* qthelp_theme; configuration value:     Options for QtHelp output.
                                                              (line  19)
* qthelp_theme_options; configuration value: Options for QtHelp output.
                                                              (line  23)
* query() (sphinxcontrib.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  69)
* ref (role):                            Cross-referencing arbitrary locations.
                                                              (line   6)
* regexp (role):                         Other semantic markup.
                                                              (line 120)
* relbar() (built-in function):          Helper Functions.    (line  27)
* reldelim1 (built-in variable):         Configuration Variables<2>.
                                                              (line   9)
* reldelim2 (built-in variable):         Configuration Variables<2>.
                                                              (line  15)
* release (built-in variable):           Global Variables.    (line  74)
* release; configuration value:          Project information. (line  25)
* release; configuration value <1>:      Options for setuptools integration.
                                                              (line  88)
* relfn2path() (sphinx.environment.BuildEnvironment method): Build environment API.
                                                              (line  68)
* rellinks (built-in variable):          Global Variables.    (line  78)
* RemoveInSphinxXXXWarning:              Glossary<2>.         (line  81)
* render() (sphinx.application.TemplateBridge method): The template bridge.
                                                              (line  29)
* render_string() (sphinx.application.TemplateBridge method): The template bridge.
                                                              (line  34)
* required_arguments (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  16)
* require_sphinx() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  15)
* resolve_any_xref() (sphinx.domains.Domain method): Domain API.
                                                              (line  97)
* resolve_xref() (sphinx.domains.Domain method): Domain API.  (line 114)
* reStructuredText:                      Glossary<2>.         (line  99)
* rfc (role):                            Other semantic markup.
                                                              (line 146)
* role:                                  Glossary<2>.         (line  87)
* role() (sphinx.domains.Domain method): Domain API.          (line 131)
* roles (sphinx.domains.Domain attribute): Domain API.        (line 173)
* rst;dir (role):                        The reStructuredText domain.
                                                              (line  48)
* rst;directive (directive):             The reStructuredText domain.
                                                              (line   9)
* rst;role (directive):                  The reStructuredText domain.
                                                              (line  33)
* rst;role (role):                       The reStructuredText domain.
                                                              (line  48)
* rst_epilog; configuration value:       General configuration.
                                                              (line 135)
* rst_prolog; configuration value:       General configuration.
                                                              (line 147)
* rubric (directive):                    Paragraph-level markup.
                                                              (line  95)
* run() (docutils.parsers.rst.Directive method): Directives<4>.
                                                              (line  46)
* samp (role):                           Other semantic markup.
                                                              (line 124)
* script_files (built-in variable):      Configuration Variables<2>.
                                                              (line  26)
* searchindex_filename (sphinx.builders.html.SerializingHTMLBuilder attribute): Available builders.
                                                              (line 299)
* sectionauthor (directive):             Meta-information markup.
                                                              (line   6)
* seealso (class in sphinx.addnodes):    New admonition-like constructs.
                                                              (line  14)
* seealso (directive):                   Paragraph-level markup.
                                                              (line  68)
* SerializingHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line 262)
* setup_extension() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  11)
* set_translator() (sphinx.application.Sphinx method): Extension setup.
                                                              (line  27)
* shorttitle (built-in variable):        Global Variables.    (line  86)
* show_authors; configuration value:     Project information. (line  95)
* show_source (built-in variable):       Global Variables.    (line  90)
* sidebar() (built-in function):         Helper Functions.    (line  23)
* SingleFileHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line  46)
* smartquotes; configuration value:      General configuration.
                                                              (line 355)
* smartquotes_action; configuration value: General configuration.
                                                              (line 372)
* smartquotes_excludes; configuration value: General configuration.
                                                              (line 382)
* source directory:                      Glossary<2>.         (line  94)
* source-dir; configuration value:       Options for setuptools integration.
                                                              (line  24)
* source-read; event:                    Sphinx core events.  (line  65)
* sourcecode:                            Showing code examples.
                                                              (line   6)
* sourcename (built-in variable):        Global Variables.    (line 167)
* source_encoding; configuration value:  General configuration.
                                                              (line  56)
* source_parsers; configuration value:   General configuration.
                                                              (line  64)
* source_suffix; configuration value:    General configuration.
                                                              (line  29)
* Sphinx (class in sphinx.application):  Application API.     (line  10)
* Sphinx (class in sphinx.application) <1>: Emitting events.  (line   6)
* sphinx-apidoc command line option; -a: Options<3>.          (line  74)
* sphinx-apidoc command line option; -A <author>: Options<3>. (line  83)
* sphinx-apidoc command line option; -d <MAXDEPTH>: Options<3>.
                                                              (line  27)
* sphinx-apidoc command line option; -E, –no-headings: Options<3>.
                                                              (line  47)
* sphinx-apidoc command line option; -e, –separate: Options<3>.
                                                              (line  41)
* sphinx-apidoc command line option; -f, –force: Options<3>.  (line  11)
* sphinx-apidoc command line option; -F, –full: Options<3>.   (line  36)
* sphinx-apidoc command line option; -H <project>: Options<3>.
                                                              (line  78)
* sphinx-apidoc command line option; –implicit-namespaces: Options<3>.
                                                              (line  58)
* sphinx-apidoc command line option; -l, –follow-links: Options<3>.
                                                              (line  15)
* sphinx-apidoc command line option; -M, –module-first: Options<3>.
                                                              (line  68)
* sphinx-apidoc command line option; -n, –dry-run: Options<3>.
                                                              (line  19)
* sphinx-apidoc command line option; -o <OUTPUT_PATH>: Options<3>.
                                                              (line   6)
* sphinx-apidoc command line option; -P, –private: Options<3>.
                                                              (line  52)
* sphinx-apidoc command line option; -R <release>: Options<3>.
                                                              (line  93)
* sphinx-apidoc command line option; -s <suffix>: Options<3>. (line  23)
* sphinx-apidoc command line option; -T, –no-toc: Options<3>. (line  31)
* sphinx-apidoc command line option; -V <version>: Options<3>.
                                                              (line  88)
* sphinx-autogen command line option; -i, –imported-members: Options<4>.
                                                              (line  19)
* sphinx-autogen command line option; -o <outputdir>: Options<4>.
                                                              (line   6)
* sphinx-autogen command line option; -s <suffix>, –suffix <suffix>: Options<4>.
                                                              (line  11)
* sphinx-autogen command line option; -t <templates>, –templates <templates>: Options<4>.
                                                              (line  15)
* sphinx-build command line option; -a:  Options<2>.          (line 101)
* sphinx-build command line option; -A name=value: Options<2>.
                                                              (line 176)
* sphinx-build command line option; -b buildername: Options<2>.
                                                              (line   6)
* sphinx-build command line option; -C:  Options<2>.          (line 152)
* sphinx-build command line option; -c path: Options<2>.      (line 142)
* sphinx-build command line option; -d path: Options<2>.      (line 121)
* sphinx-build command line option; -D setting=value: Options<2>.
                                                              (line 159)
* sphinx-build command line option; -E:  Options<2>.          (line 107)
* sphinx-build command line option; -h, –help, –version: Options<2>.
                                                              (line 233)
* sphinx-build command line option; -j N: Options<2>.         (line 130)
* sphinx-build command line option; -M buildername: Options<2>.
                                                              (line  78)
* sphinx-build command line option; -n:  Options<2>.          (line 182)
* sphinx-build command line option; -N:  Options<2>.          (line 188)
* sphinx-build command line option; -P:  Options<2>.          (line 228)
* sphinx-build command line option; -q:  Options<2>.          (line 200)
* sphinx-build command line option; -Q:  Options<2>.          (line 205)
* sphinx-build command line option; -T:  Options<2>.          (line 220)
* sphinx-build command line option; -t tag: Options<2>.       (line 114)
* sphinx-build command line option; -v:  Options<2>.          (line 192)
* sphinx-build command line option; -W:  Options<2>.          (line 215)
* sphinx-build command line option; -w file: Options<2>.      (line 210)
* sphinx-quickstart command line option; -a AUTHOR, –author=AUTHOR: Options.
                                                              (line  36)
* sphinx-quickstart command line option; –batchfile, –no-batchfile: Options.
                                                              (line 126)
* sphinx-quickstart command line option; -d NAME=VALUE: Options.
                                                              (line 156)
* sphinx-quickstart command line option; –dot=DOT: Options.   (line  22)
* sphinx-quickstart command line option; –epub: Options.      (line  60)
* sphinx-quickstart command line option; –ext-autodoc: Options.
                                                              (line  67)
* sphinx-quickstart command line option; –ext-coverage: Options.
                                                              (line  83)
* sphinx-quickstart command line option; –ext-doctest: Options.
                                                              (line  71)
* sphinx-quickstart command line option; –ext-githubpages: Options.
                                                              (line 103)
* sphinx-quickstart command line option; –ext-ifconfig: Options.
                                                              (line  95)
* sphinx-quickstart command line option; –ext-imgmath: Options.
                                                              (line  87)
* sphinx-quickstart command line option; –ext-intersphinx: Options.
                                                              (line  75)
* sphinx-quickstart command line option; –ext-mathjax: Options.
                                                              (line  91)
* sphinx-quickstart command line option; –ext-todo: Options.  (line  79)
* sphinx-quickstart command line option; –ext-viewcode: Options.
                                                              (line  99)
* sphinx-quickstart command line option; –extensions=EXTENSIONS: Options.
                                                              (line 107)
* sphinx-quickstart command line option; -h, –help, –version: Options.
                                                              (line  11)
* sphinx-quickstart command line option; -l LANGUAGE, –language=LANGUAGE: Options.
                                                              (line  48)
* sphinx-quickstart command line option; –makefile, –no-makefile: Options.
                                                              (line 122)
* sphinx-quickstart command line option; –master=MASTER: Options.
                                                              (line  56)
* sphinx-quickstart command line option; -p PROJECT, –project=PROJECT: Options.
                                                              (line  32)
* sphinx-quickstart command line option; -q, –quiet: Options. (line   6)
* sphinx-quickstart command line option; -r RELEASE, –release=RELEASE: Options.
                                                              (line  44)
* sphinx-quickstart command line option; –sep: Options.       (line  18)
* sphinx-quickstart command line option; –suffix=SUFFIX: Options.
                                                              (line  52)
* sphinx-quickstart command line option; -t, –templatedir=TEMPLATEDIR: Options.
                                                              (line 135)
* sphinx-quickstart command line option; –use-make-mode (-m), –no-use-make-mode (-M): Options.
                                                              (line 114)
* sphinx-quickstart command line option; -v VERSION: Options. (line  40)
* sphinx.addnodes (module):              Doctree node classes added by Sphinx.
                                                              (line   6)
* sphinx.application (module):           Application API.     (line   6)
* sphinx.builders (module):              Available builders.  (line   6)
* sphinx.builders.applehelp (module):    Available builders.  (line  87)
* sphinx.builders.changes (module):      Available builders.  (line 369)
* sphinx.builders.devhelp (module):      Available builders.  (line 114)
* sphinx.builders.dummy (module):        Available builders.  (line 381)
* sphinx.builders.epub3 (module):        Available builders.  (line 126)
* sphinx.builders.gettext (module):      Available builders.  (line 352)
* sphinx.builders.html (module):         Available builders.  (line  10)
* sphinx.builders.htmlhelp (module):     Available builders.  (line  62)
* sphinx.builders.latex (module):        Available builders.  (line 148)
* sphinx.builders.linkcheck (module):    Available builders.  (line 393)
* sphinx.builders.manpage (module):      Available builders.  (line 226)
* sphinx.builders.qthelp (module):       Available builders.  (line  74)
* sphinx.builders.texinfo (module):      Available builders.  (line 240)
* sphinx.builders.text (module):         Available builders.  (line 210)
* sphinx.builders.xml (module):          Available builders.  (line 409)
* sphinx.domains (module):               Domain API.          (line   6)
* sphinx.environment (module):           Build environment API.
                                                              (line   6)
* sphinx.environment.collectors (module): Environment Collector API.
                                                              (line   6)
* sphinx.errors (module):                Exceptions.          (line   6)
* sphinx.ext.autodoc (module):           sphinx ext autodoc – Include documentation from docstrings.
                                                              (line   6)
* sphinx.ext.autosectionlabel (module):  sphinx ext autosectionlabel – Allow reference sections using its title.
                                                              (line   6)
* sphinx.ext.autosummary (module):       sphinx ext autosummary – Generate autodoc summaries.
                                                              (line   6)
* sphinx.ext.coverage (module):          sphinx ext coverage – Collect doc coverage stats.
                                                              (line   6)
* sphinx.ext.doctest (module):           sphinx ext doctest – Test snippets in the documentation.
                                                              (line   6)
* sphinx.ext.extlinks (module):          sphinx ext extlinks – Markup to shorten external links.
                                                              (line   6)
* sphinx.ext.githubpages (module):       sphinx ext githubpages – Publish HTML docs in GitHub Pages.
                                                              (line   6)
* sphinx.ext.graphviz (module):          sphinx ext graphviz – Add Graphviz graphs.
                                                              (line   6)
* sphinx.ext.ifconfig (module):          sphinx ext ifconfig – Include content based on configuration.
                                                              (line   6)
* sphinx.ext.imgconverter (module):      sphinx ext imgconverter – Convert images to appropriate format for builders.
                                                              (line   6)
* sphinx.ext.imgmath (module):           sphinx ext imgmath – Render math as images.
                                                              (line   6)
* sphinx.ext.inheritance_diagram (module): sphinx ext inheritance_diagram – Include inheritance diagrams.
                                                              (line   6)
* sphinx.ext.intersphinx (module):       sphinx ext intersphinx – Link to other projects’ documentation.
                                                              (line   6)
* sphinx.ext.jsmath (module):            sphinx ext jsmath – Render math via JavaScript.
                                                              (line   6)
* sphinx.ext.linkcode (module):          sphinx ext linkcode – Add external links to source code.
                                                              (line   6)
* sphinx.ext.mathbase (module):          Math support in Sphinx.
                                                              (line   6)
* sphinx.ext.mathjax (module):           sphinx ext mathjax – Render math via JavaScript.
                                                              (line   6)
* sphinx.ext.napoleon (module):          sphinx ext napoleon – Support for NumPy and Google style docstrings.
                                                              (line   6)
* sphinx.ext.todo (module):              sphinx ext todo – Support for todo items.
                                                              (line   6)
* sphinx.ext.viewcode (module):          sphinx ext viewcode – Add links to highlighted source code.
                                                              (line   6)
* sphinx.parsers (module):               Parser API.          (line  31)
* SphinxError:                           Exceptions.          (line   6)
* SphinxLoggerAdapter (class in sphinx.util.logging): Logging API.
                                                              (line  10)
* sphinx_version (built-in variable):    Global Variables.    (line  94)
* srcdir (in module sphinx.application): Sphinx runtime information.
                                                              (line   8)
* srcdir (sphinx.environment.BuildEnvironment attribute): Build environment API.
                                                              (line  18)
* StandaloneHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line  12)
* start_of_file (class in sphinx.addnodes): Special nodes.    (line  33)
* state (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  87)
* state_machine (docutils.parsers.rst.Directive attribute): Directives<4>.
                                                              (line  87)
* std;;Iterator (C++ concept):           Directives<2>.       (line 203)
* std;;Iterator;;r (C++ member):         Directives<2>.       (line 210)
* StorageBackend (class in sphinxcontrib.websupport.storage): Storage Backends.
                                                              (line  18)
* style (built-in variable):             Global Variables.    (line  98)
* supported_data_uri_images (sphinx.builders.Builder attribute): Builder API.
                                                              (line  31)
* supported_image_types (sphinx.builders.applehelp.AppleHelpBuilder attribute): Available builders.
                                                              (line 109)
* supported_image_types (sphinx.builders.Builder attribute): Builder API.
                                                              (line  23)
* supported_image_types (sphinx.builders.changes.ChangesBuilder attribute): Available builders.
                                                              (line 380)
* supported_image_types (sphinx.builders.devhelp.DevhelpBuilder attribute): Available builders.
                                                              (line 124)
* supported_image_types (sphinx.builders.dummy.DummyBuilder attribute): Available builders.
                                                              (line 389)
* supported_image_types (sphinx.builders.epub3.Epub3Builder attribute): Available builders.
                                                              (line 140)
* supported_image_types (sphinx.builders.gettext.MessageCatalogBuilder attribute): Available builders.
                                                              (line 365)
* supported_image_types (sphinx.builders.html.DirectoryHTMLBuilder attribute): Available builders.
                                                              (line  41)
* supported_image_types (sphinx.builders.html.JSONHTMLBuilder attribute): Available builders.
                                                              (line 344)
* supported_image_types (sphinx.builders.html.PickleHTMLBuilder attribute): Available builders.
                                                              (line 324)
* supported_image_types (sphinx.builders.html.SingleFileHTMLBuilder attribute): Available builders.
                                                              (line  57)
* supported_image_types (sphinx.builders.html.StandaloneHTMLBuilder attribute): Available builders.
                                                              (line  24)
* supported_image_types (sphinx.builders.htmlhelp.HTMLHelpBuilder attribute): Available builders.
                                                              (line  72)
* supported_image_types (sphinx.builders.latex.LaTeXBuilder attribute): Available builders.
                                                              (line 205)
* supported_image_types (sphinx.builders.linkcheck.CheckExternalLinksBuilder attribute): Available builders.
                                                              (line 404)
* supported_image_types (sphinx.builders.manpage.ManualPageBuilder attribute): Available builders.
                                                              (line 236)
* supported_image_types (sphinx.builders.qthelp.QtHelpBuilder attribute): Available builders.
                                                              (line  85)
* supported_image_types (sphinx.builders.texinfo.TexinfoBuilder attribute): Available builders.
                                                              (line 257)
* supported_image_types (sphinx.builders.text.TextBuilder attribute): Available builders.
                                                              (line 222)
* supported_image_types (sphinx.builders.xml.PseudoXMLBuilder attribute): Available builders.
                                                              (line 436)
* supported_image_types (sphinx.builders.xml.XMLBuilder attribute): Available builders.
                                                              (line 419)
* supported_remote_images (sphinx.builders.Builder attribute): Builder API.
                                                              (line  29)
* suppress_warnings; configuration value: General configuration.
                                                              (line 190)
* table of; contents:                    The TOC tree.        (line   6)
* tabularcolumns (directive):            Tables<2>.           (line  23)
* TemplateBridge (class in sphinx.application): The template bridge.
                                                              (line   6)
* templates_path; configuration value:   General configuration.
                                                              (line 117)
* template_bridge; configuration value:  General configuration.
                                                              (line 126)
* term (role):                           Cross-referencing other items of interest.
                                                              (line  33)
* testcleanup (directive):               Directives<3>.       (line  17)
* testcode (directive):                  Directives<3>.       (line  86)
* testing; snippets:                     sphinx ext doctest – Test snippets in the documentation.
                                                              (line   6)
* testoutput (directive):                Directives<3>.       (line 113)
* testsetup (directive):                 Directives<3>.       (line  11)
* TexinfoBuilder (class in sphinx.builders.texinfo): Available builders.
                                                              (line 240)
* texinfo_appendices; configuration value: Options for Texinfo output.
                                                              (line  49)
* texinfo_documents; configuration value: Options for Texinfo output.
                                                              (line   8)
* texinfo_domain_indices; configuration value: Options for Texinfo output.
                                                              (line  55)
* texinfo_elements; configuration value: Options for Texinfo output.
                                                              (line  86)
* texinfo_no_detailmenu; configuration value: Options for Texinfo output.
                                                              (line  78)
* texinfo_show_urls; configuration value: Options for Texinfo output.
                                                              (line  66)
* TextBuilder (class in sphinx.builders.text): Available builders.
                                                              (line 212)
* text_add_secnumbers; configuration value: Options for text output.
                                                              (line  33)
* text_newlines; configuration value:    Options for text output.
                                                              (line   8)
* text_secnumber_suffix; configuration value: Options for text output.
                                                              (line  40)
* text_sectionchars; configuration value: Options for text output.
                                                              (line  23)
* ThemeError:                            Exceptions.          (line  17)
* title (built-in variable):             Global Variables.    (line 103)
* title (built-in variable) <1>:         Global Variables.    (line 174)
* titles (sphinx.environment.BuildEnvironment attribute): Build environment API.
                                                              (line  35)
* tls_cacerts; configuration value:      General configuration.
                                                              (line 411)
* tls_verify; configuration value:       General configuration.
                                                              (line 405)
* toc (built-in variable):               Global Variables.    (line 178)
* toctree (built-in variable):           Global Variables.    (line 183)
* toctree (class in sphinx.addnodes):    Special nodes.       (line  28)
* toctree (directive):                   The TOC tree.        (line  15)
* today; configuration value:            Project information. (line  34)
* today; configuration value <1>:        Options for setuptools integration.
                                                              (line  94)
* today_fmt; configuration value:        Project information. (line  34)
* todo (directive):                      sphinx ext todo – Support for todo items.
                                                              (line  12)
* todo-defined; event:                   sphinx ext todo – Support for todo items.
                                                              (line  51)
* todolist (directive):                  sphinx ext todo – Support for todo items.
                                                              (line  23)
* todo_emit_warnings; configuration value: sphinx ext todo – Support for todo items.
                                                              (line  35)
* todo_include_todos; configuration value: sphinx ext todo – Support for todo items.
                                                              (line  30)
* todo_link_only; configuration value:   sphinx ext todo – Support for todo items.
                                                              (line  42)
* token (role):                          Cross-referencing other items of interest.
                                                              (line  15)
* trim_doctest_flags; configuration value: Project information.
                                                              (line 119)
* trim_footnote_reference_space; configuration value: Project information.
                                                              (line 111)
* underline (built-in variable):         Customizing templates.
                                                              (line  55)
* underline() (built-in function):       Customizing templates.
                                                              (line 100)
* update_username() (sphinxcontrib.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line 101)
* use_opensearch (built-in variable):    Global Variables.    (line 107)
* verbose() (sphinx.application.Sphinx method): Producing messages / logging.
                                                              (line  41)
* verbose() (sphinx.util.logging.SphinxLoggerAdapter method): Logging API.
                                                              (line  52)
* version (built-in variable):           Global Variables.    (line 111)
* version; configuration value:          Project information. (line  19)
* version; configuration value <1>:      Options for setuptools integration.
                                                              (line  82)
* versionadded (directive):              Paragraph-level markup.
                                                              (line  31)
* versionchanged (directive):            Paragraph-level markup.
                                                              (line  51)
* versionmodified (class in sphinx.addnodes): New admonition-like constructs.
                                                              (line   6)
* VersionRequirementError:               Exceptions.          (line  19)
* version_info (in module sphinx):       Checking the Sphinx version.
                                                              (line   8)
* viewcode_enable_epub; configuration value: sphinx ext viewcode – Add links to highlighted source code.
                                                              (line  43)
* viewcode_import; configuration value:  sphinx ext viewcode – Add links to highlighted source code.
                                                              (line  25)
* warn() (sphinx.application.Sphinx method): Producing messages / logging.
                                                              (line  16)
* warn() (sphinx.environment.BuildEnvironment method): Build environment API.
                                                              (line  46)
* warning:                               Paragraph-level markup.
                                                              (line   6)
* warning (directive):                   Paragraph-level markup.
                                                              (line  22)
* warning() (sphinx.util.logging.SphinxLoggerAdapter method): Logging API.
                                                              (line  19)
* warning-is-error; configuration value: Options for setuptools integration.
                                                              (line  65)
* warn_node() (sphinx.environment.BuildEnvironment method): Build environment API.
                                                              (line  54)
* WebSupport (class in sphinxcontrib.websupport): The WebSupport Class.
                                                              (line   6)
* Wrapper (C++ class):                   Templated declarations.
                                                              (line   8)
* Wrapper;;Outer (C++ class):            Templated declarations.
                                                              (line  10)
* Wrapper;;Outer;;Inner (C++ class):     Templated declarations.
                                                              (line  12)
* write_doc() (sphinx.builders.Builder method): Builder API.  (line  91)
* XMLBuilder (class in sphinx.builders.xml): Available builders.
                                                              (line 409)
* xml_pretty; configuration value:       Options for the XML builder.
                                                              (line   6)



Tag Table:
Node: Top357
Ref: contents doc586
Ref: 2e586
Node: Installing Sphinx11962
Ref: usage/installation installing-sphinx12055
Ref: 2f12055
Ref: usage/installation doc12055
Ref: 3012055
Node: Overview12207
Ref: usage/installation overview12283
Ref: 3112283
Ref: Overview-Footnote-112450
Node: Linux12498
Ref: usage/installation linux12588
Ref: 3212588
Ref: usage/installation id112588
Ref: 3312588
Node: Debian/Ubuntu12690
Ref: usage/installation debian-ubuntu12765
Ref: 3412765
Node: RHEL CentOS13010
Ref: usage/installation rhel-centos13113
Ref: 3513113
Node: Other distributions13294
Ref: usage/installation other-distributions13375
Ref: 3613375
Node: macOS13767
Ref: usage/installation macos13856
Ref: 3713856
Ref: macOS-Footnote-114008
Ref: macOS-Footnote-214033
Node: Homebrew14067
Ref: usage/installation homebrew14134
Ref: 3814134
Ref: usage/installation id314134
Ref: 3914134
Ref: Homebrew-Footnote-114290
Node: MacPorts14341
Ref: usage/installation id414408
Ref: 3a14408
Ref: usage/installation macports14408
Ref: 3b14408
Ref: MacPorts-Footnote-114837
Node: Windows14910
Ref: usage/installation id515016
Ref: 3c15016
Ref: usage/installation windows15016
Ref: 3d15016
Ref: Windows-Footnote-115834
Ref: Windows-Footnote-215882
Ref: Windows-Footnote-315952
Node: Installation from PyPI16021
Ref: usage/installation install-pypi16146
Ref: 3e16146
Ref: usage/installation installation-from-pypi16146
Ref: 3f16146
Ref: Installation from PyPI-Footnote-117150
Node: Installation from source17194
Ref: usage/installation installation-from-source17303
Ref: 4017303
Ref: Installation from source-Footnote-117918
Ref: Installation from source-Footnote-217963
Ref: Installation from source-Footnote-318030
Node: Getting Started18094
Ref: usage/quickstart doc18196
Ref: 4118196
Ref: usage/quickstart id1118196
Ref: 4218196
Ref: usage/quickstart getting-started18196
Ref: 4318196
Node: Setting up the documentation sources18839
Ref: usage/quickstart setting-up-the-documentation-sources18963
Ref: 4418963
Ref: Setting up the documentation sources-Footnote-119883
Node: Defining document structure20095
Ref: usage/quickstart defining-document-structure20242
Ref: 4920242
Node: Adding content22582
Ref: usage/quickstart adding-content22710
Ref: 4d22710
Node: Running the build23456
Ref: usage/quickstart running-the-build23576
Ref: 5123576
Node: Documenting objects24786
Ref: usage/quickstart documenting-objects24911
Ref: 5424911
Ref: usage/quickstart enumerate25578
Ref: 5525578
Node: Basic configuration27118
Ref: usage/quickstart basic-configuration27233
Ref: 5927233
Node: Autodoc28578
Ref: usage/quickstart autodoc28685
Ref: 5b28685
Node: Intersphinx30300
Ref: usage/quickstart intersphinx30413
Ref: 5d30413
Ref: Intersphinx-Footnote-131753
Node: More topics to be covered31787
Ref: usage/quickstart more-topics-to-be-covered31884
Ref: 5f31884
Node: Introduction32404
Ref: intro doc32498
Ref: 6832498
Ref: intro introduction32498
Ref: 6932498
Ref: Introduction-Footnote-133653
Ref: Introduction-Footnote-233702
Ref: Introduction-Footnote-333741
Node: Conversion from other systems33788
Ref: intro rinohtype33897
Ref: 6a33897
Ref: intro conversion-from-other-systems33897
Ref: 6b33897
Ref: Conversion from other systems-Footnote-134792
Ref: Conversion from other systems-Footnote-234839
Ref: Conversion from other systems-Footnote-334899
Ref: Conversion from other systems-Footnote-434940
Ref: Conversion from other systems-Footnote-534989
Node: Use with other systems35017
Ref: intro use-with-other-systems35148
Ref: 6c35148
Node: Prerequisites35257
Ref: intro prerequisites35364
Ref: 6e35364
Ref: Prerequisites-Footnote-135739
Ref: Prerequisites-Footnote-235780
Ref: Prerequisites-Footnote-335812
Node: Usage35841
Ref: intro usage35917
Ref: 6f35917
Ref: intro pygments35917
Ref: 7035917
Node: Man Pages36085
Ref: man/index man-pages36187
Ref: 7136187
Ref: man/index doc36187
Ref: 7236187
Node: Core Applications36328
Ref: man/index core-applications36423
Ref: 7336423
Node: sphinx-quickstart36517
Ref: man/sphinx-quickstart doc36609
Ref: 7436609
Ref: man/sphinx-quickstart sphinx-quickstart36609
Ref: 7536609
Node: Synopsis36722
Ref: man/sphinx-quickstart synopsis36804
Ref: 7636804
Node: Description36860
Ref: man/sphinx-quickstart description36958
Ref: 7736958
Node: Options37204
Ref: man/sphinx-quickstart options37302
Ref: 7837302
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-q37335
Ref: 7937335
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-h37498
Ref: 7a37498
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-sep37617
Ref: 7b37617
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-dot37695
Ref: 7c37695
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-p38032
Ref: 7d38032
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-a38134
Ref: 7f38134
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-v38223
Ref: 8138223
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-r38300
Ref: 8338300
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-l38396
Ref: 8538396
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-suffix38495
Ref: 8738495
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-master38583
Ref: 8938583
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-epub38670
Ref: 8b38670
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-autodoc38743
Ref: 8c38743
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-doctest38819
Ref: 8d38819
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-intersphinx38895
Ref: 8e38895
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-todo38979
Ref: 8f38979
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-coverage39049
Ref: 9039049
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-imgmath39127
Ref: 9139127
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-mathjax39203
Ref: 9239203
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-ifconfig39279
Ref: 9339279
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-viewcode39357
Ref: 9439357
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-ext-githubpages39435
Ref: 9539435
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-extensions39519
Ref: 9639519
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-use-make-mode39672
Ref: 9739672
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-makefile39946
Ref: 9939946
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-batchfile40024
Ref: 9a40024
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-t40213
Ref: 9b40213
Ref: man/sphinx-quickstart cmdoption-sphinx-quickstart-d40730
Ref: 9c40730
Node: See also40790
Ref: man/sphinx-quickstart see-also40868
Ref: 9d40868
Node: sphinx-build40926
Ref: man/sphinx-build sphinx-build41018
Ref: 9e41018
Ref: man/sphinx-build doc41018
Ref: 9f41018
Node: Synopsis<2>41222
Ref: man/sphinx-build synopsis41305
Ref: a041305
Node: Description<2>41414
Ref: man/sphinx-build description41516
Ref: a141516
Node: Options<2>42297
Ref: man/sphinx-build options42409
Ref: a242409
Ref: man/sphinx-build cmdoption-sphinx-build-b42442
Ref: 5242442
Ref: man/sphinx-build make-mode44248
Ref: 9844248
Ref: man/sphinx-build cmdoption-sphinx-build-m44248
Ref: a444248
Ref: man/sphinx-build cmdoption-sphinx-build-a45029
Ref: a745029
Ref: man/sphinx-build cmdoption-sphinx-build-e45218
Ref: a845218
Ref: man/sphinx-build cmdoption-sphinx-build-t45472
Ref: aa45472
Ref: man/sphinx-build cmdoption-sphinx-build-d45652
Ref: ac45652
Ref: man/sphinx-build cmdoption-sphinx-build-j46060
Ref: ad46060
Ref: man/sphinx-build cmdoption-sphinx-build-c46501
Ref: ae46501
Ref: man/sphinx-build id146870
Ref: af46870
Ref: man/sphinx-build id247005
Ref: b047005
Ref: man/sphinx-build id347605
Ref: b147605
Ref: man/sphinx-build cmdoption-sphinx-build-n47723
Ref: b247723
Ref: man/sphinx-build id447951
Ref: b447951
Ref: man/sphinx-build cmdoption-sphinx-build-v48001
Ref: b548001
Ref: man/sphinx-build cmdoption-sphinx-build-q48194
Ref: b748194
Ref: man/sphinx-build id548314
Ref: b848314
Ref: man/sphinx-build cmdoption-sphinx-build-w48451
Ref: b948451
Ref: man/sphinx-build id648561
Ref: ba48561
Ref: man/sphinx-build id748718
Ref: b648718
Ref: man/sphinx-build cmdoption-sphinx-build-p48949
Ref: bb48949
Ref: man/sphinx-build cmdoption-sphinx-build-h49091
Ref: bc49091
Node: Environment Variables49381
Ref: man/sphinx-build environment-variables49499
Ref: bd49499
Ref: man/sphinx-build makefile-options49780
Ref: a549780
Node: Deprecation Warnings50422
Ref: man/sphinx-build when-deprecation-warnings-are-displayed50541
Ref: bf50541
Ref: man/sphinx-build deprecation-warnings50541
Ref: c050541
Node: See also<2>51207
Ref: man/sphinx-build see-also51296
Ref: c151296
Node: Additional Applications51359
Ref: man/index additional-applications51454
Ref: c251454
Node: sphinx-apidoc51558
Ref: man/sphinx-apidoc doc51654
Ref: 4851654
Ref: man/sphinx-apidoc sphinx-apidoc51654
Ref: c351654
Node: Synopsis<3>51825
Ref: man/sphinx-apidoc synopsis51909
Ref: c451909
Node: Description<3>52033
Ref: man/sphinx-apidoc description52136
Ref: c552136
Ref: Description<3>-Footnote-153088
Node: Options<3>53104
Ref: man/sphinx-apidoc options53207
Ref: c653207
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-o53240
Ref: c753240
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-f53356
Ref: c853356
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-l53439
Ref: c953439
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-n53500
Ref: ca53500
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-s53558
Ref: cb53558
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-d53652
Ref: cc53652
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-t53741
Ref: cd53741
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-full53864
Ref: ce53864
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-e54021
Ref: cf54021
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-no-headings54132
Ref: d054132
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-p54295
Ref: d154295
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-implicit-namespaces54386
Ref: d254386
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-m54796
Ref: d354796
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-a54953
Ref: d454953
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-h55007
Ref: d555007
Ref: man/sphinx-apidoc id155118
Ref: d655118
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-v55232
Ref: d755232
Ref: man/sphinx-apidoc cmdoption-sphinx-apidoc-r55346
Ref: d855346
Ref: Options<3>-Footnote-155496
Node: Environment55545
Ref: man/sphinx-apidoc environment55645
Ref: d955645
Ref: man/sphinx-apidoc envvar-SPHINX_APIDOC_OPTIONS55686
Ref: da55686
Node: See also<3>55895
Ref: man/sphinx-apidoc see-also55976
Ref: db55976
Node: sphinx-autogen56059
Ref: man/sphinx-autogen fnmatch56155
Ref: dc56155
Ref: man/sphinx-autogen doc56155
Ref: dd56155
Ref: man/sphinx-autogen sphinx-autogen56155
Ref: de56155
Node: Synopsis<4>56324
Ref: man/sphinx-autogen synopsis56409
Ref: df56409
Node: Description<4>56491
Ref: man/sphinx-autogen description56595
Ref: e056595
Node: Options<4>57015
Ref: man/sphinx-autogen options57115
Ref: e257115
Ref: man/sphinx-autogen cmdoption-sphinx-autogen-o57148
Ref: e357148
Ref: man/sphinx-autogen cmdoption-sphinx-autogen-s57322
Ref: e457322
Ref: man/sphinx-autogen cmdoption-sphinx-autogen-t57439
Ref: e557439
Ref: man/sphinx-autogen cmdoption-sphinx-autogen-i57550
Ref: e657550
Node: Example57619
Ref: man/sphinx-autogen example57716
Ref: e757716
Node: See also<4>58599
Ref: man/sphinx-autogen see-also58677
Ref: e858677
Node: reStructuredText Primer58759
Ref: rest rst-primer58873
Ref: 4f58873
Ref: rest doc58873
Ref: e958873
Ref: rest restructuredtext-primer58873
Ref: ea58873
Ref: reStructuredText Primer-Footnote-159692
Node: Paragraphs59741
Ref: rest paragraphs59833
Ref: eb59833
Ref: Paragraphs-Footnote-160184
Node: Inline markup60271
Ref: rest inline-markup60399
Ref: ec60399
Ref: rest inlinemarkup60399
Ref: ed60399
Ref: Inline markup-Footnote-161999
Ref: Inline markup-Footnote-262072
Ref: Inline markup-Footnote-362143
Ref: Inline markup-Footnote-462215
Ref: Inline markup-Footnote-562289
Ref: Inline markup-Footnote-662366
Node: Lists and Quote-like blocks62447
Ref: rest lists-and-quote-like-blocks62576
Ref: ef62576
Ref: Lists and Quote-like blocks-Footnote-164041
Ref: Lists and Quote-like blocks-Footnote-264130
Ref: Lists and Quote-like blocks-Footnote-364223
Ref: Lists and Quote-like blocks-Footnote-464312
Ref: Lists and Quote-like blocks-Footnote-564400
Ref: Lists and Quote-like blocks-Footnote-664488
Ref: Lists and Quote-like blocks-Footnote-764577
Ref: Lists and Quote-like blocks-Footnote-864675
Node: Source Code64766
Ref: rest source-code64888
Ref: f064888
Ref: Source Code-Footnote-165864
Node: Tables65955
Ref: rest rst-tables66060
Ref: f166060
Ref: rest tables66060
Ref: f266060
Ref: Tables-Footnote-167278
Ref: Tables-Footnote-267366
Node: Hyperlinks67456
Ref: rest hyperlinks67558
Ref: f467558
Node: External links67637
Ref: rest external-links67721
Ref: f567721
Ref: External links-Footnote-168286
Node: Internal links68380
Ref: rest internal-links68464
Ref: f668464
Node: Sections68662
Ref: rest sections68773
Ref: f868773
Ref: Sections-Footnote-169721
Ref: Sections-Footnote-269806
Node: Explicit Markup69876
Ref: rest explicit-markup69987
Ref: f969987
Ref: Explicit Markup-Footnote-170578
Node: Directives70677
Ref: rest id170786
Ref: fa70786
Ref: rest directives70786
Ref: f370786
Ref: Directives-Footnote-173973
Ref: Directives-Footnote-274060
Ref: Directives-Footnote-374140
Ref: Directives-Footnote-474218
Ref: Directives-Footnote-574295
Ref: Directives-Footnote-674371
Ref: Directives-Footnote-774445
Ref: Directives-Footnote-874525
Ref: Directives-Footnote-974599
Ref: Directives-Footnote-1074672
Ref: Directives-Footnote-1174751
Ref: Directives-Footnote-1274834
Ref: Directives-Footnote-1374911
Ref: Directives-Footnote-1474989
Ref: Directives-Footnote-1575078
Ref: Directives-Footnote-1675159
Ref: Directives-Footnote-1775237
Ref: Directives-Footnote-1875314
Ref: Directives-Footnote-1975393
Ref: Directives-Footnote-2075479
Ref: Directives-Footnote-2175559
Ref: Directives-Footnote-2275641
Ref: Directives-Footnote-2375723
Ref: Directives-Footnote-2475813
Ref: Directives-Footnote-2575890
Ref: Directives-Footnote-2675971
Ref: Directives-Footnote-2776053
Ref: Directives-Footnote-2876146
Ref: Directives-Footnote-2976225
Ref: Directives-Footnote-3076302
Ref: Directives-Footnote-3176455
Ref: Directives-Footnote-3276531
Ref: Directives-Footnote-3376626
Ref: Directives-Footnote-3476710
Ref: Directives-Footnote-3576786
Ref: Directives-Footnote-3676865
Ref: Directives-Footnote-3776943
Node: Images77021
Ref: rest images77124
Ref: fb77124
Ref: Images-Footnote-179018
Node: Footnotes79094
Ref: rest footnotes79196
Ref: fd79196
Ref: Footnotes-Footnote-179726
Node: Citations79812
Ref: rest citations79921
Ref: fe79921
Ref: Citations-Footnote-180373
Node: Substitutions80459
Ref: rest substitutions80567
Ref: ff80567
Ref: Substitutions-Footnote-181475
Ref: Substitutions-Footnote-281576
Node: Comments81677
Ref: rest comments81791
Ref: 10281791
Ref: Comments-Footnote-182195
Node: Source encoding82280
Ref: rest source-encoding82388
Ref: 10382388
Node: Gotchas82742
Ref: rest gotchas82833
Ref: 10582833
Ref: Gotchas-Footnote-183326
Node: Sphinx Markup Constructs83427
Ref: markup/index doc83546
Ref: 10683546
Ref: markup/index sphinx-markup-constructs83546
Ref: 10783546
Ref: markup/index sphinxmarkup83546
Ref: 5083546
Ref: Sphinx Markup Constructs-Footnote-184011
Node: The TOC tree84087
Ref: markup/toctree the-toc-tree84191
Ref: 10884191
Ref: markup/toctree doc84191
Ref: 10984191
Ref: markup/toctree toctree-directive84191
Ref: 4c84191
Ref: markup/toctree directive-toctree84638
Ref: 10a84638
Ref: The TOC tree-Footnote-191079
Ref: The TOC tree-Footnote-291157
Ref: The TOC tree-Footnote-391264
Node: Special names91546
Ref: markup/toctree special-names91608
Ref: 10e91608
Node: Paragraph-level markup93131
Ref: markup/para doc93268
Ref: 11293268
Ref: markup/para paragraph-level-markup93268
Ref: 11393268
Ref: markup/para directive-note93430
Ref: 11493430
Ref: markup/para directive-warning93851
Ref: 11593851
Ref: markup/para directive-versionadded94296
Ref: 11694296
Ref: markup/para directive-versionchanged95008
Ref: 11795008
Ref: markup/para directive-deprecated95236
Ref: 11895236
Ref: markup/para directive-seealso95639
Ref: 11995639
Ref: markup/para directive-rubric96612
Ref: 11a96612
Ref: markup/para directive-centered97054
Ref: 11b97054
Ref: markup/para directive-hlist97416
Ref: 11c97416
Node: Table-of-contents markup98066
Ref: markup/para table-of-contents-markup98199
Ref: 11d98199
Ref: Table-of-contents markup-Footnote-198498
Node: Glossary98586
Ref: markup/para glossary98724
Ref: 11e98724
Ref: markup/para glossary-directive98724
Ref: 11f98724
Ref: markup/para directive-glossary98751
Ref: 12098751
Node: Grammar production displays101025
Ref: markup/para grammar-production-displays101160
Ref: 122101160
Ref: markup/para directive-productionlist101594
Ref: 123101594
Node: Showing code examples103091
Ref: markup/code showing-code-examples103234
Ref: 125103234
Ref: markup/code doc103234
Ref: 126103234
Ref: markup/code code-examples103234
Ref: 127103234
Ref: markup/code directive-highlight104627
Ref: 129104627
Ref: markup/code directive-code-block105023
Ref: 12a105023
Ref: Showing code examples-Footnote-1105951
Ref: Showing code examples-Footnote-2105979
Node: Line numbers106020
Ref: markup/code line-numbers106107
Ref: 12b106107
Node: Includes107518
Ref: markup/code includes107630
Ref: 12c107630
Ref: markup/code directive-literalinclude107661
Ref: 12d107661
Ref: Includes-Footnote-1111994
Node: Caption and name112129
Ref: markup/code caption-and-name112235
Ref: 12e112235
Node: Dedent112852
Ref: markup/code dedent112941
Ref: 12f112941
Node: Inline markup<2>113257
Ref: markup/inline id1113393
Ref: 130113393
Ref: markup/inline doc113393
Ref: 131113393
Ref: markup/inline inline-markup113393
Ref: ee113393
Node: Cross-referencing syntax114087
Ref: markup/inline xref-syntax114194
Ref: 10b114194
Ref: markup/inline cross-referencing-syntax114194
Ref: 134114194
Node: Cross-referencing anything115657
Ref: markup/inline cross-referencing-anything115778
Ref: 135115778
Ref: markup/inline any-role115778
Ref: 136115778
Ref: markup/inline role-any115849
Ref: 132115849
Node: Cross-referencing objects117579
Ref: markup/inline cross-referencing-objects117746
Ref: 139117746
Node: Cross-referencing arbitrary locations117992
Ref: markup/inline cross-referencing-arbitrary-locations118160
Ref: 13f118160
Ref: markup/inline ref-role118160
Ref: f7118160
Ref: markup/inline role-ref118253
Ref: 4e118253
Ref: Cross-referencing arbitrary locations-Footnote-1120253
Node: Cross-referencing documents120329
Ref: markup/inline cross-referencing-documents120502
Ref: 140120502
Ref: markup/inline role-doc120648
Ref: 137120648
Node: Referencing downloadable files121225
Ref: markup/inline referencing-downloadable-files121403
Ref: 141121403
Ref: markup/inline role-download121503
Ref: 142121503
Node: Cross-referencing figures by figure number122609
Ref: markup/inline cross-referencing-figures-by-figure-number122801
Ref: 143122801
Ref: markup/inline role-numref123050
Ref: 144123050
Node: Cross-referencing other items of interest123886
Ref: markup/inline cross-referencing-other-items-of-interest124039
Ref: 147124039
Ref: markup/inline role-envvar124228
Ref: 148124228
Ref: markup/inline role-token124419
Ref: 124124419
Ref: markup/inline role-keyword124564
Ref: 14a124564
Ref: markup/inline role-option124718
Ref: 138124718
Ref: markup/inline role-term124969
Ref: 121124969
Node: Other semantic markup125436
Ref: markup/inline other-semantic-markup125568
Ref: 14c125568
Ref: markup/inline role-abbr125723
Ref: 14d125723
Ref: markup/inline role-command126033
Ref: 14e126033
Ref: markup/inline role-dfn126128
Ref: 14f126128
Ref: markup/inline role-file126258
Ref: 150126258
Ref: markup/inline role-guilabel126658
Ref: 151126658
Ref: markup/inline role-kbd127393
Ref: 152127393
Ref: markup/inline role-mailheader127962
Ref: 153127962
Ref: markup/inline role-makevar128535
Ref: 154128535
Ref: markup/inline role-manpage128614
Ref: 155128614
Ref: markup/inline role-menuselection128857
Ref: 157128857
Ref: markup/inline role-mimetype129700
Ref: 158129700
Ref: markup/inline role-newsgroup129848
Ref: 159129848
Ref: markup/inline role-program129926
Ref: 15a129926
Ref: markup/inline role-regexp130182
Ref: 15b130182
Ref: markup/inline role-samp130279
Ref: 15c130279
Ref: markup/inline role-pep130797
Ref: 15e130797
Ref: markup/inline role-rfc131147
Ref: 15f131147
Node: Substitutions<2>131621
Ref: markup/inline default-substitutions131720
Ref: 101131720
Ref: markup/inline substitutions131720
Ref: 160131720
Node: Miscellaneous markup132638
Ref: markup/misc miscellaneous-markup132744
Ref: 163132744
Ref: markup/misc doc132744
Ref: 164132744
Node: File-wide metadata132950
Ref: markup/misc file-wide-metadata133057
Ref: 165133057
Ref: markup/misc metadata133057
Ref: 10d133057
Node: Meta-information markup134115
Ref: markup/misc meta-information-markup134254
Ref: 166134254
Ref: markup/misc directive-sectionauthor134315
Ref: 167134315
Ref: markup/misc directive-codeauthor134950
Ref: 169134950
Node: Index-generating markup135331
Ref: markup/misc directive-index135923
Ref: 110135923
Ref: markup/misc role-index138673
Ref: 15d138673
Node: Including content based on tags139437
Ref: markup/misc tags139575
Ref: 16a139575
Ref: markup/misc including-content-based-on-tags139575
Ref: 16b139575
Ref: markup/misc directive-only139652
Ref: ab139652
Ref: Including content based on tags-Footnote-1141348
Ref: Including content based on tags-Footnote-2141649
Node: Tables<2>141728
Ref: markup/misc tables141847
Ref: 16d141847
Ref: markup/misc directive-tabularcolumns142347
Ref: 16e142347
Ref: Tables<2>-Footnote-1147397
Ref: Tables<2>-Footnote-2147485
Ref: Tables<2>-Footnote-3147575
Ref: Tables<2>-Footnote-4147655
Ref: Tables<2>-Footnote-5147736
Ref: Tables<2>-Footnote-6147812
Node: Math147888
Ref: markup/misc math147967
Ref: 16f147967
Node: Sphinx Domains148081
Ref: domains doc148195
Ref: 171148195
Ref: domains standard-rest-markup148195
Ref: 172148195
Ref: domains domains148195
Ref: 58148195
Ref: domains sphinx-domains148195
Ref: 173148195
Node: What is a Domain?148457
Ref: domains what-is-a-domain148546
Ref: 174148546
Node: Basic Markup150143
Ref: domains basic-markup150258
Ref: 179150258
Ref: domains basic-domain-markup150258
Ref: 10f150258
Ref: domains directive-default-domain151912
Ref: 17b151912
Node: Cross-referencing syntax<2>152575
Ref: domains cross-referencing-syntax152651
Ref: 17c152651
Node: The Python Domain153375
Ref: domains the-python-domain153485
Ref: 17d153485
Ref: domains directive-py module153620
Ref: 111153620
Ref: domains directive-py currentmodule154740
Ref: 17e154740
Ref: domains directive-py function155381
Ref: 180155381
Ref: domains directive-py data156122
Ref: 183156122
Ref: domains directive-py exception156364
Ref: 184156364
Ref: domains directive-py class156542
Ref: 56156542
Ref: domains directive-py attribute157278
Ref: 185157278
Ref: domains directive-py method157512
Ref: 57157512
Ref: domains directive-py staticmethod157850
Ref: 186157850
Ref: domains directive-py classmethod158034
Ref: 187158034
Ref: domains directive-py decorator158216
Ref: 188158216
Ref: domains directive-py decoratormethod159190
Ref: 18a159190
Node: Python Signatures159566
Ref: domains signatures159662
Ref: 181159662
Ref: domains python-signatures159662
Ref: 18c159662
Ref: domains compile160335
Ref: 18d160335
Node: Info field lists160456
Ref: domains info-field-lists160593
Ref: 182160593
Ref: domains id1160593
Ref: 18e160593
Node: Cross-referencing Python objects163783
Ref: domains cross-referencing-python-objects163894
Ref: 18f163894
Ref: domains python-roles163894
Ref: 13a163894
Ref: domains role-py mod164086
Ref: 17f164086
Ref: domains role-py func164226
Ref: 189164226
Ref: domains role-py data164552
Ref: 191164552
Ref: domains role-py const164631
Ref: 192164631
Ref: domains role-py class164784
Ref: 193164784
Ref: domains role-py meth164875
Ref: 18b164875
Ref: domains role-py attr165134
Ref: 194165134
Ref: domains role-py exc165219
Ref: 195165219
Ref: domains role-py obj165314
Ref: 133165314
Node: The C Domain166991
Ref: domains c-domain167103
Ref: 196167103
Ref: domains the-c-domain167103
Ref: 197167103
Ref: domains directive-c function167201
Ref: 198167201
Ref: domains directive-c member167737
Ref: 199167737
Ref: domains directive-c macro168151
Ref: 19a168151
Ref: domains directive-c type168546
Ref: 19b168546
Ref: domains directive-c var168713
Ref: 19c168713
Node: Cross-referencing C constructs168950
Ref: domains c-roles169029
Ref: 13b169029
Ref: domains cross-referencing-c-constructs169029
Ref: 19d169029
Ref: domains role-c func169216
Ref: 19e169216
Ref: domains role-c member169335
Ref: 19f169335
Ref: domains role-c macro169423
Ref: 1a0169423
Ref: domains role-c type169519
Ref: 1a1169519
Ref: domains role-c data169591
Ref: 1a2169591
Node: The C++ Domain169667
Ref: domains id2169781
Ref: 1a3169781
Ref: domains cpp-domain169781
Ref: 1a4169781
Node: Directives<2>170088
Ref: domains directives170182
Ref: 1a5170182
Ref: domains directive-cpp class170364
Ref: 1a6170364
Ref: domains directive-cpp function171210
Ref: 1a7171210
Ref: domains directive-cpp member172325
Ref: 1a8172325
Ref: domains directive-cpp var172413
Ref: 1a9172413
Ref: domains directive-cpp type172875
Ref: 1aa172875
Ref: domains _CPPv26MyList173729
Ref: 1ab173729
Ref: domains MyList173729
Ref: 1ac173729
Ref: domains _CPPv2N11MyContainer14const_iteratorE173830
Ref: 1ad173830
Ref: domains MyContainer const_iterator173830
Ref: 1ae173830
Ref: domains _CPPv26MyType173940
Ref: 1af173940
Ref: domains _CPPv2I0E11MyContainer174052
Ref: 1b0174052
Ref: domains directive-cpp enum174154
Ref: 1b1174154
Ref: domains directive-cpp enum-struct174226
Ref: 1b2174226
Ref: domains directive-cpp enum-class174313
Ref: 1b3174313
Ref: domains directive-cpp enumerator175069
Ref: 1b4175069
Ref: domains directive-cpp concept175382
Ref: 1b5175382
Ref: domains _CPPv2I0ENSt8IteratorE176317
Ref: 1b6176317
Ref: domains _CPPv2NSt8Iterator1rE176516
Ref: 1b7176516
Ref: domains std Iterator r__It176516
Ref: 1b8176516
Node: Options<5>176904
Ref: domains options176964
Ref: 1b9176964
Node: Constrained Templates177224
Ref: domains constrained-templates177354
Ref: 1ba177354
Node: Placeholders177728
Ref: domains placeholders177829
Ref: 1bb177829
Node: Template Introductions178313
Ref: domains template-introductions178414
Ref: 1bc178414
Ref: domains _CPPv2I0EXNSt8IteratorEI2ItEE7advanceR2It178952
Ref: 1bd178952
Ref: domains _CPPv2I0EXNSt18LessThanComparableEI1TEE17MySortedContainer179110
Ref: 1be179110
Node: Inline Expressions and Tpes179453
Ref: domains inline-expressions-and-tpes179581
Ref: 1bf179581
Ref: domains role-cpp expr179650
Ref: 1c0179650
Ref: domains _CPPv21a180031
Ref: 1c1180031
Ref: domains a__i180031
Ref: 1c2180031
Ref: domains _CPPv21fi180057
Ref: 1c3180057
Ref: domains f__i180057
Ref: 1c4180057
Node: Namespacing180211
Ref: domains namespacing180337
Ref: 1c5180337
Ref: domains directive-cpp namespace180814
Ref: 1c6180814
Ref: domains directive-cpp namespace-push182153
Ref: 1c7182153
Ref: domains directive-cpp namespace-pop182447
Ref: 1c8182447
Node: Info field lists<2>183107
Ref: domains id17183223
Ref: 1c9183223
Node: Cross-referencing183683
Ref: domains cross-referencing183811
Ref: 1ca183811
Ref: domains cpp-roles183811
Ref: 13c183811
Ref: domains role-cpp any183910
Ref: 1cb183910
Ref: domains role-cpp class183947
Ref: 1cc183947
Ref: domains role-cpp func183986
Ref: 1cd183986
Ref: domains role-cpp member184024
Ref: 1ce184024
Ref: domains role-cpp var184064
Ref: 1cf184064
Ref: domains role-cpp type184101
Ref: 1d0184101
Ref: domains role-cpp concept184139
Ref: 1d1184139
Ref: domains role-cpp enum184180
Ref: 1d2184180
Ref: domains role-cpp enumerator184218
Ref: 1d3184218
Node: Declarations without template parameters and template arguments185575
Ref: domains declarations-without-template-parameters-and-template-arguments185723
Ref: 1d4185723
Node: Templated declarations185978
Ref: domains templated-declarations186164
Ref: 1d5186164
Ref: domains _CPPv27Wrapper186263
Ref: 1d6186263
Ref: domains Wrapper186263
Ref: 1d7186263
Ref: domains _CPPv2I0EN7Wrapper5OuterE186287
Ref: 1d8186287
Ref: domains _CPPv2I0EN7Wrapper5Outer5InnerE186339
Ref: 1d9186339
Node: Full Template Specialisations187326
Ref: domains full-template-specialisations187481
Ref: 1da187481
Ref: domains _CPPv2I0E5Outer187598
Ref: 1db187598
Ref: domains _CPPv2I0EN5Outer5InnerE187645
Ref: 1dc187645
Ref: domains _CPPv2IE5OuterIiE187697
Ref: 1dd187697
Ref: domains _CPPv2I0EN5OuterIiE5InnerE187734
Ref: 1de187734
Ref: domains _CPPv2IEN5OuterIiE5InnerIbEE187786
Ref: 1df187786
Node: Partial Template Specialisations188368
Ref: domains partial-template-specialisations188492
Ref: 1e0188492
Ref: domains _CPPv2I0E5OuterIP1TE188610
Ref: 1e1188610
Node: Configuration Variables188941
Ref: domains configuration-variables189041
Ref: 1e2189041
Node: The Standard Domain189146
Ref: domains the-standard-domain189269
Ref: 1e4189269
Ref: domains directive-option189682
Ref: 14b189682
Ref: domains directive-envvar190389
Ref: 149190389
Ref: domains directive-program190573
Ref: 1e6190573
Ref: domains directive-describe191612
Ref: 1e7191612
Ref: domains directive-object191663
Ref: 1e8191663
Node: The JavaScript Domain191984
Ref: domains the-javascript-domain192120
Ref: 1e9192120
Ref: domains directive-js module192243
Ref: 1ea192243
Ref: domains directive-js function192944
Ref: 1eb192944
Ref: domains _S_ getJSON193835
Ref: 1ec193835
Ref: domains directive-js method194382
Ref: 1ed194382
Ref: domains directive-js class194626
Ref: 1ee194626
Ref: domains MyAnimal195010
Ref: 1ef195010
Ref: domains directive-js data195249
Ref: 1f0195249
Ref: domains directive-js attribute195347
Ref: 1f1195347
Ref: domains js-roles195459
Ref: 13d195459
Ref: domains role-js mod195520
Ref: 1f2195520
Ref: domains role-js func195556
Ref: 1f3195556
Ref: domains role-js meth195593
Ref: 1f4195593
Ref: domains role-js class195630
Ref: 1f5195630
Ref: domains role-js data195668
Ref: 1f6195668
Ref: domains role-js attr195705
Ref: 1f7195705
Node: The reStructuredText domain195743
Ref: domains the-restructuredtext-domain195872
Ref: 1f8195872
Ref: domains directive-rst directive196014
Ref: 1f9196014
Ref: domains directive-foo196453
Ref: 1fa196453
Ref: domains directive-bar196538
Ref: 1fb196538
Ref: domains directive-rst role196627
Ref: 1fc196627
Ref: domains role-foo196809
Ref: 1fd196809
Ref: domains rst-roles196885
Ref: 13e196885
Ref: domains role-rst dir196946
Ref: 1fe196946
Ref: domains role-rst role196983
Ref: 1ff196983
Node: More domains197022
Ref: domains more-domains197121
Ref: 200197121
Ref: More domains-Footnote-1197497
Ref: More domains-Footnote-2197554
Ref: More domains-Footnote-3197615
Ref: More domains-Footnote-4197673
Ref: More domains-Footnote-5197737
Ref: More domains-Footnote-6197799
Ref: More domains-Footnote-7197862
Ref: More domains-Footnote-8197926
Ref: More domains-Footnote-9197987
Ref: More domains-Footnote-10198067
Ref: More domains-Footnote-11198132
Ref: More domains-Footnote-12198193
Ref: More domains-Footnote-13198255
Ref: More domains-Footnote-14198320
Ref: More domains-Footnote-15198384
Ref: More domains-Footnote-16198452
Node: Available builders198516
Ref: builders available-builders198634
Ref: 201198634
Ref: builders doc198634
Ref: 202198634
Ref: builders builders198634
Ref: a3198634
Ref: builders scala198634
Ref: 203198634
Ref: builders module-sphinx builders198634
Ref: 2198634
Ref: builders module-sphinx builders html198887
Ref: 9198887
Ref: builders sphinx builders html StandaloneHTMLBuilder198889
Ref: 205198889
Ref: builders sphinx builders html StandaloneHTMLBuilder name199261
Ref: 207199261
Ref: builders sphinx builders html StandaloneHTMLBuilder format199296
Ref: 208199296
Ref: builders sphinx builders html StandaloneHTMLBuilder supported_image_types199333
Ref: 209199333
Ref: builders sphinx builders html DirectoryHTMLBuilder199451
Ref: 20a199451
Ref: builders sphinx builders html DirectoryHTMLBuilder name199996
Ref: 20b199996
Ref: builders sphinx builders html DirectoryHTMLBuilder format200034
Ref: 20c200034
Ref: builders sphinx builders html DirectoryHTMLBuilder supported_image_types200071
Ref: 20d200071
Ref: builders sphinx builders html SingleFileHTMLBuilder200215
Ref: 20e200215
Ref: builders sphinx builders html SingleFileHTMLBuilder name200494
Ref: 20f200494
Ref: builders sphinx builders html SingleFileHTMLBuilder format200535
Ref: 210200535
Ref: builders sphinx builders html SingleFileHTMLBuilder supported_image_types200572
Ref: 211200572
Ref: builders module-sphinx builders htmlhelp200716
Ref: a200716
Ref: builders sphinx builders htmlhelp HTMLHelpBuilder200716
Ref: 212200716
Ref: builders sphinx builders htmlhelp HTMLHelpBuilder name200975
Ref: 213200975
Ref: builders sphinx builders htmlhelp HTMLHelpBuilder format201014
Ref: 214201014
Ref: builders sphinx builders htmlhelp HTMLHelpBuilder supported_image_types201051
Ref: 215201051
Ref: builders module-sphinx builders qthelp201151
Ref: e201151
Ref: builders sphinx builders qthelp QtHelpBuilder201152
Ref: 216201152
Ref: builders sphinx builders qthelp QtHelpBuilder name201398
Ref: 217201398
Ref: builders sphinx builders qthelp QtHelpBuilder format201435
Ref: 218201435
Ref: builders sphinx builders qthelp QtHelpBuilder supported_image_types201472
Ref: 219201472
Ref: builders module-sphinx builders applehelp201589
Ref: 3201589
Ref: builders sphinx builders applehelp AppleHelpBuilder201590
Ref: 21a201590
Ref: builders sphinx builders applehelp AppleHelpBuilder name202419
Ref: 21c202419
Ref: builders sphinx builders applehelp AppleHelpBuilder format202459
Ref: 21d202459
Ref: builders sphinx builders applehelp AppleHelpBuilder supported_image_types202496
Ref: 21e202496
Ref: builders module-sphinx builders devhelp202667
Ref: 5202667
Ref: builders sphinx builders devhelp DevhelpBuilder202667
Ref: 21f202667
Ref: builders sphinx builders devhelp DevhelpBuilder name202904
Ref: 220202904
Ref: builders sphinx builders devhelp DevhelpBuilder format202942
Ref: 221202942
Ref: builders sphinx builders devhelp DevhelpBuilder supported_image_types202979
Ref: 222202979
Ref: builders module-sphinx builders epub3203079
Ref: 7203079
Ref: builders sphinx builders epub3 Epub3Builder203080
Ref: 223203080
Ref: builders sphinx builders epub3 Epub3Builder name203490
Ref: 225203490
Ref: builders sphinx builders epub3 Epub3Builder format203525
Ref: 226203525
Ref: builders sphinx builders epub3 Epub3Builder supported_image_types203562
Ref: 227203562
Ref: builders module-sphinx builders latex203818
Ref: b203818
Ref: builders sphinx builders latex LaTeXBuilder203818
Ref: 53203818
Ref: builders sphinx builders latex LaTeXBuilder name206142
Ref: 22a206142
Ref: builders sphinx builders latex LaTeXBuilder format206178
Ref: 22b206178
Ref: builders sphinx builders latex LaTeXBuilder supported_image_types206216
Ref: 22c206216
Ref: builders module-sphinx builders text206473
Ref: 10206473
Ref: builders sphinx builders text TextBuilder206475
Ref: 22d206475
Ref: builders sphinx builders text TextBuilder name206698
Ref: 22e206698
Ref: builders sphinx builders text TextBuilder format206733
Ref: 22f206733
Ref: builders sphinx builders text TextBuilder supported_image_types206770
Ref: 230206770
Ref: builders module-sphinx builders manpage206844
Ref: d206844
Ref: builders sphinx builders manpage ManualPageBuilder206844
Ref: 231206844
Ref: builders sphinx builders manpage ManualPageBuilder name207099
Ref: 233207099
Ref: builders sphinx builders manpage ManualPageBuilder format207133
Ref: 234207133
Ref: builders sphinx builders manpage ManualPageBuilder supported_image_types207169
Ref: 235207169
Ref: builders module-sphinx builders texinfo207243
Ref: f207243
Ref: builders sphinx builders texinfo TexinfoBuilder207243
Ref: 236207243
Ref: builders sphinx builders texinfo TexinfoBuilder name207921
Ref: 239207921
Ref: builders sphinx builders texinfo TexinfoBuilder format207959
Ref: 23a207959
Ref: builders sphinx builders texinfo TexinfoBuilder supported_image_types207999
Ref: 23b207999
Ref: builders sphinx builders html SerializingHTMLBuilder208126
Ref: 23c208126
Ref: builders sphinx builders html SerializingHTMLBuilder implementation208879
Ref: 23d208879
Ref: builders sphinx builders html SerializingHTMLBuilder out_suffix209248
Ref: 23e209248
Ref: builders sphinx builders html SerializingHTMLBuilder globalcontext_filename209325
Ref: 23f209325
Ref: builders sphinx builders html SerializingHTMLBuilder searchindex_filename209553
Ref: 240209553
Ref: builders sphinx builders html PickleHTMLBuilder209778
Ref: 242209778
Ref: builders sphinx builders html PickleHTMLBuilder name210159
Ref: 243210159
Ref: builders sphinx builders html PickleHTMLBuilder format210251
Ref: 244210251
Ref: builders sphinx builders html PickleHTMLBuilder supported_image_types210288
Ref: 245210288
Ref: builders sphinx builders html JSONHTMLBuilder210553
Ref: 246210553
Ref: builders sphinx builders html JSONHTMLBuilder name210930
Ref: 247210930
Ref: builders sphinx builders html JSONHTMLBuilder format210965
Ref: 248210965
Ref: builders sphinx builders html JSONHTMLBuilder supported_image_types211002
Ref: 249211002
Ref: builders module-sphinx builders gettext211287
Ref: 8211287
Ref: builders sphinx builders gettext MessageCatalogBuilder211287
Ref: 24a211287
Ref: builders sphinx builders gettext MessageCatalogBuilder name211588
Ref: 24c211588
Ref: builders sphinx builders gettext MessageCatalogBuilder format211626
Ref: 24d211626
Ref: builders sphinx builders gettext MessageCatalogBuilder supported_image_types211659
Ref: 24e211659
Ref: builders module-sphinx builders changes211733
Ref: 4211733
Ref: builders sphinx builders changes ChangesBuilder211733
Ref: 24f211733
Ref: builders sphinx builders changes ChangesBuilder name212035
Ref: 250212035
Ref: builders sphinx builders changes ChangesBuilder format212073
Ref: 251212073
Ref: builders sphinx builders changes ChangesBuilder supported_image_types212106
Ref: 252212106
Ref: builders module-sphinx builders dummy212153
Ref: 6212153
Ref: builders sphinx builders dummy DummyBuilder212154
Ref: 253212154
Ref: builders sphinx builders dummy DummyBuilder name212338
Ref: 254212338
Ref: builders sphinx builders dummy DummyBuilder supported_image_types212374
Ref: 255212374
Ref: builders module-sphinx builders linkcheck212448
Ref: c212448
Ref: builders sphinx builders linkcheck CheckExternalLinksBuilder212448
Ref: 256212448
Ref: builders sphinx builders linkcheck CheckExternalLinksBuilder name212754
Ref: 257212754
Ref: builders sphinx builders linkcheck CheckExternalLinksBuilder format212794
Ref: 258212794
Ref: builders sphinx builders linkcheck CheckExternalLinksBuilder supported_image_types212827
Ref: 259212827
Ref: builders module-sphinx builders xml212980
Ref: 11212980
Ref: builders sphinx builders xml XMLBuilder212980
Ref: 25a212980
Ref: builders sphinx builders xml XMLBuilder name213195
Ref: 25b213195
Ref: builders sphinx builders xml XMLBuilder format213229
Ref: 25c213229
Ref: builders sphinx builders xml XMLBuilder supported_image_types213265
Ref: 25d213265
Ref: builders sphinx builders xml PseudoXMLBuilder213339
Ref: 25e213339
Ref: builders sphinx builders xml PseudoXMLBuilder name213767
Ref: 25f213767
Ref: builders sphinx builders xml PseudoXMLBuilder format213807
Ref: 260213807
Ref: builders sphinx builders xml PseudoXMLBuilder supported_image_types213849
Ref: 261213849
Ref: Available builders-Footnote-1214112
Ref: Available builders-Footnote-2214167
Ref: Available builders-Footnote-3214211
Ref: Available builders-Footnote-4214256
Ref: Available builders-Footnote-5214328
Node: Serialization builder details214378
Ref: builders serialization-details214462
Ref: 241214462
Ref: builders serialization-builder-details214462
Ref: 262214462
Node: The build configuration file217374
Ref: config module-conf217507
Ref: 12217507
Ref: config doc217507
Ref: 264217507
Ref: config the-build-configuration-file217507
Ref: 265217507
Ref: config build-config217507
Ref: 5a217507
Ref: config conf-tags219440
Ref: 16c219440
Ref: The build configuration file-Footnote-1220664
Ref: The build configuration file-Footnote-2220726
Node: General configuration220767
Ref: config general-configuration220881
Ref: 267220881
Ref: config confval-extensions220934
Ref: 5c220934
Ref: config confval-source_suffix221786
Ref: 88221786
Ref: config confval-source_encoding222794
Ref: 104222794
Ref: config confval-source_parsers223045
Ref: 268223045
Ref: config confval-master_doc223902
Ref: 8a223902
Ref: config confval-exclude_patterns224109
Ref: 10c224109
Ref: config confval-templates_path224986
Ref: 26d224986
Ref: config confval-template_bridge225360
Ref: 26e225360
Ref: config confval-rst_epilog225779
Ref: 270225779
Ref: config confval-rst_prolog226152
Ref: 100226152
Ref: config confval-primary_domain226329
Ref: 17a226329
Ref: config confval-default_role226863
Ref: fc226863
Ref: config confval-keep_warnings227395
Ref: 271227395
Ref: config confval-suppress_warnings227762
Ref: 272227762
Ref: config confval-needs_sphinx228739
Ref: 273228739
Ref: config confval-needs_extensions229052
Ref: 274229052
Ref: config confval-manpages_url229626
Ref: 156229626
Ref: config confval-nitpicky230347
Ref: 275230347
Ref: config confval-nitpick_ignore230617
Ref: b3230617
Ref: config confval-numfig230990
Ref: 146230990
Ref: config confval-numfig_format231377
Ref: 145231377
Ref: config confval-numfig_secnum_depth231862
Ref: 276231862
Ref: config confval-smartquotes232791
Ref: 277232791
Ref: config confval-smartquotes_action233601
Ref: 27a233601
Ref: config confval-smartquotes_excludes234018
Ref: 279234018
Ref: config confval-tls_verify235076
Ref: 27b235076
Ref: config confval-tls_cacerts235217
Ref: 27c235217
Ref: General configuration-Footnote-1235572
Ref: General configuration-Footnote-2235854
Ref: General configuration-Footnote-3235921
Ref: General configuration-Footnote-4235978
Ref: General configuration-Footnote-5236040
Ref: General configuration-Footnote-6236116
Node: Project information236190
Ref: config project-information236345
Ref: 27d236345
Ref: config confval-project236394
Ref: 27e236394
Ref: config confval-author236467
Ref: 27f236467
Ref: config confval-copyright236586
Ref: 280236586
Ref: config confval-version236690
Ref: 281236690
Ref: config confval-release236893
Ref: 282236893
Ref: config confval-today237276
Ref: 283237276
Ref: config confval-today_fmt237307
Ref: 161237307
Ref: config confval-highlight_language237876
Ref: 128237876
Ref: config confval-highlight_options238525
Ref: 284238525
Ref: config confval-pygments_style238842
Ref: 285238842
Ref: config confval-add_function_parentheses239201
Ref: 190239201
Ref: config confval-add_module_names239462
Ref: 286239462
Ref: config confval-show_authors239750
Ref: 168239750
Ref: config confval-modindex_common_prefix239939
Ref: 287239939
Ref: config confval-trim_footnote_reference_space240356
Ref: 288240356
Ref: config confval-trim_doctest_flags240599
Ref: 289240599
Ref: Project information-Footnote-1241116
Node: Options for internationalization241157
Ref: config options-for-internationalization241314
Ref: 28a241314
Ref: config intl-options241314
Ref: 28b241314
Ref: config confval-language241524
Ref: 86241524
Ref: config confval-locale_dirs243599
Ref: 28c243599
Ref: config confval-gettext_compact244371
Ref: 28d244371
Ref: config confval-gettext_uuid244736
Ref: 28e244736
Ref: config confval-gettext_location245308
Ref: 28f245308
Ref: config confval-gettext_auto_build245502
Ref: 290245502
Ref: config confval-gettext_additional_targets245679
Ref: 291245679
Ref: config confval-figure_language_filename246205
Ref: 292246205
Node: Options for HTML output247288
Ref: config html-options247454
Ref: 206247454
Ref: config options-for-html-output247454
Ref: 293247454
Ref: config confval-html_theme247627
Ref: 294247627
Ref: config confval-html_theme_options247827
Ref: 295247827
Ref: config confval-html_theme_path248101
Ref: 297248101
Ref: config confval-html_style248341
Ref: 263248341
Ref: config confval-html_title248791
Ref: 298248791
Ref: config confval-html_short_title249119
Ref: 299249119
Ref: config confval-html_context249379
Ref: 29a249379
Ref: config confval-html_logo249660
Ref: 29b249660
Ref: config confval-html_favicon250137
Ref: 29c250137
Ref: config confval-html_static_path250695
Ref: 26b250695
Ref: config confval-html_extra_path251311
Ref: 26c251311
Ref: config confval-html_last_updated_fmt252063
Ref: 29d252063
Ref: config confval-html_use_smartypants252352
Ref: 278252352
Ref: config confval-html_add_permalinks252611
Ref: 29e252611
Ref: config confval-html_sidebars253193
Ref: 29f253193
Ref: config confval-html_additional_pages255748
Ref: 2a1255748
Ref: config confval-html_domain_indices256145
Ref: 2a2256145
Ref: config confval-html_use_index256643
Ref: 2a3256643
Ref: config confval-html_split_index256785
Ref: 2a4256785
Ref: config confval-html_copy_source257020
Ref: 2a5257020
Ref: config confval-html_show_sourcelink257395
Ref: 2a0257395
Ref: config confval-html_sourcelink_suffix257628
Ref: 2a6257628
Ref: config confval-html_use_opensearch257860
Ref: 2a7257860
Ref: config confval-html_file_suffix258317
Ref: 2a8258317
Ref: config confval-html_link_suffix258483
Ref: 2a9258483
Ref: config confval-html_show_copyright258749
Ref: 2aa258749
Ref: config confval-html_show_sphinx258918
Ref: 2ab258918
Ref: config confval-html_output_encoding259086
Ref: 2ac259086
Ref: config confval-html_compact_lists259343
Ref: 2ad259343
Ref: config confval-html_secnumber_suffix259677
Ref: 2ae259677
Ref: config confval-html_search_language259876
Ref: 2af259876
Ref: config confval-html_search_options261244
Ref: 2b0261244
Ref: config type261546
Ref: 2b1261546
Ref: config dic-enc-option262542
Ref: 2b2262542
Ref: config dict-option262626
Ref: 2b3262626
Ref: config lib-option262715
Ref: 2b4262715
Ref: config user-dic-option263148
Ref: 2b5263148
Ref: config user-dic-enc-option263245
Ref: 2b6263245
Ref: config confval-html_search_scorer263720
Ref: 2b7263720
Ref: config confval-html_scaled_image_link263957
Ref: 2b8263957
Ref: config confval-html_experimental_html5_writer264234
Ref: 2b9264234
Ref: Options for HTML output-Footnote-1264472
Ref: Options for HTML output-Footnote-2264754
Ref: Options for HTML output-Footnote-3264793
Ref: Options for HTML output-Footnote-4264844
Ref: Options for HTML output-Footnote-5264891
Node: Options for HTML help output264935
Ref: config htmlhelp-options265098
Ref: 2ba265098
Ref: config options-for-html-help-output265098
Ref: 2bb265098
Ref: config confval-htmlhelp_basename265165
Ref: 2bc265165
Node: Options for Apple Help output265287
Ref: config options-for-apple-help-output265450
Ref: 2bd265450
Ref: config applehelp-options265450
Ref: 2be265450
Ref: config confval-applehelp_bundle_name266102
Ref: 2bf266102
Ref: config confval-applehelp_bundle_id266241
Ref: 2c0266241
Ref: config confval-applehelp_dev_region266422
Ref: 2c1266422
Ref: config confval-applehelp_bundle_version266572
Ref: 2c2266572
Ref: config confval-applehelp_icon266687
Ref: 2c3266687
Ref: config confval-applehelp_kb_product266962
Ref: 2c4266962
Ref: config confval-applehelp_kb_url267124
Ref: 2c5267124
Ref: config confval-applehelp_remote_url267606
Ref: 2c6267606
Ref: config confval-applehelp_index_anchors268133
Ref: 2c7268133
Ref: config confval-applehelp_min_term_length268551
Ref: 2c8268551
Ref: config confval-applehelp_stopwords268732
Ref: 2c9268732
Ref: config confval-applehelp_locale269694
Ref: 2ca269694
Ref: config confval-applehelp_title270010
Ref: 2cb270010
Ref: config confval-applehelp_codesign_identity270128
Ref: 2cc270128
Ref: config confval-applehelp_codesign_flags270477
Ref: 2cd270477
Ref: config confval-applehelp_indexer_path270831
Ref: 2ce270831
Ref: config confval-applehelp_codesign_path270962
Ref: 2cf270962
Ref: config confval-applehelp_disable_external_tools271103
Ref: 21b271103
Node: Options for epub output271506
Ref: config options-for-epub-output271665
Ref: 2d0271665
Ref: config epub-options271665
Ref: 2d1271665
Ref: config confval-epub_basename271990
Ref: 2d2271990
Ref: config confval-epub_theme272118
Ref: 2d3272118
Ref: config confval-epub_theme_options272418
Ref: 2d4272418
Ref: config confval-epub_title272692
Ref: 2d5272692
Ref: config confval-epub_description272865
Ref: 2d6272865
Ref: config confval-epub_author273079
Ref: 2d7273079
Ref: config confval-epub_contributor273245
Ref: 2d8273245
Ref: config confval-epub_language273562
Ref: 2d9273562
Ref: config confval-epub_publisher273761
Ref: 2da273761
Ref: config confval-epub_copyright274001
Ref: 2db274001
Ref: config confval-epub_identifier274180
Ref: 2dc274180
Ref: config confval-epub_scheme274477
Ref: 2dd274477
Ref: config confval-epub_uid274789
Ref: 2de274789
Ref: config confval-epub_cover275073
Ref: 2df275073
Ref: config confval-epub_guide275679
Ref: 2e0275679
Ref: config confval-epub_pre_files276286
Ref: 2e1276286
Ref: config confval-epub_post_files276679
Ref: 2e2276679
Ref: config confval-epub_exclude_files277025
Ref: 2e3277025
Ref: config confval-epub_tocdepth277228
Ref: 2e4277228
Ref: config confval-epub_tocdup277490
Ref: 2e5277490
Ref: config confval-epub_tocscope277820
Ref: 2e6277820
Ref: config confval-epub_fix_images278159
Ref: 2e7278159
Ref: config confval-epub_max_image_width278623
Ref: 2e8278623
Ref: config confval-epub_show_urls279035
Ref: 2e9279035
Ref: config confval-epub_use_index279577
Ref: 2ea279577
Ref: config confval-epub_writing_mode279806
Ref: 2eb279806
Ref: Options for epub output-Footnote-1281103
Ref: Options for epub output-Footnote-2281134
Ref: Options for epub output-Footnote-3281190
Node: Options for LaTeX output281266
Ref: config latex-options281419
Ref: 229281419
Ref: config options-for-latex-output281419
Ref: 2ec281419
Ref: config confval-latex_engine281562
Ref: a6281562
Ref: config confval-latex_documents283194
Ref: 228283194
Ref: config confval-latex_logo285591
Ref: 2ef285591
Ref: config confval-latex_toplevel_sectioning285831
Ref: 2f0285831
Ref: config confval-latex_appendices286488
Ref: 2f1286488
Ref: config confval-latex_domain_indices286603
Ref: 2f2286603
Ref: config confval-latex_show_pagerefs286983
Ref: 2f3286983
Ref: config confval-latex_show_urls287202
Ref: 2f4287202
Ref: config confval-latex_use_latex_multicolumn287823
Ref: 2f5287823
Ref: config confval-latex_elements288550
Ref: be288550
Ref: config confval-latex_docclass299964
Ref: 2f8299964
Ref: config confval-latex_additional_files300476
Ref: 2f9300476
Node: Options for text output301187
Ref: config text-options301347
Ref: 2fa301347
Ref: config options-for-text-output301347
Ref: 2fb301347
Ref: config confval-text_newlines301442
Ref: 2fc301442
Ref: config confval-text_sectionchars301855
Ref: 2fd301855
Ref: config confval-text_add_secnumbers302153
Ref: 2fe302153
Ref: config confval-text_secnumber_suffix302336
Ref: 2ff302336
Node: Options for manual page output302550
Ref: config options-for-manual-page-output302712
Ref: 300302712
Ref: config man-options302712
Ref: 301302712
Ref: config confval-man_pages302830
Ref: 232302830
Ref: config confval-man_show_urls304047
Ref: 302304047
Node: Options for Texinfo output304184
Ref: config texinfo-options304348
Ref: 303304348
Ref: config options-for-texinfo-output304348
Ref: 304304348
Ref: config confval-texinfo_documents304454
Ref: 237304454
Ref: config confval-texinfo_appendices306235
Ref: 305306235
Ref: config confval-texinfo_domain_indices306378
Ref: 306306378
Ref: config confval-texinfo_show_urls306760
Ref: 307306760
Ref: config confval-texinfo_no_detailmenu307053
Ref: 308307053
Ref: config confval-texinfo_elements307298
Ref: 309307298
Node: Options for QtHelp output308516
Ref: config options-for-qthelp-output308683
Ref: 30a308683
Ref: config qthelp-options308683
Ref: 30b308683
Ref: config confval-qthelp_basename308881
Ref: 30c308881
Ref: config confval-qthelp_namespace309013
Ref: 30d309013
Ref: config confval-qthelp_theme309169
Ref: 30e309169
Ref: config confval-qthelp_theme_options309285
Ref: 30f309285
Node: Options for the linkcheck builder309535
Ref: config options-for-the-linkcheck-builder309703
Ref: 310309703
Ref: config confval-linkcheck_ignore309782
Ref: 311309782
Ref: config confval-linkcheck_retries310038
Ref: 312310038
Ref: config confval-linkcheck_timeout310241
Ref: 313310241
Ref: config confval-linkcheck_workers310435
Ref: 314310435
Ref: config confval-linkcheck_anchors310596
Ref: 315310596
Ref: config confval-linkcheck_anchors_ignore310856
Ref: 316310856
Node: Options for the XML builder311343
Ref: config options-for-the-xml-builder311512
Ref: 317311512
Ref: config confval-xml_pretty311579
Ref: 318311579
Node: Options for the C++ domain311702
Ref: config options-for-the-c-domain311829
Ref: 319311829
Ref: config cpp-config311829
Ref: 1e3311829
Ref: config confval-cpp_index_common_prefix311894
Ref: 31a311894
Ref: config confval-cpp_id_attributes312105
Ref: 31b312105
Ref: config confval-cpp_paren_attributes312356
Ref: 31c312356
Node: Example of configuration file312828
Ref: config example-of-configuration-file312963
Ref: 31d312963
Node: Internationalization324177
Ref: intl doc324304
Ref: 31e324304
Ref: intl intl324304
Ref: 24b324304
Ref: intl internationalization324304
Ref: 31f324304
Ref: Internationalization-Footnote-1324991
Node: Sphinx internationalization details325021
Ref: intl sphinx-internationalization-details325150
Ref: 320325150
Ref: Sphinx internationalization details-Footnote-1327575
Ref: Sphinx internationalization details-Footnote-2327721
Node: Translating with sphinx-intl327777
Ref: intl translating-with-sphinx-intl327959
Ref: 321327959
Node: Quick guide328112
Ref: intl quick-guide328208
Ref: 322328208
Ref: Quick guide-Footnote-1329909
Ref: Quick guide-Footnote-2329958
Node: Translating330007
Ref: intl translating330149
Ref: 323330149
Node: Update your po files by new pot files330979
Ref: intl update-your-po-files-by-new-pot-files331101
Ref: 324331101
Node: Using Transifex service for team translation331469
Ref: intl using-transifex-service-for-team-translation331660
Ref: 325331660
Ref: Using Transifex service for team translation-Footnote-1334519
Ref: Using Transifex service for team translation-Footnote-2334554
Ref: Using Transifex service for team translation-Footnote-3334608
Ref: Using Transifex service for team translation-Footnote-4334664
Node: Contributing to Sphinx reference translation334699
Ref: intl contributing-to-sphinx-reference-translation334853
Ref: 326334853
Ref: Contributing to Sphinx reference translation-Footnote-1335418
Ref: Contributing to Sphinx reference translation-Footnote-2335479
Ref: Contributing to Sphinx reference translation-Footnote-3335514
Node: HTML theming support335575
Ref: theming transifex-client-v0-8-mdash-transifex-documentation335695
Ref: 327335695
Ref: theming doc335695
Ref: 64335695
Ref: theming html-theming-support335695
Ref: 328335695
Node: Using a theme336345
Ref: theming using-a-theme336438
Ref: 329336438
Node: Builtin themes338023
Ref: theming id1338140
Ref: 32a338140
Ref: theming builtin-themes338140
Ref: 296338140
Ref: Builtin themes-Footnote-1347404
Ref: Builtin themes-Footnote-2347451
Ref: Builtin themes-Footnote-3347520
Ref: Builtin themes-Footnote-4347555
Ref: Builtin themes-Footnote-5347634
Ref: Builtin themes-Footnote-6347666
Node: Creating themes347731
Ref: theming creating-themes347876
Ref: 32b347876
Ref: Creating themes-Footnote-1350077
Node: Distribute your theme as a python package350226
Ref: theming distribute-your-theme350375
Ref: 32c350375
Ref: theming distribute-your-theme-as-a-python-package350375
Ref: 32d350375
Node: Templating351541
Ref: theming templating351654
Ref: 32e351654
Node: Static templates352315
Ref: theming static-templates352428
Ref: 330352428
Node: Third Party Themes353288
Ref: theming third-party-themes353413
Ref: 331353413
Ref: Third Party Themes-Footnote-1354076
Ref: Third Party Themes-Footnote-2354130
Ref: Third Party Themes-Footnote-3354184
Ref: Third Party Themes-Footnote-4354242
Ref: Third Party Themes-Footnote-5354312
Node: Setuptools integration354347
Ref: setuptools doc354460
Ref: 65354460
Ref: setuptools id6354460
Ref: 332354460
Ref: setuptools setuptools-integration354460
Ref: 333354460
Ref: setuptools setuptools354460
Ref: 334354460
Node: Using setuptools integration354697
Ref: setuptools using-setuptools-integration354827
Ref: 335354827
Node: Options for setuptools integration356262
Ref: setuptools options-for-setuptools-integration356392
Ref: 336356392
Ref: setuptools confval-fresh-env356473
Ref: 337356473
Ref: setuptools confval-all-files356745
Ref: 338356745
Ref: setuptools confval-source-dir357005
Ref: 339357005
Ref: setuptools confval-build-dir357489
Ref: 33a357489
Ref: setuptools confval-config-dir357695
Ref: 33b357695
Ref: setuptools confval-builder358076
Ref: 33c358076
Ref: setuptools confval-warning-is-error358405
Ref: 33d358405
Ref: setuptools confval-project358694
Ref: 7e358694
Ref: setuptools confval-version358815
Ref: 82358815
Ref: setuptools confval-release358926
Ref: 84358926
Ref: setuptools confval-today359062
Ref: 162359062
Ref: setuptools confval-link-index359228
Ref: 33e359228
Ref: setuptools confval-copyright359508
Ref: 80359508
Ref: setuptools confval-pdb359620
Ref: 33f359620
Node: Templating<2>359748
Ref: templating id1359860
Ref: 340359860
Ref: templating doc359860
Ref: 32f359860
Ref: templating templating359860
Ref: 66359860
Ref: Templating<2>-Footnote-1360356
Node: Do I need to use Sphinx’s templates to produce HTML?360387
Ref: templating do-i-need-to-use-sphinx-s-templates-to-produce-html360530
Ref: 341360530
Node: Jinja/Sphinx Templating Primer361216
Ref: templating jinja-sphinx-templating-primer361402
Ref: 343361402
Node: Working with the builtin templates363509
Ref: templating working-with-the-builtin-templates363632
Ref: 344363632
Node: Blocks363982
Ref: templating blocks364094
Ref: 345364094
Node: Configuration Variables<2>367651
Ref: templating configuration-variables367788
Ref: 347367788
Ref: templating reldelim1367962
Ref: 346367962
Ref: templating reldelim2368165
Ref: 348368165
Ref: templating script_files368487
Ref: 349368487
Node: Helper Functions368637
Ref: templating helper-functions368784
Ref: 34a368784
Ref: templating pathto368972
Ref: 34b368972
Ref: templating hasdoc369274
Ref: 34c369274
Ref: templating sidebar369366
Ref: 34d369366
Ref: templating relbar369427
Ref: 34e369427
Node: Global Variables369492
Ref: templating global-variables369604
Ref: 34f369604
Ref: templating builder369825
Ref: 350369825
Ref: templating copyright369912
Ref: 351369912
Ref: templating docstitle369973
Ref: 352369973
Ref: templating embedded370161
Ref: 353370161
Ref: templating favicon370409
Ref: 354370409
Ref: templating file_suffix370496
Ref: 355370496
Ref: templating has_source370718
Ref: 356370718
Ref: templating language370845
Ref: 357370845
Ref: templating last_updated370904
Ref: 358370904
Ref: templating logo370950
Ref: 359370950
Ref: templating master_doc371037
Ref: 35a371037
Ref: templating pagename371141
Ref: 35b371141
Ref: templating project371416
Ref: 35c371416
Ref: templating release371473
Ref: 35d371473
Ref: templating rellinks371530
Ref: 35e371530
Ref: templating shorttitle371871
Ref: 35f371871
Ref: templating show_source371941
Ref: 360371941
Ref: templating sphinx_version372026
Ref: 361372026
Ref: templating style372095
Ref: 362372095
Ref: templating title372204
Ref: 363372204
Ref: templating use_opensearch372296
Ref: 364372296
Ref: templating version372373
Ref: 365372373
Ref: templating body372799
Ref: 366372799
Ref: templating display_toc372945
Ref: 367372945
Ref: templating meta373038
Ref: 368373038
Ref: templating metatags373134
Ref: 369373134
Ref: templating next373212
Ref: 36a373212
Ref: templating page_source_suffix373584
Ref: 36b373584
Ref: templating parents373791
Ref: 36c373791
Ref: templating prev373907
Ref: 36d373907
Ref: templating sourcename373978
Ref: 36e373978
Ref: templating toc374266
Ref: 36f374266
Ref: templating toctree374373
Ref: 370374373
Ref: Global Variables-Footnote-1375138
Node: LaTeX customization375212
Ref: latex latex375318
Ref: 371375318
Ref: latex doc375318
Ref: 2ed375318
Ref: latex latex-customization375318
Ref: 372375318
Ref: latex module-latex375318
Ref: 2c375318
Node: Basic customization375595
Ref: latex latex-basic375707
Ref: 2ee375707
Ref: latex basic-customization375707
Ref: 373375707
Node: The LaTeX style file options377030
Ref: latex latexsphinxsetup377180
Ref: 2f6377180
Ref: latex the-latex-style-file-options377180
Ref: 374377180
Node: The sphinxsetup interface377323
Ref: latex the-sphinxsetup-interface377451
Ref: 375377451
Node: The available styling options379459
Ref: latex the-available-styling-options379587
Ref: 376379587
Ref: latex latexsphinxsetuphmargin379662
Ref: 2f7379662
Ref: The available styling options-Footnote-1386813
Ref: The available styling options-Footnote-2386898
Ref: The available styling options-Footnote-3386977
Ref: The available styling options-Footnote-4387053
Ref: The available styling options-Footnote-5387129
Node: LaTeX macros and environments387203
Ref: latex latex-macros-and-environments387325
Ref: 377387325
Node: Macros387672
Ref: latex macros387765
Ref: 378387765
Node: Environments389816
Ref: latex environments389928
Ref: 379389928
Ref: Environments-Footnote-1392987
Ref: Environments-Footnote-2393064
Ref: Environments-Footnote-3393142
Ref: Environments-Footnote-4393221
Node: Miscellany393297
Ref: latex miscellany393394
Ref: 37a393394
Node: Markdown support394552
Ref: markdown doc394662
Ref: 37b394662
Ref: markdown markdown394662
Ref: 26a394662
Ref: markdown markdown-support394662
Ref: 37c394662
Ref: Markdown support-Footnote-1395109
Ref: Markdown support-Footnote-2395163
Ref: Markdown support-Footnote-3395228
Ref: Markdown support-Footnote-4395274
Node: Configuration395305
Ref: markdown configuration395371
Ref: 37d395371
Ref: Configuration-Footnote-1396195
Node: Sphinx Extensions396269
Ref: extensions extensions396392
Ref: 204396392
Ref: extensions doc396392
Ref: 60396392
Ref: extensions sphinx-extensions396392
Ref: 37e396392
Node: Builtin Sphinx extensions396867
Ref: ext/builtins doc396977
Ref: 37f396977
Ref: ext/builtins builtin-sphinx-extensions396977
Ref: 380396977
Node: sphinx ext autodoc – Include documentation from docstrings399191
Ref: ext/autodoc module-sphinx ext autodoc399394
Ref: 18399394
Ref: ext/autodoc sphinx-ext-autodoc-include-documentation-from-docstrings399394
Ref: 381399394
Ref: ext/autodoc doc399394
Ref: 382399394
Ref: ext/autodoc directive-automodule401569
Ref: 385401569
Ref: ext/autodoc directive-autoclass401617
Ref: 383401617
Ref: ext/autodoc directive-autoexception401664
Ref: 386401664
Ref: ext/autodoc directive-autofunction408036
Ref: 38a408036
Ref: ext/autodoc directive-autodata408086
Ref: 38b408086
Ref: ext/autodoc directive-automethod408132
Ref: 384408132
Ref: ext/autodoc directive-autoattribute408180
Ref: 38c408180
Ref: ext/autodoc confval-autoclass_content410889
Ref: 38d410889
Ref: ext/autodoc confval-autodoc_member_order411805
Ref: 388411805
Ref: ext/autodoc confval-autodoc_default_flags412290
Ref: 387412290
Ref: ext/autodoc confval-autodoc_docstring_signature413139
Ref: 38e413139
Ref: ext/autodoc confval-autodoc_mock_imports413768
Ref: 389413768
Ref: ext/autodoc confval-autodoc_warningiserror414348
Ref: 38f414348
Ref: ext/autodoc confval-autodoc_inherit_docstrings414634
Ref: 390414634
Ref: sphinx ext autodoc – Include documentation from docstrings-Footnote-1415009
Ref: sphinx ext autodoc – Include documentation from docstrings-Footnote-2415088
Node: Docstring preprocessing415154
Ref: ext/autodoc docstring-preprocessing415299
Ref: 391415299
Ref: ext/autodoc event-autodoc-process-docstring415417
Ref: 392415417
Ref: ext/autodoc event-autodoc-process-signature416516
Ref: 393416516
Ref: ext/autodoc sphinx ext autodoc cut_lines418111
Ref: 394418111
Ref: ext/autodoc sphinx ext autodoc between418664
Ref: 395418664
Node: Skipping members419141
Ref: ext/autodoc skipping-members419286
Ref: 396419286
Ref: ext/autodoc event-autodoc-skip-member419493
Ref: 397419493
Node: sphinx ext autosectionlabel – Allow reference sections using its title420918
Ref: ext/autosectionlabel doc421183
Ref: 398421183
Ref: ext/autosectionlabel module-sphinx ext autosectionlabel421183
Ref: 19421183
Ref: ext/autosectionlabel sphinx-ext-autosectionlabel-allow-reference-sections-using-its-title421183
Ref: 399421183
Node: Configuration<2>422003
Ref: ext/autosectionlabel configuration422128
Ref: 39a422128
Ref: ext/autosectionlabel confval-autosectionlabel_prefix_document422175
Ref: 39b422175
Node: sphinx ext autosummary – Generate autodoc summaries422569
Ref: ext/autosummary module-sphinx ext autosummary422824
Ref: 1a422824
Ref: ext/autosummary doc422824
Ref: 39c422824
Ref: ext/autosummary sphinx-ext-autosummary-generate-autodoc-summaries422824
Ref: 39d422824
Ref: ext/autosummary directive-autosummary423921
Ref: e1423921
Node: sphinx-autogen – generate autodoc stub pages426721
Ref: ext/autosummary sphinx-autogen-generate-autodoc-stub-pages426901
Ref: 3a1426901
Node: Generating stub pages automatically427823
Ref: ext/autosummary generating-stub-pages-automatically428033
Ref: 3a2428033
Ref: ext/autosummary confval-autosummary_generate428232
Ref: 39e428232
Node: Customizing templates428614
Ref: ext/autosummary customizing-templates428769
Ref: 3a0428769
Ref: ext/autosummary name429685
Ref: 3a3429685
Ref: ext/autosummary objname429781
Ref: 3a4429781
Ref: ext/autosummary fullname429865
Ref: 3a5429865
Ref: ext/autosummary module429966
Ref: 3a6429966
Ref: ext/autosummary class430043
Ref: 3a7430043
Ref: ext/autosummary underline430167
Ref: 3a8430167
Ref: ext/autosummary members430288
Ref: 3a9430288
Ref: ext/autosummary functions430420
Ref: 3aa430420
Ref: ext/autosummary classes430629
Ref: 3ab430629
Ref: ext/autosummary exceptions430749
Ref: 3ac430749
Ref: ext/autosummary methods430875
Ref: 3ad430875
Ref: ext/autosummary attributes430994
Ref: 3ae430994
Ref: ext/autosummary escape431170
Ref: 3af431170
Ref: Customizing templates-Footnote-1431802
Node: sphinx ext coverage – Collect doc coverage stats431860
Ref: ext/coverage doc432100
Ref: 3b0432100
Ref: ext/coverage escape-filter432100
Ref: 3b1432100
Ref: ext/coverage module-sphinx ext coverage432100
Ref: 1b432100
Ref: ext/coverage sphinx-ext-coverage-collect-doc-coverage-stats432100
Ref: 3b2432100
Ref: ext/coverage sphinx ext coverage CoverageBuilder432304
Ref: 3b3432304
Ref: ext/coverage confval-coverage_ignore_modules432611
Ref: 3b4432611
Ref: ext/coverage confval-coverage_ignore_functions432661
Ref: 3b5432661
Ref: ext/coverage confval-coverage_ignore_classes432713
Ref: 3b6432713
Ref: ext/coverage confval-coverage_c_path432763
Ref: 3b7432763
Ref: ext/coverage confval-coverage_c_regexes432805
Ref: 3b8432805
Ref: ext/coverage confval-coverage_ignore_c_items432850
Ref: 3b9432850
Ref: ext/coverage confval-coverage_write_headline432900
Ref: 3ba432900
Ref: ext/coverage confval-coverage_skip_undoc_in_source433025
Ref: 3bb433025
Node: sphinx ext doctest – Test snippets in the documentation433212
Ref: ext/doctest sphinx-ext-doctest-test-snippets-in-the-documentation433455
Ref: 3bc433455
Ref: ext/doctest doc433455
Ref: 63433455
Ref: ext/doctest module-sphinx ext doctest433455
Ref: 1c433455
Node: Directives<3>434566
Ref: ext/doctest directives434698
Ref: 3bd434698
Ref: ext/doctest directive-testsetup435019
Ref: 3be435019
Ref: ext/doctest directive-testcleanup435233
Ref: 3bf435233
Ref: ext/doctest directive-doctest435476
Ref: 3c0435476
Ref: ext/doctest directive-testcode437707
Ref: 3c2437707
Ref: ext/doctest directive-testoutput438648
Ref: 3c3438648
Ref: Directives<3>-Footnote-1440055
Node: Configuration<3>440124
Ref: ext/doctest configuration440256
Ref: 3c4440256
Ref: ext/doctest confval-doctest_default_flags440367
Ref: 3c1440367
Ref: ext/doctest confval-doctest_path441002
Ref: 3c5441002
Ref: ext/doctest confval-doctest_global_setup441186
Ref: 3c6441186
Ref: ext/doctest confval-doctest_global_cleanup441490
Ref: 3c7441490
Ref: ext/doctest confval-doctest_test_doctest_blocks441800
Ref: 3c8441800
Node: sphinx ext extlinks – Markup to shorten external links443297
Ref: ext/extlinks doc443550
Ref: 3c9443550
Ref: ext/extlinks module-sphinx ext extlinks443550
Ref: 1d443550
Ref: ext/extlinks sphinx-ext-extlinks-markup-to-shorten-external-links443550
Ref: 3ca443550
Ref: ext/extlinks confval-extlinks444380
Ref: 3cb444380
Node: sphinx ext githubpages – Publish HTML docs in GitHub Pages445895
Ref: ext/githubpages module-sphinx ext githubpages446134
Ref: 1e446134
Ref: ext/githubpages doc446134
Ref: 3cc446134
Ref: ext/githubpages sphinx-ext-githubpages-publish-html-docs-in-github-pages446134
Ref: 3cd446134
Node: sphinx ext graphviz – Add Graphviz graphs446412
Ref: ext/graphviz module-sphinx ext graphviz446657
Ref: 1f446657
Ref: ext/graphviz doc446657
Ref: 3ce446657
Ref: ext/graphviz sphinx-ext-graphviz-add-graphviz-graphs446657
Ref: 3cf446657
Ref: ext/graphviz directive-graphviz446888
Ref: 3d0446888
Ref: ext/graphviz directive-graph447711
Ref: 3d2447711
Ref: ext/graphviz directive-digraph448257
Ref: 3d3448257
Ref: ext/graphviz confval-graphviz_dot449407
Ref: 3d4449407
Ref: ext/graphviz confval-graphviz_dot_args449969
Ref: 3d5449969
Ref: ext/graphviz confval-graphviz_output_format450249
Ref: 3d1450249
Ref: sphinx ext graphviz – Add Graphviz graphs-Footnote-1451025
Node: sphinx ext ifconfig – Include content based on configuration451055
Ref: ext/ifconfig doc451317
Ref: 3d6451317
Ref: ext/ifconfig module-sphinx ext ifconfig451317
Ref: 20451317
Ref: ext/ifconfig sphinx-ext-ifconfig-include-content-based-on-configuration451317
Ref: 3d7451317
Ref: ext/ifconfig directive-ifconfig451530
Ref: 3d8451530
Node: sphinx ext imgconverter – Convert images to appropriate format for builders452419
Ref: ext/imgconverter module-sphinx ext imgconverter452701
Ref: 21452701
Ref: ext/imgconverter doc452701
Ref: 3da452701
Ref: ext/imgconverter sphinx-ext-imgconverter-convert-images-to-appropriate-format-for-builders452701
Ref: 3db452701
Ref: sphinx ext imgconverter – Convert images to appropriate format for builders-Footnote-1453271
Node: Configuration<4>453324
Ref: ext/imgconverter configuration453454
Ref: 3dc453454
Ref: ext/imgconverter imagemagick453454
Ref: 3dd453454
Ref: ext/imgconverter confval-image_converter453503
Ref: 3de453503
Ref: ext/imgconverter confval-image_converter_args453655
Ref: 3df453655
Node: sphinx ext inheritance_diagram – Include inheritance diagrams453823
Ref: ext/inheritance module-sphinx ext inheritance_diagram454109
Ref: 23454109
Ref: ext/inheritance doc454109
Ref: 3e0454109
Ref: ext/inheritance sphinx-ext-inheritance-diagram-include-inheritance-diagrams454109
Ref: 3e1454109
Ref: ext/inheritance directive-inheritance-diagram454413
Ref: 3e2454413
Ref: ext/inheritance confval-inheritance_graph_attrs457245
Ref: 3e3457245
Ref: ext/inheritance confval-inheritance_node_attrs457535
Ref: 3e4457535
Ref: ext/inheritance confval-inheritance_edge_attrs457837
Ref: 3e5457837
Ref: ext/inheritance confval-inheritance_alias457959
Ref: 3e6457959
Node: sphinx ext intersphinx – Link to other projects’ documentation458322
Ref: ext/intersphinx sphinx-ext-intersphinx-link-to-other-projects-documentation458588
Ref: 3e7458588
Ref: ext/intersphinx doc458588
Ref: 3e8458588
Ref: ext/intersphinx module-sphinx ext intersphinx458588
Ref: 24458588
Node: Configuring Intersphinx460382
Ref: ext/intersphinx configuring-intersphinx460565
Ref: 3e9460565
Ref: ext/intersphinx confval-intersphinx_mapping460795
Ref: 5e460795
Ref: ext/intersphinx confval-intersphinx_cache_limit464115
Ref: 3ea464115
Ref: ext/intersphinx confval-intersphinx_timeout464352
Ref: 3eb464352
Node: Showing all links of an Intersphinx mapping file464686
Ref: ext/intersphinx showing-all-links-of-an-intersphinx-mapping-file464869
Ref: 3ec464869
Node: sphinx ext linkcode – Add external links to source code465395
Ref: ext/linkcode module-sphinx ext linkcode465620
Ref: 26465620
Ref: ext/linkcode doc465620
Ref: 3ed465620
Ref: ext/linkcode sphinx-ext-linkcode-add-external-links-to-source-code465620
Ref: 3ee465620
Ref: ext/linkcode confval-linkcode_resolve466230
Ref: 3ef466230
Node: Math support in Sphinx467378
Ref: ext/math doc467606
Ref: 61467606
Ref: ext/math module-sphinx ext mathbase467606
Ref: 27467606
Ref: ext/math math-support467606
Ref: 170467606
Ref: ext/math math-support-in-sphinx467606
Ref: 3f0467606
Ref: ext/math confval-math_number_all468641
Ref: 3f1468641
Ref: ext/math confval-math_eqref_format468800
Ref: 3f2468800
Ref: ext/math confval-math_numfig469071
Ref: 3f3469071
Ref: ext/math role-math469494
Ref: 3f5469494
Ref: ext/math directive-math469640
Ref: 3f6469640
Ref: ext/math role-eq471312
Ref: 3f4471312
Ref: Math support in Sphinx-Footnote-1471948
Node: sphinx ext imgmath – Render math as images472010
Ref: ext/math sphinx-ext-imgmath-render-math-as-images472171
Ref: 3f7472171
Ref: ext/math module-sphinx ext imgmath472171
Ref: 22472171
Ref: ext/math confval-imgmath_image_format472584
Ref: 3f8472584
Ref: ext/math confval-imgmath_latex472745
Ref: 3f9472745
Ref: ext/math confval-imgmath_dvipng473458
Ref: 3fb473458
Ref: ext/math confval-imgmath_dvisvgm473779
Ref: 3fc473779
Ref: ext/math confval-imgmath_latex_args474097
Ref: 3fa474097
Ref: ext/math confval-imgmath_latex_preamble474234
Ref: 3fd474234
Ref: ext/math confval-imgmath_dvipng_args474528
Ref: 3fe474528
Ref: ext/math confval-imgmath_dvisvgm_args474924
Ref: 3ff474924
Ref: ext/math confval-imgmath_use_preview475157
Ref: 400475157
Ref: ext/math confval-imgmath_add_tooltips475920
Ref: 401475920
Ref: ext/math confval-imgmath_font_size476079
Ref: 402476079
Ref: sphinx ext imgmath – Render math as images-Footnote-1476285
Ref: sphinx ext imgmath – Render math as images-Footnote-2476338
Ref: sphinx ext imgmath – Render math as images-Footnote-3476374
Node: sphinx ext mathjax – Render math via JavaScript476437
Ref: ext/math module-sphinx ext mathjax476655
Ref: 28476655
Ref: ext/math sphinx-ext-mathjax-render-math-via-javascript476655
Ref: 403476655
Ref: ext/math confval-mathjax_path477064
Ref: 404477064
Ref: sphinx ext mathjax – Render math via JavaScript-Footnote-1478003
Ref: sphinx ext mathjax – Render math via JavaScript-Footnote-2478036
Ref: sphinx ext mathjax – Render math via JavaScript-Footnote-3478062
Node: sphinx ext jsmath – Render math via JavaScript478116
Ref: ext/math sphinx-ext-jsmath-render-math-via-javascript478281
Ref: 405478281
Ref: ext/math module-sphinx ext jsmath478281
Ref: 25478281
Ref: ext/math confval-jsmath_path478534
Ref: 406478534
Ref: sphinx ext jsmath – Render math via JavaScript-Footnote-1479123
Node: sphinx ext napoleon – Support for NumPy and Google style docstrings479171
Ref: ext/napoleon sphinx-ext-napoleon-support-for-numpy-and-google-style-docstrings479384
Ref: 407479384
Ref: ext/napoleon doc479384
Ref: 408479384
Ref: ext/napoleon amsmath-latex-package479384
Ref: 409479384
Ref: ext/napoleon module-sphinx ext napoleon479384
Ref: 29479384
Node: Napoleon - Marching toward legible docstrings479691
Ref: ext/napoleon napoleon-marching-toward-legible-docstrings479867
Ref: 40a479867
Ref: Napoleon - Marching toward legible docstrings-Footnote-1481625
Ref: Napoleon - Marching toward legible docstrings-Footnote-2481674
Ref: Napoleon - Marching toward legible docstrings-Footnote-3481724
Ref: Napoleon - Marching toward legible docstrings-Footnote-4481781
Ref: Napoleon - Marching toward legible docstrings-Footnote-5481860
Ref: Napoleon - Marching toward legible docstrings-Footnote-6481926
Ref: Napoleon - Marching toward legible docstrings-Footnote-7482011
Ref: Napoleon - Marching toward legible docstrings-Footnote-8482090
Node: Getting Started<2>482156
Ref: ext/napoleon khan-academy482275
Ref: 40b482275
Ref: ext/napoleon getting-started482275
Ref: 40c482275
Node: Docstrings482680
Ref: ext/napoleon id1482826
Ref: 40d482826
Node: Docstring Sections483244
Ref: ext/napoleon docstring-sections483387
Ref: 40f483387
Ref: ext/napoleon sections483387
Ref: 40e483387
Node: Google vs NumPy484235
Ref: ext/napoleon google-vs-numpy484384
Ref: 410484384
Ref: Google vs NumPy-Footnote-1485920
Ref: Google vs NumPy-Footnote-2485986
Ref: Google vs NumPy-Footnote-3486065
Node: Type Annotations486150
Ref: ext/napoleon type-annotations486272
Ref: 411486272
Ref: Type Annotations-Footnote-1487464
Ref: Type Annotations-Footnote-2487514
Ref: Type Annotations-Footnote-3487564
Node: Configuration<5>487667
Ref: ext/napoleon python-2-3-compatible-annotations487843
Ref: 412487843
Ref: ext/napoleon configuration487843
Ref: 413487843
Ref: ext/napoleon confval-napoleon_google_docstring488706
Ref: 414488706
Ref: ext/napoleon confval-napoleon_numpy_docstring488887
Ref: 415488887
Ref: ext/napoleon confval-napoleon_include_init_with_doc489065
Ref: 416489065
Ref: ext/napoleon confval-napoleon_include_private_with_doc489626
Ref: 417489626
Ref: ext/napoleon confval-napoleon_include_special_with_doc490154
Ref: 418490154
Ref: ext/napoleon confval-napoleon_use_admonition_for_examples490752
Ref: 419490752
Ref: ext/napoleon confval-napoleon_use_admonition_for_notes491402
Ref: 41a491402
Ref: ext/napoleon confval-napoleon_use_admonition_for_references491814
Ref: 41b491814
Ref: ext/napoleon confval-napoleon_use_ivar492124
Ref: 41c492124
Ref: ext/napoleon confval-napoleon_use_param492684
Ref: 41d492684
Ref: ext/napoleon confval-napoleon_use_keyword493558
Ref: 41e493558
Ref: ext/napoleon confval-napoleon_use_rtype494166
Ref: 41f494166
Ref: Configuration<5>-Footnote-1494750
Ref: Configuration<5>-Footnote-2494807
Ref: Configuration<5>-Footnote-3494886
Ref: Configuration<5>-Footnote-4494965
Ref: Configuration<5>-Footnote-5495044
Ref: Configuration<5>-Footnote-6495123
Node: sphinx ext todo – Support for todo items495202
Ref: ext/todo doc495453
Ref: 420495453
Ref: ext/todo module-sphinx ext todo495453
Ref: 2a495453
Ref: ext/todo sphinx-ext-todo-support-for-todo-items495453
Ref: 421495453
Ref: ext/todo directive-todo495682
Ref: 422495682
Ref: ext/todo directive-todolist496078
Ref: 424496078
Ref: ext/todo confval-todo_include_todos496316
Ref: 423496316
Ref: ext/todo confval-todo_emit_warnings496509
Ref: 425496509
Ref: ext/todo confval-todo_link_only496699
Ref: 426496699
Ref: ext/todo event-todo-defined496945
Ref: 427496945
Node: sphinx ext viewcode – Add links to highlighted source code497112
Ref: ext/viewcode doc497285
Ref: 62497285
Ref: ext/viewcode sphinx-ext-viewcode-add-links-to-highlighted-source-code497285
Ref: 428497285
Ref: ext/viewcode module-sphinx ext viewcode497285
Ref: 2b497285
Ref: ext/viewcode confval-viewcode_import498250
Ref: 42a498250
Ref: ext/viewcode confval-viewcode_enable_epub498995
Ref: 429498995
Ref: sphinx ext viewcode – Add links to highlighted source code-Footnote-1499837
Node: Third-party extensions499879
Ref: ext/thirdparty doc499989
Ref: 42b499989
Ref: ext/thirdparty third-party-extensions499989
Ref: 42c499989
Ref: Third-party extensions-Footnote-1500662
Ref: Third-party extensions-Footnote-2500718
Ref: Third-party extensions-Footnote-3500767
Ref: Third-party extensions-Footnote-4500821
Node: Where to put your own extensions?500880
Ref: ext/thirdparty where-to-put-your-own-extensions500972
Ref: 42d500972
Ref: ext/thirdparty sphinx-contrib500972
Ref: 42e500972
Node: Developing extensions for Sphinx501562
Ref: extdev/index developing-extensions-for-sphinx501687
Ref: 42f501687
Ref: extdev/index doc501687
Ref: 430501687
Ref: extdev/index dev-extensions501687
Ref: 67501687
Node: Discovery of builders by entry point502886
Ref: extdev/index discovery-of-builders-by-entry-point503018
Ref: 432503018
Ref: Discovery of builders by entry point-Footnote-1504064
Node: Extension metadata504175
Ref: extdev/index ext-metadata504348
Ref: 435504348
Ref: extdev/index extension-metadata504348
Ref: 436504348
Node: APIs used for writing extensions505763
Ref: extdev/index apis-used-for-writing-extensions505915
Ref: 437505915
Node: Tutorial Writing a simple extension506295
Ref: extdev/tutorial doc506423
Ref: 438506423
Ref: extdev/tutorial exttut506423
Ref: 439506423
Ref: extdev/tutorial tutorial-writing-a-simple-extension506423
Ref: 43a506423
Node: Important objects507093
Ref: extdev/tutorial important-objects507203
Ref: 43b507203
Node: Build Phases508953
Ref: extdev/tutorial build-phases509088
Ref: 43f509088
Ref: Build Phases-Footnote-1511623
Node: Extension Design511685
Ref: extdev/tutorial extension-design511821
Ref: 441511821
Node: The Setup Function513028
Ref: extdev/tutorial the-setup-function513168
Ref: 444513168
Node: The Node Classes515361
Ref: extdev/tutorial the-node-classes515506
Ref: 448515506
Ref: The Node Classes-Footnote-1516394
Node: The Directive Classes516456
Ref: extdev/tutorial the-directive-classes516601
Ref: 449516601
Ref: The Directive Classes-Footnote-1520345
Node: The Event Handlers520414
Ref: extdev/tutorial the-event-handlers520534
Ref: 44b520534
Node: Application API524039
Ref: extdev/appapi doc524197
Ref: 266524197
Ref: extdev/appapi module-sphinx application524197
Ref: 1524197
Ref: extdev/appapi application-api524197
Ref: 44c524197
Ref: extdev/appapi docutils-documentation524197
Ref: 44d524197
Ref: extdev/appapi sphinx application Sphinx524449
Ref: 43c524449
Node: Extension setup524799
Ref: extdev/appapi extension-setup524890
Ref: 44e524890
Ref: extdev/appapi sphinx application Sphinx setup_extension525108
Ref: 44f525108
Ref: extdev/appapi sphinx application Sphinx require_sphinx525225
Ref: 450525225
Ref: extdev/appapi sphinx application Sphinx connect525270
Ref: 447525270
Ref: extdev/appapi sphinx application Sphinx disconnect525316
Ref: 451525316
Ref: extdev/appapi sphinx application Sphinx add_builder525361
Ref: 434525361
Ref: extdev/appapi sphinx application Sphinx add_config_value525403
Ref: 3d9525403
Ref: extdev/appapi sphinx application Sphinx add_event525465
Ref: 452525465
Ref: extdev/appapi sphinx application Sphinx set_translator525502
Ref: 453525502
Ref: extdev/appapi sphinx application Sphinx add_node525562
Ref: 445525562
Ref: extdev/appapi sphinx application Sphinx add_enumerable_node525606
Ref: 454525606
Ref: extdev/appapi sphinx application Sphinx add_directive525699
Ref: 446525699
Ref: extdev/appapi sphinx application Sphinx add_role525844
Ref: 455525844
Ref: extdev/appapi sphinx application Sphinx add_generic_role525886
Ref: 456525886
Ref: extdev/appapi sphinx application Sphinx add_domain525941
Ref: 457525941
Ref: extdev/appapi sphinx application Sphinx override_domain525981
Ref: 458525981
Ref: extdev/appapi sphinx application Sphinx add_directive_to_domain526026
Ref: 459526026
Ref: extdev/appapi sphinx application Sphinx add_role_to_domain526217
Ref: 45a526217
Ref: extdev/appapi sphinx application Sphinx add_index_to_domain526277
Ref: 45b526277
Ref: extdev/appapi sphinx application Sphinx add_object_type526333
Ref: 1e5526333
Ref: extdev/appapi sphinx application Sphinx add_crossref_type526502
Ref: 45c526502
Ref: extdev/appapi sphinx application Sphinx add_transform526626
Ref: 45d526626
Ref: extdev/appapi sphinx application Sphinx add_post_transform526672
Ref: 45e526672
Ref: extdev/appapi sphinx application Sphinx add_javascript526723
Ref: 45f526723
Ref: extdev/appapi sphinx application Sphinx add_stylesheet526769
Ref: 460526769
Ref: extdev/appapi sphinx application Sphinx add_latex_package526843
Ref: 461526843
Ref: extdev/appapi sphinx application Sphinx add_lexer526909
Ref: 462526909
Ref: extdev/appapi sphinx application Sphinx add_autodocumenter526954
Ref: 463526954
Ref: extdev/appapi sphinx application Sphinx add_autodoc_attrgetter526999
Ref: 464526999
Ref: extdev/appapi sphinx application Sphinx add_search_language527057
Ref: 465527057
Ref: extdev/appapi sphinx application Sphinx add_source_parser527103
Ref: 466527103
Ref: extdev/appapi sphinx application Sphinx add_env_collector527150
Ref: 467527150
Ref: extdev/appapi sphinx application Sphinx add_html_theme527200
Ref: 468527200
Ref: extdev/appapi sphinx application ExtensionError527254
Ref: 469527254
Node: Emitting events527402
Ref: extdev/appapi emitting-events527530
Ref: 46a527530
Ref: extdev/appapi sphinx application Sphinx emit527619
Ref: 46b527619
Ref: extdev/appapi sphinx application Sphinx emit_firstresult527662
Ref: 46c527662
Node: Producing messages / logging527717
Ref: extdev/appapi producing-messages-logging527856
Ref: 46d527856
Ref: extdev/appapi sphinx application Sphinx warn528295
Ref: 470528295
Ref: extdev/appapi sphinx application Sphinx info528930
Ref: 472528930
Ref: extdev/appapi sphinx application Sphinx verbose529137
Ref: 473529137
Ref: extdev/appapi sphinx application Sphinx debug529236
Ref: 474529236
Ref: extdev/appapi sphinx application Sphinx debug2529337
Ref: 475529337
Node: Sphinx runtime information529448
Ref: extdev/appapi sphinx-runtime-information529590
Ref: 476529590
Ref: extdev/appapi sphinx application srcdir529736
Ref: 477529736
Ref: extdev/appapi sphinx application confdir529802
Ref: 478529802
Ref: extdev/appapi sphinx application doctreedir529887
Ref: 479529887
Ref: extdev/appapi sphinx application outdir529979
Ref: 47a529979
Node: Sphinx core events530065
Ref: extdev/appapi sphinx-core-events530206
Ref: 47b530206
Ref: extdev/appapi events530206
Ref: 47c530206
Ref: extdev/appapi event-builder-inited530712
Ref: 47d530712
Ref: extdev/appapi event-config-inited530845
Ref: 47e530845
Ref: extdev/appapi event-env-get-outdated530970
Ref: 47f530970
Ref: extdev/appapi event-env-purge-doc531337
Ref: 443531337
Ref: extdev/appapi event-env-before-read-docs531905
Ref: 480531905
Ref: extdev/appapi event-source-read532477
Ref: 481532477
Ref: extdev/appapi event-doctree-read532976
Ref: 482532976
Ref: extdev/appapi event-missing-reference533169
Ref: 483533169
Ref: extdev/appapi event-doctree-resolved534088
Ref: 442534088
Ref: extdev/appapi event-env-merge-info534511
Ref: 484534511
Ref: extdev/appapi event-env-updated535476
Ref: 485535476
Ref: extdev/appapi event-env-check-consistency535940
Ref: 486535940
Ref: extdev/appapi event-html-collect-pages536145
Ref: 487536145
Ref: extdev/appapi event-html-page-context536419
Ref: 488536419
Ref: extdev/appapi event-build-finished537582
Ref: 489537582
Node: Checking the Sphinx version538109
Ref: extdev/appapi checking-the-sphinx-version538241
Ref: 48a538241
Ref: extdev/appapi sphinx version_info538376
Ref: 48b538376
Node: The Config object538597
Ref: extdev/appapi the-config-object538730
Ref: 48c538730
Ref: extdev/appapi sphinx config Config538785
Ref: 43e538785
Node: The template bridge538893
Ref: extdev/appapi template-bridge539009
Ref: 48d539009
Ref: extdev/appapi the-template-bridge539009
Ref: 48e539009
Ref: extdev/appapi sphinx application TemplateBridge539068
Ref: 26f539068
Ref: extdev/appapi sphinx application TemplateBridge init539264
Ref: 48f539264
Ref: extdev/appapi sphinx application TemplateBridge newest_template_mtime539696
Ref: 490539696
Ref: extdev/appapi sphinx application TemplateBridge render539982
Ref: 491539982
Ref: extdev/appapi sphinx application TemplateBridge render_string540159
Ref: 492540159
Node: Exceptions540341
Ref: extdev/appapi id1540431
Ref: 493540431
Ref: extdev/appapi exceptions540431
Ref: 494540431
Ref: extdev/appapi module-sphinx errors540472
Ref: 17540472
Ref: extdev/appapi sphinx errors SphinxError540472
Ref: 46e540472
Ref: extdev/appapi sphinx errors ConfigError540620
Ref: 495540620
Ref: extdev/appapi sphinx errors ExtensionError540662
Ref: 496540662
Ref: extdev/appapi sphinx errors ThemeError540792
Ref: 497540792
Ref: extdev/appapi sphinx errors VersionRequirementError540833
Ref: 498540833
Node: Build environment API540887
Ref: extdev/envapi module-sphinx environment541021
Ref: 15541021
Ref: extdev/envapi doc541021
Ref: 499541021
Ref: extdev/envapi build-environment-api541021
Ref: 49a541021
Ref: extdev/envapi sphinx environment BuildEnvironment541080
Ref: 39f541080
Ref: extdev/envapi sphinx environment BuildEnvironment app541147
Ref: 49b541147
Ref: extdev/envapi sphinx environment BuildEnvironment config541241
Ref: 49c541241
Ref: extdev/envapi sphinx environment BuildEnvironment srcdir541324
Ref: 49d541324
Ref: extdev/envapi sphinx environment BuildEnvironment doctreedir541381
Ref: 49e541381
Ref: extdev/envapi sphinx environment BuildEnvironment found_docs541464
Ref: 49f541464
Ref: extdev/envapi sphinx environment BuildEnvironment metadata541539
Ref: 4a0541539
Ref: extdev/envapi sphinx environment BuildEnvironment titles541674
Ref: 4a1541674
Ref: extdev/envapi sphinx environment BuildEnvironment docname541794
Ref: 4a2541794
Ref: extdev/envapi sphinx environment BuildEnvironment warn541918
Ref: 471541918
Ref: extdev/envapi sphinx environment BuildEnvironment warn_node542205
Ref: 4a3542205
Ref: extdev/envapi sphinx environment BuildEnvironment doc2path542347
Ref: 4a4542347
Ref: extdev/envapi sphinx environment BuildEnvironment relfn2path542747
Ref: 4a5542747
Ref: extdev/envapi sphinx environment BuildEnvironment note_dependency543115
Ref: 4a6543115
Ref: extdev/envapi sphinx environment BuildEnvironment new_serialno543403
Ref: 4a7543403
Ref: extdev/envapi sphinx environment BuildEnvironment note_reread543588
Ref: 4a8543588
Node: Builder API543746
Ref: extdev/builderapi writing-builders543890
Ref: 342543890
Ref: extdev/builderapi doc543890
Ref: 4a9543890
Ref: extdev/builderapi builder-api543890
Ref: 4aa543890
Ref: extdev/builderapi sphinx builders Builder543954
Ref: 43d543954
Ref: extdev/builderapi sphinx builders Builder name544094
Ref: 433544094
Ref: extdev/builderapi sphinx builders Builder format544190
Ref: 4ab544190
Ref: extdev/builderapi sphinx builders Builder supported_image_types544320
Ref: 4ac544320
Ref: extdev/builderapi sphinx builders Builder supported_remote_images544531
Ref: 4ad544531
Ref: extdev/builderapi sphinx builders Builder supported_data_uri_images544584
Ref: 4ae544584
Ref: extdev/builderapi sphinx builders Builder default_translator_class544639
Ref: 4af544639
Ref: extdev/builderapi sphinx builders Builder get_relative_uri544773
Ref: 4b0544773
Ref: extdev/builderapi sphinx builders Builder build_all544988
Ref: 4b1544988
Ref: extdev/builderapi sphinx builders Builder build_specific545054
Ref: 4b2545054
Ref: extdev/builderapi sphinx builders Builder build_update545173
Ref: 4b3545173
Ref: extdev/builderapi sphinx builders Builder build545275
Ref: 4b4545275
Ref: extdev/builderapi sphinx builders Builder init545510
Ref: 4b5545510
Ref: extdev/builderapi sphinx builders Builder get_outdated_docs545652
Ref: 4b6545652
Ref: extdev/builderapi sphinx builders Builder get_target_uri546026
Ref: 4b7546026
Ref: extdev/builderapi sphinx builders Builder prepare_writing546232
Ref: 4b8546232
Ref: extdev/builderapi sphinx builders Builder write_doc546368
Ref: 4b9546368
Ref: extdev/builderapi sphinx builders Builder finish546480
Ref: 4ba546480
Node: Environment Collector API546600
Ref: extdev/collectorapi doc546742
Ref: 4bb546742
Ref: extdev/collectorapi module-sphinx environment collectors546742
Ref: 16546742
Ref: extdev/collectorapi collector-api546742
Ref: 4bc546742
Ref: extdev/collectorapi environment-collector-api546742
Ref: 4bd546742
Ref: extdev/collectorapi sphinx environment collectors EnvironmentCollector546809
Ref: 4be546809
Ref: extdev/collectorapi sphinx environment collectors EnvironmentCollector clear_doc547163
Ref: 4bf547163
Ref: extdev/collectorapi sphinx environment collectors EnvironmentCollector get_outdated_docs547324
Ref: 4c0547324
Ref: extdev/collectorapi sphinx environment collectors EnvironmentCollector get_updated_docs547509
Ref: 4c1547509
Ref: extdev/collectorapi sphinx environment collectors EnvironmentCollector merge_other547701
Ref: 4c2547701
Ref: extdev/collectorapi sphinx environment collectors EnvironmentCollector process_doc547931
Ref: 4c3547931
Node: Docutils markup API548101
Ref: extdev/markupapi doc548242
Ref: 4c4548242
Ref: extdev/markupapi docutils-markup-api548242
Ref: 4c5548242
Node: Roles548434
Ref: extdev/markupapi roles548517
Ref: 4c6548517
Node: Directives<4>548548
Ref: extdev/markupapi directives548631
Ref: 4c7548631
Ref: extdev/markupapi module-docutils parsers rst548889
Ref: 13548889
Ref: extdev/markupapi docutils parsers rst Directive548891
Ref: 44a548891
Ref: extdev/markupapi docutils parsers rst Directive required_arguments549035
Ref: 4c8549035
Ref: extdev/markupapi docutils parsers rst Directive optional_arguments549130
Ref: 4c9549130
Ref: extdev/markupapi docutils parsers rst Directive final_argument_whitespace549244
Ref: 4ca549244
Ref: extdev/markupapi docutils parsers rst Directive option_spec549353
Ref: 4cb549353
Ref: extdev/markupapi docutils parsers rst Directive has_content549855
Ref: 4cc549855
Ref: extdev/markupapi docutils parsers rst Directive run550005
Ref: 4cd550005
Ref: extdev/markupapi docutils parsers rst Directive name550348
Ref: 4ce550348
Ref: extdev/markupapi docutils parsers rst Directive arguments550487
Ref: 4cf550487
Ref: extdev/markupapi docutils parsers rst Directive options550578
Ref: 4d0550578
Ref: extdev/markupapi docutils parsers rst Directive content550732
Ref: 4d1550732
Ref: extdev/markupapi docutils parsers rst Directive lineno550826
Ref: 4d2550826
Ref: extdev/markupapi docutils parsers rst Directive content_offset550995
Ref: 4d3550995
Ref: extdev/markupapi docutils parsers rst Directive block_text551145
Ref: 4d4551145
Ref: extdev/markupapi docutils parsers rst Directive state551232
Ref: 4d5551232
Ref: extdev/markupapi docutils parsers rst Directive state_machine551258
Ref: 4d6551258
Node: ViewLists551462
Ref: extdev/markupapi viewlists551563
Ref: 4d7551563
Node: Parsing directive content as ReST552234
Ref: extdev/markupapi parsing-directive-content-as-rest552335
Ref: 4d8552335
Ref: Parsing directive content as ReST-Footnote-1554072
Node: Domain API554143
Ref: extdev/domainapi id1554269
Ref: 4d9554269
Ref: extdev/domainapi doc554269
Ref: 4da554269
Ref: extdev/domainapi domain-api554269
Ref: 178554269
Ref: extdev/domainapi module-sphinx domains554269
Ref: 14554269
Ref: extdev/domainapi sphinx domains Domain554306
Ref: 4db554306
Ref: extdev/domainapi sphinx domains Domain check_consistency555652
Ref: 4dd555652
Ref: extdev/domainapi sphinx domains Domain clear_doc555742
Ref: 4de555742
Ref: extdev/domainapi sphinx domains Domain directive555865
Ref: 4df555865
Ref: extdev/domainapi sphinx domains Domain get_full_qualified_name556061
Ref: 4e0556061
Ref: extdev/domainapi sphinx domains Domain get_objects556164
Ref: 4e1556164
Ref: extdev/domainapi sphinx domains Domain get_type_name557131
Ref: 4e2557131
Ref: extdev/domainapi sphinx domains Domain merge_domaindata557232
Ref: 4e3557232
Ref: extdev/domainapi sphinx domains Domain process_doc557430
Ref: 4e4557430
Ref: extdev/domainapi sphinx domains Domain process_field_xref557552
Ref: 4e5557552
Ref: extdev/domainapi sphinx domains Domain resolve_any_xref557723
Ref: 4e6557723
Ref: extdev/domainapi sphinx domains Domain resolve_xref558447
Ref: 4e7558447
Ref: extdev/domainapi sphinx domains Domain role559160
Ref: 4e8559160
Ref: extdev/domainapi sphinx domains Domain dangling_warnings559347
Ref: 4e9559347
Ref: extdev/domainapi sphinx domains Domain data559457
Ref: 4ea559457
Ref: extdev/domainapi sphinx domains Domain data_version559512
Ref: 4dc559512
Ref: extdev/domainapi sphinx domains Domain directives559628
Ref: 4eb559628
Ref: extdev/domainapi sphinx domains Domain indices559710
Ref: 4ec559710
Ref: extdev/domainapi sphinx domains Domain initial_data559782
Ref: 4ed559782
Ref: extdev/domainapi sphinx domains Domain label559867
Ref: 4ee559867
Ref: extdev/domainapi sphinx domains Domain name559968
Ref: 4ef559968
Ref: extdev/domainapi sphinx domains Domain object_types560051
Ref: 4f0560051
Ref: extdev/domainapi sphinx domains Domain roles560151
Ref: 4f1560151
Ref: extdev/domainapi sphinx domains ObjType560221
Ref: 4f2560221
Ref: extdev/domainapi sphinx domains Index560896
Ref: 4f3560896
Ref: extdev/domainapi sphinx domains Index generate561622
Ref: 4f4561622
Node: Parser API563091
Ref: extdev/parserapi id1563234
Ref: 4f5563234
Ref: extdev/parserapi doc563234
Ref: 4f6563234
Ref: extdev/parserapi parser-api563234
Ref: 4f7563234
Ref: extdev/parserapi module-sphinx parsers564337
Ref: 2d564337
Ref: extdev/parserapi sphinx parsers Parser564339
Ref: 269564339
Ref: Parser API-Footnote-1565231
Node: Doctree node classes added by Sphinx565315
Ref: extdev/nodes doctree-node-classes-added-by-sphinx565459
Ref: 4f8565459
Ref: extdev/nodes doc565459
Ref: 4f9565459
Ref: extdev/nodes module-sphinx addnodes565459
Ref: 0565459
Ref: extdev/nodes nodes565459
Ref: 440565459
Node: Nodes for domain-specific object descriptions565714
Ref: extdev/nodes nodes-for-domain-specific-object-descriptions565871
Ref: 4fa565871
Ref: extdev/nodes sphinx addnodes desc565982
Ref: 4fb565982
Ref: extdev/nodes sphinx addnodes desc_signature566242
Ref: 4fc566242
Ref: extdev/nodes sphinx addnodes desc_signature_line566652
Ref: 4fd566652
Ref: extdev/nodes sphinx addnodes desc_addname566986
Ref: 4fe566986
Ref: extdev/nodes sphinx addnodes desc_type567150
Ref: 4ff567150
Ref: extdev/nodes sphinx addnodes desc_returns567297
Ref: 500567297
Ref: extdev/nodes sphinx addnodes desc_name567460
Ref: 501567460
Ref: extdev/nodes sphinx addnodes desc_parameterlist567594
Ref: 502567594
Ref: extdev/nodes sphinx addnodes desc_parameter567741
Ref: 503567741
Ref: extdev/nodes sphinx addnodes desc_optional567878
Ref: 504567878
Ref: extdev/nodes sphinx addnodes desc_annotation568040
Ref: 505568040
Ref: extdev/nodes sphinx addnodes desc_content568214
Ref: 506568214
Node: New admonition-like constructs568426
Ref: extdev/nodes new-admonition-like-constructs568619
Ref: 507568619
Ref: extdev/nodes sphinx addnodes versionmodified568700
Ref: 508568700
Ref: extdev/nodes sphinx addnodes seealso568946
Ref: 509568946
Node: Other paragraph-level nodes569072
Ref: extdev/nodes other-paragraph-level-nodes569236
Ref: 50a569236
Ref: extdev/nodes sphinx addnodes compact_paragraph569311
Ref: 50b569311
Node: New inline nodes569483
Ref: extdev/nodes new-inline-nodes569630
Ref: 50c569630
Ref: extdev/nodes sphinx addnodes index569683
Ref: 50d569683
Ref: extdev/nodes sphinx addnodes pending_xref570268
Ref: 50e570268
Ref: extdev/nodes sphinx addnodes literal_emphasis570569
Ref: 50f570569
Ref: extdev/nodes sphinx addnodes abbreviation570804
Ref: 510570804
Ref: extdev/nodes sphinx addnodes download_reference570952
Ref: 511570952
Node: Special nodes571119
Ref: extdev/nodes special-nodes571230
Ref: 512571230
Ref: extdev/nodes sphinx addnodes only571277
Ref: 513571277
Ref: extdev/nodes sphinx addnodes meta571426
Ref: 514571426
Ref: extdev/nodes sphinx addnodes highlightlang571594
Ref: 515571594
Ref: extdev/nodes sphinx addnodes glossary571852
Ref: 516571852
Ref: extdev/nodes sphinx addnodes toctree571972
Ref: 517571972
Ref: extdev/nodes sphinx addnodes start_of_file572101
Ref: 518572101
Ref: extdev/nodes sphinx addnodes productionlist572265
Ref: 519572265
Ref: extdev/nodes sphinx addnodes production572438
Ref: 51a572438
Node: Logging API572585
Ref: extdev/logging logging-api572727
Ref: 46f572727
Ref: extdev/logging id1572727
Ref: 51b572727
Ref: extdev/logging doc572727
Ref: 51c572727
Ref: extdev/logging sphinx util logging getLogger572768
Ref: 51d572768
Ref: extdev/logging sphinx util logging SphinxLoggerAdapter572869
Ref: 51e572869
Ref: extdev/logging sphinx util logging SphinxLoggerAdapter error573023
Ref: 51f573023
Ref: extdev/logging sphinx util logging SphinxLoggerAdapter critical573077
Ref: 520573077
Ref: extdev/logging sphinx util logging SphinxLoggerAdapter warning573134
Ref: 521573134
Ref: extdev/logging sphinx util logging SphinxLoggerAdapter log574274
Ref: 522574274
Ref: extdev/logging sphinx util logging SphinxLoggerAdapter info574326
Ref: 523574326
Ref: extdev/logging sphinx util logging SphinxLoggerAdapter verbose574379
Ref: 524574379
Ref: extdev/logging sphinx util logging SphinxLoggerAdapter debug574435
Ref: 525574435
Ref: extdev/logging sphinx util logging pending_logging575086
Ref: 526575086
Ref: extdev/logging sphinx util logging pending_warnings575197
Ref: 527575197
Node: i18n API575309
Ref: extdev/i18n id1575406
Ref: 528575406
Ref: extdev/i18n doc575406
Ref: 529575406
Ref: extdev/i18n i18n-api575406
Ref: 52a575406
Ref: extdev/i18n sphinx locale init575441
Ref: 52b575441
Ref: extdev/i18n sphinx locale _575823
Ref: 52c575823
Ref: extdev/i18n sphinx locale __575864
Ref: 52d575864
Node: Deprecated APIs576078
Ref: extdev/index deprecated-apis576203
Ref: 52e576203
Ref: Deprecated APIs-Footnote-1587913
Node: Sphinx Web Support587975
Ref: websupport doc588093
Ref: 52f588093
Ref: websupport websupport588093
Ref: 530588093
Ref: websupport sphinx-web-support588093
Ref: 531588093
Node: Web Support Quick Start588421
Ref: web/quickstart websupportquickstart588528
Ref: 532588528
Ref: web/quickstart web-support-quick-start588528
Ref: 533588528
Ref: web/quickstart doc588528
Ref: 534588528
Node: Building Documentation Data588751
Ref: web/quickstart building-documentation-data588892
Ref: 535588892
Node: Integrating Sphinx Documents Into Your Webapp590202
Ref: web/quickstart integrating-sphinx-documents-into-your-webapp590371
Ref: 538590371
Ref: Integrating Sphinx Documents Into Your Webapp-Footnote-1592252
Node: Authentication592284
Ref: web/quickstart authentication592380
Ref: 53a592380
Ref: Authentication-Footnote-1594545
Node: Performing Searches594577
Ref: web/quickstart performing-searches594739
Ref: 53b594739
Ref: Performing Searches-Footnote-1595610
Node: Comments & Proposals595642
Ref: web/quickstart comments-proposals595777
Ref: 53d595777
Node: Comment Moderation597869
Ref: web/quickstart comment-moderation597976
Ref: 541597976
Node: The WebSupport Class599423
Ref: web/api the-websupport-class599554
Ref: 542599554
Ref: web/api websupportapi599554
Ref: 543599554
Ref: web/api doc599554
Ref: 544599554
Ref: web/api sphinxcontrib websupport WebSupport599607
Ref: 536599607
Node: Methods601584
Ref: web/api methods601648
Ref: 547601648
Ref: web/api sphinxcontrib websupport WebSupport build601679
Ref: 537601679
Ref: web/api sphinxcontrib websupport WebSupport get_document602113
Ref: 539602113
Ref: web/api sphinxcontrib websupport WebSupport get_data603699
Ref: 53f603699
Ref: web/api sphinxcontrib websupport WebSupport add_comment606570
Ref: 53e606570
Ref: web/api sphinxcontrib websupport WebSupport process_vote607835
Ref: 540607835
Ref: web/api sphinxcontrib websupport WebSupport get_search_results608959
Ref: 53c608959
Node: Search Adapters609316
Ref: web/searchadapters doc609440
Ref: 548609440
Ref: web/searchadapters searchadapters609440
Ref: 549609440
Ref: web/searchadapters search-adapters609440
Ref: 54a609440
Ref: web/searchadapters sphinxcontrib websupport search BaseSearch609988
Ref: 545609988
Node: BaseSearch Methods610241
Ref: web/searchadapters basesearch-methods610311
Ref: 54b610311
Ref: web/searchadapters sphinxcontrib websupport search BaseSearch init_indexing610664
Ref: 54e610664
Ref: web/searchadapters sphinxcontrib websupport search BaseSearch finish_indexing611006
Ref: 54f611006
Ref: web/searchadapters sphinxcontrib websupport search BaseSearch feed611205
Ref: 550611205
Ref: web/searchadapters sphinxcontrib websupport search BaseSearch add_document611854
Ref: 54c611854
Ref: web/searchadapters sphinxcontrib websupport search BaseSearch query612711
Ref: 551612711
Ref: web/searchadapters sphinxcontrib websupport search BaseSearch handle_query613178
Ref: 54d613178
Ref: web/searchadapters sphinxcontrib websupport search BaseSearch extract_context613809
Ref: 552613809
Node: Storage Backends614143
Ref: web/storagebackends storage-backends614238
Ref: 553614238
Ref: web/storagebackends doc614238
Ref: 554614238
Ref: web/storagebackends storagebackends614238
Ref: 555614238
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend614801
Ref: 546614801
Node: StorageBackend Methods615070
Ref: web/storagebackends storagebackend-methods615145
Ref: 556615145
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend pre_build615206
Ref: 557615206
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend add_node615377
Ref: 558615377
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend post_build615676
Ref: 559615676
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend add_comment615820
Ref: 55a615820
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend delete_comment616602
Ref: 55b616602
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend get_data617078
Ref: 55c617078
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend process_vote617567
Ref: 55d617567
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend update_username617948
Ref: 55e617948
Ref: web/storagebackends sphinxcontrib websupport storage StorageBackend accept_comment618319
Ref: 55f618319
Node: Sphinx FAQ618581
Ref: faq faq618678
Ref: 560618678
Ref: faq doc618678
Ref: 561618678
Ref: faq sphinx-faq618678
Ref: 562618678
Node: How do I…618884
Ref: faq how-do-i618971
Ref: 563618971
Ref: How do I…-Footnote-1620308
Ref: How do I…-Footnote-2620353
Ref: How do I…-Footnote-3620426
Node: Using Sphinx with…620483
Ref: faq using-sphinx-with620588
Ref: 564620588
Ref: faq usingwith620588
Ref: 6d620588
Ref: Using Sphinx with…-Footnote-1623090
Ref: Using Sphinx with…-Footnote-2623167
Ref: Using Sphinx with…-Footnote-3623243
Ref: Using Sphinx with…-Footnote-4623303
Ref: Using Sphinx with…-Footnote-5623359
Node: Epub info623428
Ref: faq epub-faq623534
Ref: 224623534
Ref: faq epub-info623534
Ref: 565623534
Ref: Epub info-Footnote-1626824
Ref: Epub info-Footnote-2626861
Ref: Epub info-Footnote-3626903
Ref: Epub info-Footnote-4626938
Ref: Epub info-Footnote-5626968
Ref: Epub info-Footnote-6627019
Node: Texinfo info627083
Ref: faq texinfo-info627160
Ref: 566627160
Ref: faq texinfo-faq627160
Ref: 238627160
Node: Displaying Links627545
Ref: faq texinfo-links627624
Ref: 567627624
Ref: faq displaying-links627624
Ref: 568627624
Node: Notes629775
Ref: faq notes629854
Ref: 569629854
Node: Glossary<2>630912
Ref: glossary id1631008
Ref: 56a631008
Ref: glossary doc631008
Ref: 56b631008
Ref: glossary glossary631008
Ref: 56c631008
Ref: glossary term-builder631033
Ref: 431631033
Ref: glossary term-configuration-directory631472
Ref: 47631472
Ref: glossary term-directive631680
Ref: 175631680
Ref: glossary term-document-name632116
Ref: 4b632116
Ref: glossary term-domain632823
Ref: 56d632823
Ref: glossary term-environment633508
Ref: a9633508
Ref: glossary term-master-document633781
Ref: 4a633781
Ref: glossary term-object633871
Ref: 177633871
Ref: glossary term-removeinsphinxxxxwarning634087
Ref: 56e634087
Ref: glossary term-role634305
Ref: 176634305
Ref: glossary term-source-directory634548
Ref: 46634548
Ref: glossary term-restructuredtext634678
Ref: 45634678
Node: Changes in Sphinx634798
Ref: changes doc634898
Ref: 56f634898
Ref: changes changes-in-sphinx634898
Ref: 570634898
Ref: changes changes634898
Ref: 571634898
Ref: examples examples634941
Ref: 572634941
Node: Sphinx authors634941
Ref: authors sphinx-authors635049
Ref: 573635049
Ref: authors doc635049
Ref: 574635049
Ref: authors authors635049
Ref: 575635049
Node: Python Module Index635086
Node: Index637599

End Tag Table


Local Variables:
coding: utf-8
End:
